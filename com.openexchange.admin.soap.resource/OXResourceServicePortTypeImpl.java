
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.openexchange.admin.soap.resource;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import com.openexchange.admin.rmi.OXResourceInterface;
import com.openexchange.admin.rmi.dataobjects.Filestore;
import com.openexchange.admin.rmi.dataobjects.xsd.Credentials;
import com.openexchange.admin.rmi.exceptions.DatabaseUpdateException;
import com.openexchange.admin.rmi.exceptions.InvalidCredentialsException;
import com.openexchange.admin.rmi.exceptions.InvalidDataException;
import com.openexchange.admin.rmi.exceptions.NoSuchContextException;
import com.openexchange.admin.rmi.exceptions.NoSuchResourceException;
import com.openexchange.admin.rmi.exceptions.StorageException;
import com.openexchange.admin.soap.dataobjects.xsd.Context;
import com.openexchange.admin.soap.dataobjects.xsd.Database;
import com.openexchange.admin.soap.dataobjects.xsd.Entry;
import com.openexchange.admin.soap.dataobjects.xsd.Resource;
import com.openexchange.admin.soap.dataobjects.xsd.SOAPMapEntry;
import com.openexchange.admin.soap.dataobjects.xsd.SOAPStringMap;
import com.openexchange.admin.soap.dataobjects.xsd.SOAPStringMapMap;

/**
 * This class was generated by Apache CXF 2.6.0
 * 2012-05-31T13:21:32.761+02:00
 * Generated source version: 2.6.0
 * 
 */

@javax.jws.WebService(
                      serviceName = "OXResourceService",
                      portName = "OXResourceServiceHttpSoap12Endpoint",
                      targetNamespace = "http://soap.admin.openexchange.com",
                      // wsdlLocation = "null",
                      endpointInterface = "com.openexchange.admin.soap.resource.OXResourceServicePortType")
                      
public class OXResourceServicePortTypeImpl implements OXResourceServicePortType {

    public static final AtomicReference<OXResourceInterface> RMI_REFERENCE = new AtomicReference<OXResourceInterface>();

    private static OXResourceInterface getResourceInterface() throws RemoteException_Exception {
        final OXResourceInterface resourceInterface = RMI_REFERENCE.get();
        if (null == resourceInterface) {
            throw new RemoteException_Exception("Missing "+OXResourceInterface.class.getName() + " instance.");
        }
        return resourceInterface;
    }

    @Override
    public void change(final Change parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , NoSuchResourceException_Exception , DatabaseUpdateException_Exception    { 
        final OXResourceInterface resourceInterface = getResourceInterface();
        try {
            resourceInterface.change(soap2Context(parameters.ctx), soap2Resource(parameters.res), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        } catch (final NoSuchResourceException e) {
            throw new NoSuchResourceException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<com.openexchange.admin.soap.dataobjects.xsd.Resource> listAll(final com.openexchange.admin.soap.dataobjects.xsd.Context ctx,final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , DatabaseUpdateException_Exception    { 
        final OXResourceInterface resourceInterface = getResourceInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Resource[] resources = resourceInterface.listAll(soap2Context(ctx), soap2Credentials(auth));
            if (null == resources) {
                return Collections.emptyList();
            }
            final int length = resources.length;
            final List<Resource> list = new ArrayList<Resource>(length);
            for (int i = 0; i < length; i++) {
                list.add(resource2Soap(resources[i]));
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void delete(final Delete parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , NoSuchResourceException_Exception , DatabaseUpdateException_Exception    { 
        final OXResourceInterface resourceInterface = getResourceInterface();
        try {
            resourceInterface.delete(soap2Context(parameters.ctx), soap2Resource(parameters.res), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        } catch (final NoSuchResourceException e) {
            throw new NoSuchResourceException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<com.openexchange.admin.soap.dataobjects.xsd.Resource> getMultipleData(final com.openexchange.admin.soap.dataobjects.xsd.Context ctx,final java.util.List<com.openexchange.admin.soap.dataobjects.xsd.Resource> list,final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , NoSuchResourceException_Exception , DatabaseUpdateException_Exception    { 
        final OXResourceInterface resourceInterface = getResourceInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Resource[] resources = new com.openexchange.admin.rmi.dataobjects.Resource[list.size()];
            for (int i = 0; i < resources.length; i++) {
                resources[i] = soap2Resource(list.get(i));
            }
            final com.openexchange.admin.rmi.dataobjects.Resource[] retResources = resourceInterface.getData(soap2Context(ctx), resources, soap2Credentials(auth));
            if (null == retResources) {
                return Collections.emptyList();
            }
            final java.util.List<Resource> ret = new ArrayList<Resource>(retResources.length);
            for (int i = 0; i < retResources.length; i++) {
                ret.add(resource2Soap(retResources[i]));
            }
            return ret;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        } catch (final NoSuchResourceException e) {
            throw new NoSuchResourceException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public com.openexchange.admin.soap.dataobjects.xsd.Resource create(final com.openexchange.admin.soap.dataobjects.xsd.Context ctx,final com.openexchange.admin.soap.dataobjects.xsd.Resource res,final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , DatabaseUpdateException_Exception    { 
        final OXResourceInterface resourceInterface = getResourceInterface();
        try {
            return resource2Soap(resourceInterface.create(soap2Context(ctx), soap2Resource(res), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<com.openexchange.admin.soap.dataobjects.xsd.Resource> list(final com.openexchange.admin.soap.dataobjects.xsd.Context ctx,final java.lang.String pattern,final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , DatabaseUpdateException_Exception    { 
        final OXResourceInterface resourceInterface = getResourceInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Resource[] resources = resourceInterface.list(soap2Context(ctx), pattern, soap2Credentials(auth));
            if (null == resources) {
                return Collections.emptyList();
            }
            final int length = resources.length;
            final List<Resource> list = new ArrayList<Resource>(length);
            for (int i = 0; i < length; i++) {
                list.add(resource2Soap(resources[i]));
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public com.openexchange.admin.soap.dataobjects.xsd.Resource getData(final com.openexchange.admin.soap.dataobjects.xsd.Context ctx,final com.openexchange.admin.soap.dataobjects.xsd.Resource res,final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , NoSuchResourceException_Exception , DatabaseUpdateException_Exception    { 
        final OXResourceInterface resourceInterface = getResourceInterface();
        try {
            return resource2Soap(resourceInterface.getData(soap2Context(ctx), soap2Resource(res), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        } catch (final NoSuchResourceException e) {
            throw new NoSuchResourceException_Exception(e.getMessage(), e);
        }
    }

    private static com.openexchange.admin.rmi.dataobjects.Credentials soap2Credentials(final Credentials soapCredentials) {
        if (null == soapCredentials) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Credentials credentials = new com.openexchange.admin.rmi.dataobjects.Credentials();
        credentials.setLogin(soapCredentials.getLogin());
        credentials.setPassword(soapCredentials.getPassword());
        return credentials;
    }

    private static com.openexchange.admin.rmi.dataobjects.Resource soap2Resource(final Resource soapResource) {
        if (null == soapResource) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Resource resource = new com.openexchange.admin.rmi.dataobjects.Resource();
        resource.setAvailable(soapResource.isAvailable());
        resource.setDescription(soapResource.getDescription());
        resource.setDisplayname(soapResource.getDisplayname());
        resource.setEmail(soapResource.getEmail());
        resource.setId(soapResource.getId());
        resource.setName(soapResource.getName());
        return resource;
    }

    private static Resource resource2Soap(final com.openexchange.admin.rmi.dataobjects.Resource resource) {
        if (null == resource) {
            return null;
        }
        final Resource soapResource = new Resource();
        soapResource.setAvailable(resource.getAvailable());
        soapResource.setDescription(resource.getDescription());
        soapResource.setDisplayname(resource.getDisplayname());
        soapResource.setEmail(resource.getEmail());
        soapResource.setId(resource.getId());
        soapResource.setName(resource.getName());
        return soapResource;
    }

    private static com.openexchange.admin.rmi.dataobjects.Filestore soap2Filestore(final Filestore soapFilestore) {
        if (null == soapFilestore) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Filestore filestore = new com.openexchange.admin.rmi.dataobjects.Filestore();
        filestore.setCurrentContexts(soapFilestore.getCurrentContexts());
        filestore.setId(soapFilestore.getId());
        filestore.setMaxContexts(soapFilestore.getMaxContexts());
        filestore.setReserved(soapFilestore.getReserved());
        filestore.setSize(soapFilestore.getSize());
        filestore.setUrl(soapFilestore.getUrl());
        filestore.setUsed(soapFilestore.getUsed());
        return filestore;
    }

    private static com.openexchange.admin.rmi.dataobjects.Context soap2Context(final Context soapContext) {
        if (null == soapContext) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Context ret = new com.openexchange.admin.rmi.dataobjects.Context();
        ret.setAverage_size(soapContext.getAverageSize());
        ret.setEnabled(soapContext.isEnabled());
        ret.setFilestore_name(soapContext.getFilestoreName());
        ret.setFilestoreId(soapContext.getFilestoreId());
        ret.setId(soapContext.getId());
        if (null != soapContext.getLoginMappings()) {
            for (String loginMapping : soapContext.getLoginMappings()) {
                if (null != loginMapping) {
                    ret.addLoginMapping(loginMapping);
                }
            }
        }
        ret.setMaxQuota(soapContext.getMaxQuota());
        ret.setName(soapContext.getName());
        ret.setUsedQuota(soapContext.getUsedQuota());
        ret.setReadDatabase(soap2Database(soapContext.getReadDatabase()));
        ret.setWriteDatabase(soap2Database(soapContext.getWriteDatabase()));
        ret.setUserAttributes(soap2MapMap(soapContext.getUserAttributes()));
        return ret;
    }

    private static com.openexchange.admin.rmi.dataobjects.Database soap2Database(final Database soapDatabase) {
        if (null == soapDatabase) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Database ret = new com.openexchange.admin.rmi.dataobjects.Database();

        Integer itg = soapDatabase.getClusterWeight();
        if (itg != null) {
            ret.setClusterWeight(itg);
        }

        itg = soapDatabase.getCurrentUnits();
        if (itg != null) {
            ret.setCurrentUnits(itg);
        }

        String tmp = soapDatabase.getDriver();
        if (tmp != null) {
            ret.setDriver(tmp);
        }

        itg = soapDatabase.getId();
        if (itg != null) {
            ret.setId(itg);
        }

        tmp = soapDatabase.getLogin();
        if (tmp != null) {
            ret.setLogin(tmp);
        }

        Boolean bool = soapDatabase.isMaster();
        if (tmp != null) {
            ret.setMaster(bool);
        }

        itg = soapDatabase.getMasterId();
        if (itg != null) {
            ret.setMasterId(itg);
        }

        itg = soapDatabase.getMaxUnits();
        if (itg != null) {
            ret.setMaxUnits(itg);
        }

        tmp = soapDatabase.getName();
        if (tmp != null) {
            ret.setName(tmp);
        }

        tmp = soapDatabase.getPassword();
        if (tmp != null) {
            ret.setPassword(tmp);
        }

        itg = soapDatabase.getPoolHardLimit();
        if (itg != null) {
            ret.setPoolHardLimit(itg);
        }

        itg = soapDatabase.getPoolInitial();
        if (itg != null) {
            ret.setPoolInitial(itg);
        }

        itg = soapDatabase.getPoolMax();
        if (itg != null) {
            ret.setPoolMax(itg);
        }

        itg = soapDatabase.getReadId();
        if (itg != null) {
            ret.setRead_id(itg);
        }

        tmp = soapDatabase.getScheme();
        if (tmp != null) {
            ret.setScheme(tmp);
        }

        tmp = soapDatabase.getUrl();
        if (tmp != null) {
            ret.setUrl(tmp);
        }
        return ret;
    }

    private static Map<String, Map<String, String>> soap2MapMap(final SOAPStringMapMap soapStringMapMap) {
        if (null == soapStringMapMap) {
            return null;
        }
        final java.util.List<SOAPMapEntry> entries = soapStringMapMap.getEntries();
        final Map<String, Map<String, String>> map = new HashMap<String, Map<String,String>>(entries.size());
        for (final SOAPMapEntry soapMapEntry : entries) {
            if (null != soapMapEntry)
                map.put(soapMapEntry.getKey(), soap2Map(soapMapEntry.getValue()));
        }
        return map;
    }

    private static Map<String, String> soap2Map(final SOAPStringMap soapStringMap) {
        if (null == soapStringMap) {
            return null;
        }
        final java.util.List<Entry> entries = soapStringMap.getEntries();
        final Map<String, String> map = new HashMap<String, String>(entries.size());
        for (final Entry entry : entries) {
            if (null != entry)
                map.put(entry.getKey(), entry.getValue());
        }
        return map;
    }

    private static Context context2Soap(final com.openexchange.admin.rmi.dataobjects.Context context) {
        if (null == context) {
            return null;
        }
        final Context soapContext = new Context();
        soapContext.setAverageSize(context.getAverage_size());
        soapContext.setEnabled(context.getEnabled());
        soapContext.setFilestoreId(context.getFilestoreId());
        soapContext.setFilestoreName(context.getFilestore_name());
        final HashSet<String> lmappings = context.getLoginMappings();
        if (null != lmappings && !lmappings.isEmpty()) {
            soapContext.setLoginMappings(new ArrayList<String>(lmappings));
        }
        soapContext.setId(context.getId());
        soapContext.setMaxQuota(context.getMaxQuota());
        soapContext.setName(context.getName());
        soapContext.setReadDatabase(database2Soap(context.getReadDatabase()));
        soapContext.setUsedQuota(context.getUsedQuota());
        soapContext.setUserAttributes(mapmap2Soap(context.getUserAttributes()));
        soapContext.setWriteDatabase(database2Soap(context.getWriteDatabase()));
        return soapContext;
    }

    private static Database database2Soap(final com.openexchange.admin.rmi.dataobjects.Database database) {
        if (null == database) {
            return null;
        }
        final Database soapDatabase = new Database();
        soapDatabase.setClusterWeight(database.getClusterWeight());
        soapDatabase.setCurrentUnits(database.getCurrentUnits());
        soapDatabase.setDriver(database.getDriver());
        soapDatabase.setId(database.getId());
        soapDatabase.setLogin(database.getLogin());
        soapDatabase.setMaster(database.getMaster());
        soapDatabase.setMasterId(database.getMasterId());
        soapDatabase.setMaxUnits(database.getMaxUnits());
        soapDatabase.setName(database.getName());
        soapDatabase.setPassword(database.getPassword());
        soapDatabase.setPoolHardLimit(database.getPoolHardLimit());
        soapDatabase.setPoolInitial(database.getPoolInitial());
        soapDatabase.setPoolMax(database.getPoolMax());
        soapDatabase.setReadId(database.getRead_id());
        soapDatabase.setScheme(database.getScheme());
        soapDatabase.setUrl(database.getUrl());
        return soapDatabase;
    }

    private static SOAPStringMapMap mapmap2Soap(final Map<String, Map<String, String>> mapmap) {
        if (null == mapmap) {
            return null;
        }
        final SOAPStringMapMap soapMapMap = new SOAPStringMapMap();
        final java.util.List<SOAPMapEntry> entries = new ArrayList<SOAPMapEntry>(mapmap.size());
        for (final Map.Entry<String,Map<String,String>> mapmapEntry : mapmap.entrySet()) {
            final SOAPMapEntry mapEntry = new SOAPMapEntry();
            mapEntry.setKey(mapmapEntry.getKey());
            mapEntry.setValue(map2Soap(mapmapEntry.getValue()));
            entries.add(mapEntry);
        }
        soapMapMap.setEntries(entries);
        return soapMapMap;
    }

    private static SOAPStringMap map2Soap(final Map<String, String> map) {
        if (null == map) {
            return null;
        }
        final SOAPStringMap soapMap = new SOAPStringMap();
        final java.util.List<Entry> entries = new ArrayList<Entry>(map.size());
        for (final Map.Entry<String,String> mapEntry : map.entrySet()) {
            final Entry entry = new Entry();
            entry.setKey(mapEntry.getKey());
            entry.setValue(mapEntry.getValue());
            entries.add(entry);
        }
        soapMap.setEntries(entries);
        return soapMap;
    }

}
