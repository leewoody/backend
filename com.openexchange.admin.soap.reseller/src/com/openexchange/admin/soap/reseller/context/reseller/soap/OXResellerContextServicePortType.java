package com.openexchange.admin.soap.reseller.context.reseller.soap;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 2.6.0
 * 2012-06-06T11:28:46.232+02:00
 * Generated source version: 2.6.0
 *
 */
@WebService(targetNamespace = "http://soap.reseller.admin.openexchange.com", name = "OXResellerContextServicePortType")
@XmlSeeAlso({com.openexchange.admin.soap.reseller.context.io.ObjectFactory.class, ObjectFactory.class, com.openexchange.admin.soap.reseller.context.rmi.dataobjects.ObjectFactory.class, com.openexchange.admin.soap.reseller.context.soap.dataobjects.ObjectFactory.class, com.openexchange.admin.soap.reseller.context.reseller.rmi.dataobjects.ObjectFactory.class, com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ObjectFactory.class, com.openexchange.admin.soap.reseller.context.rmi.ObjectFactory.class, com.openexchange.admin.soap.reseller.context.rmi.exceptions.ObjectFactory.class})
public interface OXResellerContextServicePortType {

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:listQuota", output = "urn:listQuotaResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listQuotaInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:listQuotaDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:listQuotaNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:listQuotaStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listQuotaRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listQuotaInvalidDataException")})
    @WebMethod(action = "urn:listQuota")
    @ResponseWrapper(localName = "listResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.ListQuotaResponse")
    public java.util.List<com.openexchange.admin.soap.reseller.context.soap.dataobjects.Quota> listQuota(
        @WebParam(partName = "parameters", name = "listQuota", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        ListQuota parameters
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:change", output = "urn:changeResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:changeInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:changeDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:changeNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:changeStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:changeRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:changeInvalidDataException")})
    @WebMethod(action = "urn:change")
    public void change(
        @WebParam(partName = "parameters", name = "change", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        Change parameters
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:delete", output = "urn:deleteResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:deleteDatabaseUpdateException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:deleteInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:deleteDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:deleteNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:deleteStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:deleteRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:deleteInvalidDataException")})
    @WebMethod(action = "urn:delete")
    public void delete(
        @WebParam(partName = "parameters", name = "delete", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        Delete parameters
    ) throws DatabaseUpdateException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:disable", output = "urn:disableResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:disableInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:disableDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:disableNoSuchContextException"), @FaultAction(className = NoSuchReasonException_Exception.class, value = "urn:disableNoSuchReasonException"), @FaultAction(className = StorageException_Exception.class, value = "urn:disableStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:disableRemoteException"), @FaultAction(className = OXContextException_Exception.class, value = "urn:disableOXContextException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:disableInvalidDataException")})
    @WebMethod(action = "urn:disable")
    public void disable(
        @WebParam(partName = "parameters", name = "disable", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        Disable parameters
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, NoSuchReasonException_Exception, StorageException_Exception, RemoteException_Exception, OXContextException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:list", output = "urn:listResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listInvalidCredentialsException"), @FaultAction(className = StorageException_Exception.class, value = "urn:listStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listInvalidDataException")})
    @RequestWrapper(localName = "list", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.List")
    @WebMethod(action = "urn:list")
    @ResponseWrapper(localName = "listResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.ListResponse")
    public java.util.List<com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ResellerContext> list(
        @WebParam(name = "search_pattern", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        java.lang.String searchPattern,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.rmi.dataobjects.Credentials auth
    ) throws InvalidCredentialsException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:changeModuleAccess", output = "urn:changeModuleAccessResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:changeModuleAccessInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:changeModuleAccessDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:changeModuleAccessNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:changeModuleAccessStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:changeModuleAccessRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:changeModuleAccessInvalidDataException")})
    @WebMethod(action = "urn:changeModuleAccess")
    public void changeModuleAccess(
        @WebParam(partName = "parameters", name = "changeModuleAccess", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        ChangeModuleAccess parameters
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:changeModuleAccessByName", output = "urn:changeModuleAccessByNameResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:changeModuleAccessByNameInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:changeModuleAccessByNameDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:changeModuleAccessByNameNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:changeModuleAccessByNameStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:changeModuleAccessByNameRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:changeModuleAccessByNameInvalidDataException")})
    @WebMethod(action = "urn:changeModuleAccessByName")
    public void changeModuleAccessByName(
        @WebParam(partName = "parameters", name = "changeModuleAccessByName", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        ChangeModuleAccessByName parameters
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:enable", output = "urn:enableResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:enableInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:enableDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:enableNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:enableStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:enableRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:enableInvalidDataException")})
    @WebMethod(action = "urn:enable")
    public void enable(
        @WebParam(partName = "parameters", name = "enable", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        Enable parameters
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:downgrade", output = "urn:downgradeResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:downgradeDatabaseUpdateException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:downgradeInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:downgradeDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:downgradeNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:downgradeStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:downgradeRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:downgradeInvalidDataException")})
    @WebMethod(action = "urn:downgrade")
    public void downgrade(
        @WebParam(partName = "parameters", name = "downgrade", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        Downgrade parameters
    ) throws DatabaseUpdateException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:getModuleAccess", output = "urn:getModuleAccessResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getModuleAccessInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:getModuleAccessDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:getModuleAccessNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:getModuleAccessStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getModuleAccessRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getModuleAccessInvalidDataException")})
    @RequestWrapper(localName = "getModuleAccess", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.GetModuleAccess")
    @WebMethod(action = "urn:getModuleAccess")
    @ResponseWrapper(localName = "getModuleAccessResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.GetModuleAccessResponse")
    public com.openexchange.admin.soap.reseller.context.soap.dataobjects.UserModuleAccess getModuleAccess(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.rmi.dataobjects.Credentials auth
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:listAll", output = "urn:listAllResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listAllInvalidCredentialsException"), @FaultAction(className = StorageException_Exception.class, value = "urn:listAllStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listAllRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listAllInvalidDataException")})
    @RequestWrapper(localName = "listAll", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.ListAll")
    @WebMethod(action = "urn:listAll")
    @ResponseWrapper(localName = "listAllResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.ListAllResponse")
    public java.util.List<com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ResellerContext> listAll(
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.rmi.dataobjects.Credentials auth
    ) throws InvalidCredentialsException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:listByFilestore", output = "urn:listByFilestoreResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listByFilestoreInvalidCredentialsException"), @FaultAction(className = NoSuchFilestoreException_Exception.class, value = "urn:listByFilestoreNoSuchFilestoreException"), @FaultAction(className = StorageException_Exception.class, value = "urn:listByFilestoreStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listByFilestoreRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listByFilestoreInvalidDataException")})
    @RequestWrapper(localName = "listByFilestore", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.ListByFilestore")
    @WebMethod(action = "urn:listByFilestore")
    @ResponseWrapper(localName = "listByFilestoreResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.ListByFilestoreResponse")
    public java.util.List<com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ResellerContext> listByFilestore(
        @WebParam(name = "fs", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.rmi.dataobjects.Filestore fs,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.rmi.dataobjects.Credentials auth
    ) throws InvalidCredentialsException_Exception, NoSuchFilestoreException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:listByDatabase", output = "urn:listByDatabaseResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listByDatabaseInvalidCredentialsException"), @FaultAction(className = NoSuchDatabaseException_Exception.class, value = "urn:listByDatabaseNoSuchDatabaseException"), @FaultAction(className = StorageException_Exception.class, value = "urn:listByDatabaseStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listByDatabaseRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listByDatabaseInvalidDataException")})
    @RequestWrapper(localName = "listByDatabase", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.ListByDatabase")
    @WebMethod(action = "urn:listByDatabase")
    @ResponseWrapper(localName = "listByDatabaseResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.ListByDatabaseResponse")
    public java.util.List<com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ResellerContext> listByDatabase(
        @WebParam(name = "db", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.rmi.dataobjects.Database db,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.rmi.dataobjects.Credentials auth
    ) throws InvalidCredentialsException_Exception, NoSuchDatabaseException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:create", output = "urn:createResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:createInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:createDuplicateExtensionException"), @FaultAction(className = StorageException_Exception.class, value = "urn:createStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:createRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:createInvalidDataException"), @FaultAction(className = ContextExistsException_Exception.class, value = "urn:createContextExistsException")})
    @RequestWrapper(localName = "create", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.Create")
    @WebMethod(action = "urn:create")
    @ResponseWrapper(localName = "createResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.CreateResponse")
    public com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ResellerContext create(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "admin_user", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.soap.dataobjects.User adminUser,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.rmi.dataobjects.Credentials auth,
        @WebParam(name = "schema_select_strategy", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.soap.dataobjects.SchemaSelectStrategy schemaSelectStrategy
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception, ContextExistsException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:createModuleAccess", output = "urn:createModuleAccessResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:createModuleAccessInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:createModuleAccessDuplicateExtensionException"), @FaultAction(className = StorageException_Exception.class, value = "urn:createModuleAccessStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:createModuleAccessRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:createModuleAccessInvalidDataException"), @FaultAction(className = ContextExistsException_Exception.class, value = "urn:createModuleAccessContextExistsException")})
    @RequestWrapper(localName = "createModuleAccess", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.CreateModuleAccess")
    @WebMethod(action = "urn:createModuleAccess")
    @ResponseWrapper(localName = "createModuleAccessResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.CreateModuleAccessResponse")
    public com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ResellerContext createModuleAccess(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "admin_user", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.soap.dataobjects.User adminUser,
        @WebParam(name = "access", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.soap.dataobjects.UserModuleAccess access,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.rmi.dataobjects.Credentials auth,
        @WebParam(name = "schema_select_strategy", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.soap.dataobjects.SchemaSelectStrategy schemaSelectStrategy
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception, ContextExistsException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:getData", output = "urn:getDataResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getDataInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:getDataDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:getDataNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:getDataStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getDataRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getDataInvalidDataException")})
    @RequestWrapper(localName = "getData", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.GetData")
    @WebMethod(action = "urn:getData")
    @ResponseWrapper(localName = "getDataResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.GetDataResponse")
    public com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ResellerContext getData(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.rmi.dataobjects.Credentials auth
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:createModuleAccessByName", output = "urn:createModuleAccessByNameResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:createModuleAccessByNameInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:createModuleAccessByNameDuplicateExtensionException"), @FaultAction(className = StorageException_Exception.class, value = "urn:createModuleAccessByNameStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:createModuleAccessByNameRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:createModuleAccessByNameInvalidDataException"), @FaultAction(className = ContextExistsException_Exception.class, value = "urn:createModuleAccessByNameContextExistsException")})
    @RequestWrapper(localName = "createModuleAccessByName", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.CreateModuleAccessByName")
    @WebMethod(action = "urn:createModuleAccessByName")
    @ResponseWrapper(localName = "createModuleAccessByNameResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.CreateModuleAccessByNameResponse")
    public com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ResellerContext createModuleAccessByName(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "admin_user", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.soap.dataobjects.User adminUser,
        @WebParam(name = "access_combination_name", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        java.lang.String accessCombinationName,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.rmi.dataobjects.Credentials auth,
        @WebParam(name = "schema_select_strategy", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.soap.dataobjects.SchemaSelectStrategy schemaSelectStrategy
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception, ContextExistsException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:exists", output = "urn:existsResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:existsInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:existsDuplicateExtensionException"), @FaultAction(className = StorageException_Exception.class, value = "urn:existsStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:existsRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:existsInvalidDataException")})
    @RequestWrapper(localName = "exists", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.Exists")
    @WebMethod(action = "urn:exists")
    @ResponseWrapper(localName = "existsResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.ExistsResponse")
    public java.lang.Boolean exists(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.rmi.dataobjects.Credentials auth
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:disableAll", output = "urn:disableAllResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:disableAllInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:disableAllDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:disableAllNoSuchContextException"), @FaultAction(className = NoSuchReasonException_Exception.class, value = "urn:disableAllNoSuchReasonException"), @FaultAction(className = StorageException_Exception.class, value = "urn:disableAllStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:disableAllRemoteException"), @FaultAction(className = OXContextException_Exception.class, value = "urn:disableAllOXContextException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:disableAllInvalidDataException")})
    @WebMethod(action = "urn:disableAll")
    public void disableAll(
        @WebParam(partName = "parameters", name = "disableAll", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        DisableAll parameters
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, NoSuchReasonException_Exception, StorageException_Exception, RemoteException_Exception, OXContextException_Exception, InvalidDataException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:enableAll", output = "urn:enableAllResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:enableAllInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:enableAllDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:enableAllNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:enableAllStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:enableAllRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:enableAllInvalidDataException")})
    @WebMethod(action = "urn:enableAll")
    public void enableAll(
        @WebParam(partName = "parameters", name = "enableAll", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        EnableAll parameters
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:getAccessCombinationName", output = "urn:getAccessCombinationNameResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getAccessCombinationNameInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:getAccessCombinationNameDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:getAccessCombinationNameNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:getAccessCombinationNameStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getAccessCombinationNameRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getAccessCombinationNameInvalidDataException")})
    @RequestWrapper(localName = "getAccessCombinationName", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.GetAccessCombinationName")
    @WebMethod(action = "urn:getAccessCombinationName")
    @ResponseWrapper(localName = "getAccessCombinationNameResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.context.reseller.soap.GetAccessCombinationNameResponse")
    public java.lang.String getAccessCombinationName(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.context.rmi.dataobjects.Credentials auth
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;
}
