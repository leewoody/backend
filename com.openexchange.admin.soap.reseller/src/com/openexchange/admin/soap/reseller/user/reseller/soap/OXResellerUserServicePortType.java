package com.openexchange.admin.soap.reseller.user.reseller.soap;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 2.6.0
 * 2012-06-06T11:07:58.214+02:00
 * Generated source version: 2.6.0
 *
 */
@WebService(targetNamespace = "http://soap.reseller.admin.openexchange.com", name = "OXResellerUserServicePortType")
@XmlSeeAlso({com.openexchange.admin.soap.reseller.user.rmi.dataobjects.ObjectFactory.class, com.openexchange.admin.soap.reseller.user.reseller.rmi.dataobjects.ObjectFactory.class, com.openexchange.admin.soap.reseller.user.rmi.ObjectFactory.class, ObjectFactory.class, com.openexchange.admin.soap.reseller.user.rmi.exceptions.ObjectFactory.class, com.openexchange.admin.soap.reseller.user.reseller.soap.dataobjects.ObjectFactory.class, com.openexchange.admin.soap.reseller.user.soap.dataobjects.ObjectFactory.class, com.openexchange.admin.soap.reseller.user.io.ObjectFactory.class})
public interface OXResellerUserServicePortType {

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:moveFromContextToUserFilestore", output = "urn:moveFromContextToUserFilestoreResponse", fault = { @FaultAction(className = StorageException_Exception.class, value = "urn:moveFromContextToUserFilestoreStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:moveFromContextToUserFilestoreInvalidCredentialsException"),@FaultAction(className = InvalidDataException_Exception.class, value = "urn:moveFromContextToUserFilestoreInvalidDataException"),@FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:moveFromContextToUserFilestoreDuplicateExtensionException"),@FaultAction(className = NoSuchContextException_Exception.class, value = "urn:moveFromContextToUserFilestoreNoSuchContextException"),@FaultAction(className = RemoteException_Exception.class, value = "urn:moveFromContextToUserFilestoreRemoteException"),@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:moveFromContextToUserFilestoreDatabaseUpdateException"),@FaultAction(className = NoSuchUserException_Exception.class, value = "urn:moveFromContextToUserFilestoreNoSuchUserException")})
    @WebMethod(action = "urn:moveFromContextToUserFilestore")
    @ResponseWrapper(localName = "moveFromContextToUserFilestoreResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.MoveFromContextToUserFilestoreResponse")
    public java.lang.Integer moveFromContextToUserFilestore(
        @WebParam(partName = "parameters", name = "moveFromContextToUserFilestore", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        MoveFromContextToUserFilestore parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception, NoSuchUserException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:moveFromUserToContextFilestore", output = "urn:moveFromUserToContextFilestoreResponse", fault = { @FaultAction(className = StorageException_Exception.class, value = "urn:moveFromUserToContextFilestoreStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:moveFromUserToContextFilestoreInvalidCredentialsException"),@FaultAction(className = InvalidDataException_Exception.class, value = "urn:moveFromUserToContextFilestoreInvalidDataException"),@FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:moveFromUserToContextFilestoreDuplicateExtensionException"),@FaultAction(className = NoSuchContextException_Exception.class, value = "urn:moveFromUserToContextFilestoreNoSuchContextException"),@FaultAction(className = RemoteException_Exception.class, value = "urn:moveFromUserToContextFilestoreRemoteException"),@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:moveFromUserToContextFilestoreDatabaseUpdateException"),@FaultAction(className = NoSuchUserException_Exception.class, value = "urn:moveFromUserToContextFilestoreNoSuchUserException")})
    @WebMethod(action = "urn:moveFromUserToContextFilestore")
    @ResponseWrapper(localName = "moveFromUserToContextFilestoreResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.MoveFromUserToContextFilestoreResponse")
    public java.lang.Integer moveFromUserToContextFilestore(
        @WebParam(partName = "parameters", name = "moveFromUserToContextFilestore", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        MoveFromUserToContextFilestore parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception, NoSuchUserException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:moveFromMasterToUserFilestore", output = "urn:moveFromMasterToUserFilestoreResponse", fault = { @FaultAction(className = StorageException_Exception.class, value = "urn:moveFromMasterToUserFilestoreStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:moveFromMasterToUserFilestoreInvalidCredentialsException"),@FaultAction(className = InvalidDataException_Exception.class, value = "urn:moveFromMasterToUserFilestoreInvalidDataException"),@FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:moveFromMasterToUserFilestoreDuplicateExtensionException"),@FaultAction(className = NoSuchContextException_Exception.class, value = "urn:moveFromMasterToUserFilestoreNoSuchContextException"),@FaultAction(className = RemoteException_Exception.class, value = "urn:moveFromMasterToUserFilestoreRemoteException"),@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:moveFromMasterToUserFilestoreDatabaseUpdateException"),@FaultAction(className = NoSuchUserException_Exception.class, value = "urn:moveFromMasterToUserFilestoreNoSuchUserException")})
    @WebMethod(action = "urn:moveFromMasterToUserFilestore")
    @ResponseWrapper(localName = "moveFromMasterToUserFilestoreResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.MoveFromMasterToUserFilestoreResponse")
    public java.lang.Integer moveFromMasterToUserFilestore(
        @WebParam(partName = "parameters", name = "moveFromMasterToUserFilestore", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        MoveFromMasterToUserFilestore parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception, NoSuchUserException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:moveFromUserFilestoreToMaster", output = "urn:moveFromUserFilestoreToMasterResponse", fault = { @FaultAction(className = StorageException_Exception.class, value = "urn:moveFromUserFilestoreToMasterStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:moveFromUserFilestoreToMasterInvalidCredentialsException"),@FaultAction(className = InvalidDataException_Exception.class, value = "urn:moveFromUserFilestoreToMasterInvalidDataException"),@FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:moveFromUserFilestoreToMasterDuplicateExtensionException"),@FaultAction(className = NoSuchContextException_Exception.class, value = "urn:moveFromUserFilestoreToMasterNoSuchContextException"),@FaultAction(className = RemoteException_Exception.class, value = "urn:moveFromUserFilestoreToMasterRemoteException"),@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:moveFromUserFilestoreToMasterDatabaseUpdateException"),@FaultAction(className = NoSuchUserException_Exception.class, value = "urn:moveFromUserFilestoreToMasterNoSuchUserException")})
    @WebMethod(action = "urn:moveFromUserFilestoreToMaster")
    @ResponseWrapper(localName = "moveFromUserFilestoreToMasterResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.MoveFromUserFilestoreToMasterResponse")
    public java.lang.Integer moveFromUserFilestoreToMaster(
        @WebParam(partName = "parameters", name = "moveFromUserFilestoreToMaster", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        MoveFromUserFilestoreToMaster parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception, NoSuchUserException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:moveUserFilestore", output = "urn:moveUserFilestoreResponse", fault = { @FaultAction(className = StorageException_Exception.class, value = "urn:moveUserFilestoreStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:moveUserFilestoreInvalidCredentialsException"),@FaultAction(className = InvalidDataException_Exception.class, value = "urn:moveUserFilestoreInvalidDataException"),@FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:moveUserFilestoreDuplicateExtensionException"),@FaultAction(className = NoSuchContextException_Exception.class, value = "urn:moveUserFilestoreNoSuchContextException"),@FaultAction(className = RemoteException_Exception.class, value = "urn:moveUserFilestoreRemoteException"),@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:moveUserFilestoreDatabaseUpdateException"),@FaultAction(className = NoSuchUserException_Exception.class, value = "urn:moveUserFilestoreNoSuchUserException")})
    @WebMethod(action = "urn:moveUserFilestore")
    @ResponseWrapper(localName = "moveUserFilestoreResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.MoveUserFilestoreResponse")
    public java.lang.Integer moveUserFilestore(
        @WebParam(partName = "parameters", name = "moveUserFilestore", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        MoveUserFilestore parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception, NoSuchUserException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:change", output = "urn:changeResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:changeDatabaseUpdateException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:changeNoSuchUserException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:changeInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:changeDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:changeNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:changeStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:changeRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:changeInvalidDataException")})
    @WebMethod(action = "urn:change")
    public void change(
        @WebParam(partName = "parameters", name = "change", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        Change parameters
    ) throws DatabaseUpdateException_Exception, NoSuchUserException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:delete", output = "urn:deleteResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:deleteDatabaseUpdateException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:deleteNoSuchUserException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:deleteInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:deleteDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:deleteNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:deleteStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:deleteRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:deleteInvalidDataException")})
    @WebMethod(action = "urn:delete")
    public void delete(
        @WebParam(partName = "parameters", name = "delete", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        Delete parameters
    ) throws DatabaseUpdateException_Exception, NoSuchUserException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:getContextAdmin", output = "urn:getContextAdminResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getContextAdminInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:getContextAdminDuplicateExtensionException"), @FaultAction(className = StorageException_Exception.class, value = "urn:getContextAdminStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getContextAdminRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getContextAdminInvalidDataException")})
    @RequestWrapper(localName = "getContextAdmin", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.GetContextAdmin")
    @WebMethod(action = "urn:getContextAdmin")
    @ResponseWrapper(localName = "getContextAdminResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.GetContextAdminResponse")
    public com.openexchange.admin.soap.reseller.user.soap.dataobjects.User getContextAdmin(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.rmi.dataobjects.Credentials auth
    ) throws InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:list", output = "urn:listResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:listDatabaseUpdateException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:listDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:listNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:listStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listInvalidDataException")})
    @RequestWrapper(localName = "list", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.List")
    @WebMethod(action = "urn:list")
    @ResponseWrapper(localName = "listResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.ListResponse")
    public java.util.List<com.openexchange.admin.soap.reseller.user.soap.dataobjects.User> list(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "search_pattern", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        java.lang.String searchPattern,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.rmi.dataobjects.Credentials auth,
        @WebParam(name = "include_guests", targetNamespace = "http://soap.reseller.admin.openexchange.com") Boolean includeGuests,
        @WebParam(name = "exclude_users", targetNamespace = "http://soap.reseller.admin.openexchange.com") Boolean excludeUsers
    ) throws DatabaseUpdateException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:changeByModuleAccessName", output = "urn:changeByModuleAccessNameResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:changeByModuleAccessNameDatabaseUpdateException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:changeByModuleAccessNameNoSuchUserException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:changeByModuleAccessNameInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:changeByModuleAccessNameDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:changeByModuleAccessNameNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:changeByModuleAccessNameStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:changeByModuleAccessNameRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:changeByModuleAccessNameInvalidDataException")})
    @WebMethod(action = "urn:changeByModuleAccessName")
    public void changeByModuleAccessName(
        @WebParam(partName = "parameters", name = "changeByModuleAccessName", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        ChangeByModuleAccessName parameters
    ) throws DatabaseUpdateException_Exception, NoSuchUserException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:createByModuleAccess", output = "urn:createByModuleAccessResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:createByModuleAccessDatabaseUpdateException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:createByModuleAccessInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:createByModuleAccessDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:createByModuleAccessNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:createByModuleAccessStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:createByModuleAccessRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:createByModuleAccessInvalidDataException")})
    @RequestWrapper(localName = "createByModuleAccess", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.CreateByModuleAccess")
    @WebMethod(action = "urn:createByModuleAccess")
    @ResponseWrapper(localName = "createByModuleAccessResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.CreateByModuleAccessResponse")
    public com.openexchange.admin.soap.reseller.user.soap.dataobjects.User createByModuleAccess(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "usrdata", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.soap.dataobjects.User usrdata,
        @WebParam(name = "access", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.soap.dataobjects.UserModuleAccess access,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.rmi.dataobjects.Credentials auth
    ) throws DatabaseUpdateException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:getModuleAccess", output = "urn:getModuleAccessResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:getModuleAccessDatabaseUpdateException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:getModuleAccessNoSuchUserException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getModuleAccessInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:getModuleAccessDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:getModuleAccessNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:getModuleAccessStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getModuleAccessRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getModuleAccessInvalidDataException")})
    @RequestWrapper(localName = "getModuleAccess", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.GetModuleAccess")
    @WebMethod(action = "urn:getModuleAccess")
    @ResponseWrapper(localName = "getModuleAccessResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.GetModuleAccessResponse")
    public com.openexchange.admin.soap.reseller.user.soap.dataobjects.UserModuleAccess getModuleAccess(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "user", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.soap.dataobjects.User user,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.rmi.dataobjects.Credentials auth
    ) throws DatabaseUpdateException_Exception, NoSuchUserException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:create", output = "urn:createResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:createDatabaseUpdateException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:createInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:createDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:createNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:createStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:createRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:createInvalidDataException")})
    @RequestWrapper(localName = "create", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.Create")
    @WebMethod(action = "urn:create")
    @ResponseWrapper(localName = "createResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.CreateResponse")
    public com.openexchange.admin.soap.reseller.user.soap.dataobjects.User create(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "usrdata", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.soap.dataobjects.User usrdata,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.rmi.dataobjects.Credentials auth
    ) throws DatabaseUpdateException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:listAll", output = "urn:listAllResponse", fault = { @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:listAllDatabaseUpdateException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listAllInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:listAllDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:listAllNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:listAllStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listAllRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listAllInvalidDataException") })
    @RequestWrapper(localName = "listAll", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.ListAll")
    @WebMethod(action = "urn:listAll")
    @ResponseWrapper(localName = "listAllResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.ListAllResponse")
    public java.util.List<com.openexchange.admin.soap.reseller.user.soap.dataobjects.User> listAll(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.rmi.dataobjects.Credentials auth,
        @WebParam(name = "include_guests", targetNamespace = "http://soap.reseller.admin.openexchange.com") Boolean includeGuests,
        @WebParam(name = "exclude_users", targetNamespace = "http://soap.reseller.admin.openexchange.com") Boolean excludeUsers
    ) throws DatabaseUpdateException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:listByAliasDomain", output = "urn:listByAliasDomainResponse", fault = {
        @FaultAction(className = StorageException_Exception.class, value = "urn:listByAliasDomainStorageException"),
        @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listByAliasDomainInvalidCredentialsException"),
        @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listByAliasDomainInvalidDataException"),
        @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:listByAliasDomainNoSuchContextException"),
        @FaultAction(className = RemoteException_Exception.class, value = "urn:listByAliasDomainRemoteException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:listAllDuplicateExtensionException"), })
    @RequestWrapper(localName = "listByAliasDomain", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.ListByAliasDomain")
    @WebMethod(action = "urn:listByAliasDomain")
    @ResponseWrapper(localName = "listByAliasDomainResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.ListByAliasDomainResponse")
    public java.util.List<com.openexchange.admin.soap.reseller.user.soap.dataobjects.User> listByAliasDomain(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com") com.openexchange.admin.soap.reseller.user.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "alias_domain", targetNamespace = "http://soap.reseller.admin.openexchange.com") java.lang.String aliasDomain,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com") com.openexchange.admin.soap.reseller.user.rmi.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:getMultipleData", output = "urn:getMultipleDataResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:getMultipleDataDatabaseUpdateException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:getMultipleDataNoSuchUserException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getMultipleDataInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:getMultipleDataDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:getMultipleDataNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:getMultipleDataStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getMultipleDataRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getMultipleDataInvalidDataException")})
    @RequestWrapper(localName = "getMultipleData", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.GetMultipleData")
    @WebMethod(action = "urn:getMultipleData")
    @ResponseWrapper(localName = "getMultipleDataResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.GetMultipleDataResponse")
    public java.util.List<com.openexchange.admin.soap.reseller.user.soap.dataobjects.User> getMultipleData(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "users", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        java.util.List<com.openexchange.admin.soap.reseller.user.soap.dataobjects.User> users,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.rmi.dataobjects.Credentials auth
    ) throws DatabaseUpdateException_Exception, NoSuchUserException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:getData", output = "urn:getDataResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:getDataDatabaseUpdateException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:getDataNoSuchUserException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getDataInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:getDataDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:getDataNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:getDataStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getDataRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getDataInvalidDataException")})
    @RequestWrapper(localName = "getData", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.GetData")
    @WebMethod(action = "urn:getData")
    @ResponseWrapper(localName = "getDataResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.GetDataResponse")
    public com.openexchange.admin.soap.reseller.user.soap.dataobjects.User getData(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "user", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.soap.dataobjects.User user,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.rmi.dataobjects.Credentials auth
    ) throws DatabaseUpdateException_Exception, NoSuchUserException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:deleteMultiple", output = "urn:deleteMultipleResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:deleteMultipleDatabaseUpdateException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:deleteMultipleNoSuchUserException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:deleteMultipleInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:deleteMultipleDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:deleteMultipleNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:deleteMultipleStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:deleteMultipleRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:deleteMultipleInvalidDataException")})
    @WebMethod(action = "urn:deleteMultiple")
    public void deleteMultiple(
        @WebParam(partName = "parameters", name = "deleteMultiple", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        DeleteMultiple parameters
    ) throws DatabaseUpdateException_Exception, NoSuchUserException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:exists", output = "urn:existsResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:existsDatabaseUpdateException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:existsInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:existsDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:existsNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:existsStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:existsRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:existsInvalidDataException")})
    @RequestWrapper(localName = "exists", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.Exists")
    @WebMethod(action = "urn:exists")
    @ResponseWrapper(localName = "existsResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.ExistsResponse")
    public java.lang.Boolean exists(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "user", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.soap.dataobjects.User user,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.rmi.dataobjects.Credentials auth
    ) throws DatabaseUpdateException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:listCaseInsensitive", output = "urn:listCaseInsensitiveResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:listCaseInsensitiveDatabaseUpdateException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listCaseInsensitiveInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:listCaseInsensitiveDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:listCaseInsensitiveNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:listCaseInsensitiveStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listCaseInsensitiveRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listCaseInsensitiveInvalidDataException")})
    @RequestWrapper(localName = "listCaseInsensitive", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.ListCaseInsensitive")
    @WebMethod(action = "urn:listCaseInsensitive")
    @ResponseWrapper(localName = "listCaseInsensitiveResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.ListCaseInsensitiveResponse")
    public java.util.List<com.openexchange.admin.soap.reseller.user.soap.dataobjects.User> listCaseInsensitive(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "search_pattern", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        java.lang.String searchPattern,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.rmi.dataobjects.Credentials auth
    ) throws DatabaseUpdateException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:getAccessCombinationName", output = "urn:getAccessCombinationNameResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:getAccessCombinationNameDatabaseUpdateException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:getAccessCombinationNameNoSuchUserException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getAccessCombinationNameInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:getAccessCombinationNameDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:getAccessCombinationNameNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:getAccessCombinationNameStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getAccessCombinationNameRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getAccessCombinationNameInvalidDataException")})
    @RequestWrapper(localName = "getAccessCombinationName", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.GetAccessCombinationName")
    @WebMethod(action = "urn:getAccessCombinationName")
    @ResponseWrapper(localName = "getAccessCombinationNameResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.GetAccessCombinationNameResponse")
    public java.lang.String getAccessCombinationName(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "user", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.soap.dataobjects.User user,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.rmi.dataobjects.Credentials auth
    ) throws DatabaseUpdateException_Exception, NoSuchUserException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:changeByModuleAccess", output = "urn:changeByModuleAccessResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:changeByModuleAccessDatabaseUpdateException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:changeByModuleAccessNoSuchUserException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:changeByModuleAccessInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:changeByModuleAccessDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:changeByModuleAccessNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:changeByModuleAccessStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:changeByModuleAccessRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:changeByModuleAccessInvalidDataException")})
    @WebMethod(action = "urn:changeByModuleAccess")
    public void changeByModuleAccess(
        @WebParam(partName = "parameters", name = "changeByModuleAccess", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        ChangeByModuleAccess parameters
    ) throws DatabaseUpdateException_Exception, NoSuchUserException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.reseller.admin.openexchange.com")
    @Action(input = "urn:createByModuleAccessName", output = "urn:createByModuleAccessNameResponse", fault = {@FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:createByModuleAccessNameDatabaseUpdateException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:createByModuleAccessNameInvalidCredentialsException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:createByModuleAccessNameDuplicateExtensionException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:createByModuleAccessNameNoSuchContextException"), @FaultAction(className = StorageException_Exception.class, value = "urn:createByModuleAccessNameStorageException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:createByModuleAccessNameRemoteException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:createByModuleAccessNameInvalidDataException")})
    @RequestWrapper(localName = "createByModuleAccessName", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.CreateByModuleAccessName")
    @WebMethod(action = "urn:createByModuleAccessName")
    @ResponseWrapper(localName = "createByModuleAccessNameResponse", targetNamespace = "http://soap.reseller.admin.openexchange.com", className = "com.openexchange.admin.soap.reseller.user.reseller.soap.CreateByModuleAccessNameResponse")
    public com.openexchange.admin.soap.reseller.user.soap.dataobjects.User createByModuleAccessName(
        @WebParam(name = "ctx", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.reseller.soap.dataobjects.ResellerContext ctx,
        @WebParam(name = "usrdata", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.soap.dataobjects.User usrdata,
        @WebParam(name = "access_combination_name", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        java.lang.String accessCombinationName,
        @WebParam(name = "auth", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        com.openexchange.admin.soap.reseller.user.rmi.dataobjects.Credentials auth
    ) throws DatabaseUpdateException_Exception, InvalidCredentialsException_Exception, DuplicateExtensionException_Exception, NoSuchContextException_Exception, StorageException_Exception, RemoteException_Exception, InvalidDataException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:changeMailAddressPersonal", output = "urn:changeMailAddressPersonalResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:changeMailAddressPersonalStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:changeMailAddressPersonalInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:changeMailAddressPersonalInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:changeMailAddressPersonalNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:changeMailAddressPersonalRemoteException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:changeMailAddressPersonalNoSuchUserException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:changeMailAddressPersonalDatabaseUpdateException")})
    @WebMethod(action = "urn:changeMailAddressPersonal")
    public void changeMailAddressPersonal(
        @WebParam(partName = "parameters", name = "changeMailAddressPersonal", targetNamespace = "http://soap.reseller.admin.openexchange.com")
        ChangeMailAddressPersonal parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception;

}
