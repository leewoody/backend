package com.openexchange.custom.parallels.soap;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 2.6.1
 * 2012-07-11T15:32:34.755+02:00
 * Generated source version: 2.6.1
 * 
 */
@WebService(targetNamespace = "http://soap.parallels.custom.openexchange.com", name = "OXServerServicePortType")
@XmlSeeAlso({com.openexchange.custom.parallels.soap.rmi.ObjectFactory.class, com.openexchange.custom.parallels.soap.rmi.exceptions.ObjectFactory.class, ObjectFactory.class, com.openexchange.custom.parallels.soap.io.ObjectFactory.class})
public interface OXServerServicePortType {

    @WebResult(name = "return", targetNamespace = "http://soap.parallels.custom.openexchange.com")
    @Action(input = "urn:getServerBundleList", output = "urn:getServerBundleListResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getServerBundleListInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getServerBundleListInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getServerBundleListRemoteException"), @FaultAction(className = StorageException_Exception.class, value = "urn:getServerBundleListStorageException")})
    @RequestWrapper(localName = "getServerBundleList", targetNamespace = "http://soap.parallels.custom.openexchange.com", className = "com.openexchange.custom.parallels.soap.GetServerBundleList")
    @WebMethod(action = "urn:getServerBundleList")
    @ResponseWrapper(localName = "getServerBundleListResponse", targetNamespace = "http://soap.parallels.custom.openexchange.com", className = "com.openexchange.custom.parallels.soap.GetServerBundleListResponse")
    public java.util.List<com.openexchange.custom.parallels.soap.Bundle> getServerBundleList(
        @WebParam(name = "auth", targetNamespace = "http://soap.parallels.custom.openexchange.com")
        com.openexchange.custom.parallels.soap.rmi.Credentials auth
    ) throws InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception, StorageException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.parallels.custom.openexchange.com")
    @Action(input = "urn:getServerVersion", output = "urn:getServerVersionResponse", fault = {@FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getServerVersionInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getServerVersionInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getServerVersionRemoteException"), @FaultAction(className = StorageException_Exception.class, value = "urn:getServerVersionStorageException")})
    @RequestWrapper(localName = "getServerVersion", targetNamespace = "http://soap.parallels.custom.openexchange.com", className = "com.openexchange.custom.parallels.soap.GetServerVersion")
    @WebMethod(action = "urn:getServerVersion")
    @ResponseWrapper(localName = "getServerVersionResponse", targetNamespace = "http://soap.parallels.custom.openexchange.com", className = "com.openexchange.custom.parallels.soap.GetServerVersionResponse")
    public java.lang.String getServerVersion(
        @WebParam(name = "auth", targetNamespace = "http://soap.parallels.custom.openexchange.com")
        com.openexchange.custom.parallels.soap.rmi.Credentials auth
    ) throws InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception, StorageException_Exception;
}
