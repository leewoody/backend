/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.openexchange.admin.soap.user.soap;

import java.net.URI;
import java.net.URISyntaxException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicReference;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import org.slf4j.Logger;
import com.openexchange.admin.rmi.OXUserInterface;
import com.openexchange.admin.rmi.exceptions.DatabaseUpdateException;
import com.openexchange.admin.rmi.exceptions.InvalidCredentialsException;
import com.openexchange.admin.rmi.exceptions.InvalidDataException;
import com.openexchange.admin.rmi.exceptions.NoSuchContextException;
import com.openexchange.admin.rmi.exceptions.NoSuchFilestoreException;
import com.openexchange.admin.rmi.exceptions.NoSuchUserException;
import com.openexchange.admin.rmi.exceptions.StorageException;
import com.openexchange.admin.soap.user.dataobjects.Context;
import com.openexchange.admin.soap.user.dataobjects.Credentials;
import com.openexchange.admin.soap.user.dataobjects.Database;
import com.openexchange.admin.soap.user.dataobjects.Entry;
import com.openexchange.admin.soap.user.dataobjects.Filestore;
import com.openexchange.admin.soap.user.dataobjects.Group;
import com.openexchange.admin.soap.user.dataobjects.SOAPMapEntry;
import com.openexchange.admin.soap.user.dataobjects.SOAPStringMap;
import com.openexchange.admin.soap.user.dataobjects.SOAPStringMapMap;
import com.openexchange.admin.soap.user.dataobjects.User;
import com.openexchange.admin.soap.user.dataobjects.UserModuleAccess;
import com.openexchange.tools.net.URIDefaults;
import com.openexchange.tools.net.URIParser;

/**
 * This class was generated by Apache CXF 2.6.0 2012-06-01T18:24:58.917+02:00 Generated source version: 2.6.0
 */

@javax.jws.WebService(serviceName = "OXUserService", portName = "OXUserServiceHttpsEndpoint", targetNamespace = "http://soap.admin.openexchange.com",
// wsdlLocation = "null",
endpointInterface = "com.openexchange.admin.soap.user.soap.OXUserServicePortType")
public class OXUserServicePortTypeImpl implements OXUserServicePortType {

    public static final AtomicReference<OXUserInterface> RMI_REFERENCE = new AtomicReference<>();

    private static OXUserInterface getUserInterface() throws RemoteException_Exception {
        final OXUserInterface userInterface = RMI_REFERENCE.get();
        if (null == userInterface) {
            throw new RemoteException_Exception("Missing " + OXUserInterface.class.getName() + " instance.");
        }
        return userInterface;
    }

    @Override
    public Integer moveUserFilestore(Context ctx, User user, Filestore dstFilestoreId, Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchFilestoreException_Exception, DatabaseUpdateException_Exception, NoSuchUserException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            return Integer.valueOf(userInterface.moveUserFilestore(soap2Context(ctx), soap2User(user), soap2Filestore(dstFilestoreId), soap2Credentials(auth)));
        } catch (RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchFilestoreException e) {
            com.openexchange.admin.soap.user.soap.NoSuchFilestoreException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchFilestoreException();
            com.openexchange.admin.soap.user.exceptions.NoSuchFilestoreException value = new com.openexchange.admin.soap.user.exceptions.NoSuchFilestoreException();
            faultDetail.setNoSuchFilestoreException(value);
            throw new NoSuchFilestoreException_Exception(e.getMessage(), faultDetail, e);
        } catch (InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public Integer moveFromUserFilestoreToMaster(Context ctx, User user, User masterUser, Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchFilestoreException_Exception, DatabaseUpdateException_Exception, NoSuchUserException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            return Integer.valueOf(userInterface.moveFromUserFilestoreToMaster(soap2Context(ctx), soap2User(user), soap2User(masterUser), soap2Credentials(auth)));
        } catch (RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchFilestoreException e) {
            com.openexchange.admin.soap.user.soap.NoSuchFilestoreException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchFilestoreException();
            com.openexchange.admin.soap.user.exceptions.NoSuchFilestoreException value = new com.openexchange.admin.soap.user.exceptions.NoSuchFilestoreException();
            faultDetail.setNoSuchFilestoreException(value);
            throw new NoSuchFilestoreException_Exception(e.getMessage(), faultDetail, e);
        } catch (InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public Integer moveFromMasterToUserFilestore(Context ctx, User user, User masterUser, Filestore dstFilestoreId, Long maxQuota, Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchFilestoreException_Exception, DatabaseUpdateException_Exception, NoSuchUserException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            return Integer.valueOf(userInterface.moveFromMasterToUserFilestore(soap2Context(ctx), soap2User(user), soap2User(masterUser), soap2Filestore(dstFilestoreId), maxQuota.longValue(), soap2Credentials(auth)));
        } catch (RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchFilestoreException e) {
            com.openexchange.admin.soap.user.soap.NoSuchFilestoreException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchFilestoreException();
            com.openexchange.admin.soap.user.exceptions.NoSuchFilestoreException value = new com.openexchange.admin.soap.user.exceptions.NoSuchFilestoreException();
            faultDetail.setNoSuchFilestoreException(value);
            throw new NoSuchFilestoreException_Exception(e.getMessage(), faultDetail, e);
        } catch (InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public Integer moveFromContextToUserFilestore(Context ctx, User user, Filestore dstFilestoreId, Long maxQuota, Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchFilestoreException_Exception, DatabaseUpdateException_Exception, NoSuchUserException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            return Integer.valueOf(userInterface.moveFromContextToUserFilestore(soap2Context(ctx), soap2User(user), soap2Filestore(dstFilestoreId), maxQuota.longValue(), soap2Credentials(auth)));
        } catch (RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchFilestoreException e) {
            com.openexchange.admin.soap.user.soap.NoSuchFilestoreException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchFilestoreException();
            com.openexchange.admin.soap.user.exceptions.NoSuchFilestoreException value = new com.openexchange.admin.soap.user.exceptions.NoSuchFilestoreException();
            faultDetail.setNoSuchFilestoreException(value);
            throw new NoSuchFilestoreException_Exception(e.getMessage(), faultDetail, e);
        } catch (InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public Integer moveFromUserToContextFilestore(Context ctx, User user, Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchFilestoreException_Exception, DatabaseUpdateException_Exception, NoSuchUserException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            return Integer.valueOf(userInterface.moveFromUserToContextFilestore(soap2Context(ctx), soap2User(user), soap2Credentials(auth)));
        } catch (RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchFilestoreException e) {
            com.openexchange.admin.soap.user.soap.NoSuchFilestoreException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchFilestoreException();
            com.openexchange.admin.soap.user.exceptions.NoSuchFilestoreException value = new com.openexchange.admin.soap.user.exceptions.NoSuchFilestoreException();
            faultDetail.setNoSuchFilestoreException(value);
            throw new NoSuchFilestoreException_Exception(e.getMessage(), faultDetail, e);
        } catch (InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public User createByModuleAccess(final Context ctx, final User usrdata, final UserModuleAccess access, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            return user2Soap(userInterface.create(soap2Context(ctx), soap2User(usrdata), soap2ModuleAccess(access), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public String getUserCapabilities(Context ctx, User user, Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            final Set<String> capabilities = userInterface.getCapabilities(soap2Context(ctx), soap2User(user), soap2Credentials(auth));
            if (null == capabilities || capabilities.isEmpty()) {
                return "There are no capabilities set for user " + user.getId() + " in context " + ctx.getId();
            }

            final Iterator<String> iterator = new TreeSet<>(capabilities).iterator();
            final StringBuilder sb = new StringBuilder(capabilities.size() << 4);
            sb.append(iterator.next());
            for (int i = capabilities.size(); i-- > 1;) {
                sb.append(", ").append(iterator.next());
            }
            return sb.toString();
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public void changeMailAddressPersonal(ChangeMailAddressPersonal parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            userInterface.changeMailAddressPersonal(soap2Context(parameters.ctx), soap2User(parameters.user), parameters.personal, soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public void changeCapabilities(final ChangeCapabilities parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            userInterface.changeCapabilities(soap2Context(parameters.ctx), soap2User(parameters.user), parseToSet(parameters.capsToAdd), parseToSet(parameters.capsToRemove), parseToSet(parameters.capsToDrop), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    private Set<String> parseToSet(final String csv) {
        String s = csv;
        if (com.openexchange.java.Strings.isEmpty(s)) {
            return Collections.emptySet();
        }
        s = s.trim();
        if ('"' == s.charAt(0)) {
            if (s.length() <= 1) {
                return Collections.emptySet();
            }
            s = s.substring(1);
            if (com.openexchange.java.Strings.isEmpty(s)) {
                return Collections.emptySet();
            }
        }
        if ('"' == s.charAt(s.length() - 1)) {
            if (s.length() <= 1) {
                return Collections.emptySet();
            }
            s = s.substring(0, s.length() - 1);
            if (com.openexchange.java.Strings.isEmpty(s)) {
                return Collections.emptySet();
            }
        }
        // Split
        final String[] arr = s.split(" *, *", 0);
        final Set<String> set = new HashSet<>(arr.length);
        for (String element : arr) {
            final String cap = element;
            if (!com.openexchange.java.Strings.isEmpty(cap)) {
                set.add(com.openexchange.java.Strings.toLowerCase(cap));
            }
        }
        return set;
    }

    @Override
    public void change(final Change parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            userInterface.change(soap2Context(parameters.ctx), soap2User(parameters.usrdata), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public User createByModuleAccessName(final Context ctx, final User usrdata, final java.lang.String accessCombinationName, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            return user2Soap(userInterface.create(soap2Context(ctx), soap2User(usrdata), accessCombinationName, soap2Credentials(auth)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public UserModuleAccess getModuleAccess(final Context ctx, final User user, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            return moduleAccess2Soap(userInterface.getModuleAccess(soap2Context(ctx), soap2User(user), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public java.util.List<User> listAll(final Context ctx, final Credentials auth, Boolean includeGuests, Boolean excludeUsers) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        if (null == includeGuests) {
            includeGuests = Boolean.FALSE;
        }

        if (null == excludeUsers) {
            excludeUsers = Boolean.FALSE;
        }
        try {
            final com.openexchange.admin.rmi.dataobjects.User[] users = userInterface.listAll(soap2Context(ctx), soap2Credentials(auth), includeGuests, excludeUsers);
            if (null == users) {
                return Collections.emptyList();
            }
            final java.util.List<User> list = new ArrayList<>(users.length);
            for (final com.openexchange.admin.rmi.dataobjects.User user : users) {
                list.add(user2Soap(user));
            }
            return list;
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public User getContextAdmin(final Context ctx, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, DuplicateExtensionException_Exception, RemoteException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            return user2Soap(userInterface.getContextAdmin(soap2Context(ctx), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public void changeByModuleAccessName(final ChangeByModuleAccessName parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            userInterface.changeModuleAccess(
                soap2Context(parameters.ctx),
                soap2User(parameters.user),
                parameters.accessCombinationName,
                soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public void delete(final Delete parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            userInterface.delete(soap2Context(parameters.ctx), soap2User(parameters.user), parameters.getReassign(), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }


    @Override
    public void deleteMultiple(final DeleteMultiple parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            final List<User> list = parameters.users;
            final com.openexchange.admin.rmi.dataobjects.User[] users = new com.openexchange.admin.rmi.dataobjects.User[list.size()];
            for (int i = 0; i < users.length; i++) {
                users[i] = soap2User(list.get(i));
            }
            userInterface.delete(soap2Context(parameters.ctx), users, parameters.getReassign(), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public void changeByModuleAccess(final ChangeByModuleAccess parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            userInterface.changeModuleAccess(
                soap2Context(parameters.ctx),
                soap2User(parameters.user),
                soap2ModuleAccess(parameters.moduleAccess),
                soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public java.util.List<User> getMultipleData(final Context ctx, final java.util.List<User> list, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.User[] users = new com.openexchange.admin.rmi.dataobjects.User[list.size()];
            for (int i = 0; i < users.length; i++) {
                users[i] = soap2User(list.get(i));
            }
            final com.openexchange.admin.rmi.dataobjects.User[] retUsers = userInterface.getData(
                soap2Context(ctx),
                users,
                soap2Credentials(auth));
            if (null == retUsers) {
                return Collections.emptyList();
            }
            final int length = retUsers.length;
            final java.util.List<User> ret = new ArrayList<>(length);
            for (int i = 0; i < length; i++) {
                ret.add(user2Soap(retUsers[i]));
            }
            return ret;
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public java.lang.String getAccessCombinationName(final Context ctx, final User user, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            return userInterface.getAccessCombinationName(soap2Context(ctx), soap2User(user), soap2Credentials(auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public User create(final Context ctx, final User usrdata, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            return user2Soap(userInterface.create(soap2Context(ctx), soap2User(usrdata), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public java.util.List<User> list(final Context ctx, final java.lang.String searchPattern, final Credentials auth, Boolean includeGuests, Boolean excludeUsers) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();

        if (null == includeGuests) {
            includeGuests = Boolean.FALSE;
        }

        if (null == excludeUsers) {
            excludeUsers = Boolean.FALSE;
        }

        try {
            final com.openexchange.admin.rmi.dataobjects.User[] users = userInterface.list(
                soap2Context(ctx),
                com.openexchange.java.Strings.isEmpty(searchPattern) ? "*" : searchPattern,
                soap2Credentials(auth),
                includeGuests,
                excludeUsers);
            if (null == users) {
                return Collections.emptyList();
            }
            final java.util.List<User> list = new ArrayList<>(users.length);
            for (final com.openexchange.admin.rmi.dataobjects.User user : users) {
                list.add(user2Soap(user));
            }
            return list;
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public java.util.List<User> listCaseInsensitive(final Context ctx, final java.lang.String searchPattern, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.User[] users = userInterface.listCaseInsensitive(
                soap2Context(ctx),
                com.openexchange.java.Strings.isEmpty(searchPattern) ? "*" : searchPattern,
                soap2Credentials(auth));
            if (null == users) {
                return Collections.emptyList();
            }
            final java.util.List<User> list = new ArrayList<>(users.length);
            for (final com.openexchange.admin.rmi.dataobjects.User user : users) {
                list.add(user2Soap(user));
            }
            return list;
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public void changeModuleAccessGlobal(final ChangeModuleAccessGlobal parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            userInterface.changeModuleAccessGlobal(
                parameters.filter,
                soap2ModuleAccess(parameters.addAccess),
                soap2ModuleAccess(parameters.removeAccess),
                soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public java.lang.Boolean exists(final Context ctx, final User user, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            return Boolean.valueOf(userInterface.exists(soap2Context(ctx), soap2User(user), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public User getData(final Context ctx, final User user, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            return user2Soap(userInterface.getData(soap2Context(ctx), soap2User(user), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.user.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.user.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.user.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (NoSuchUserException e) {
            com.openexchange.admin.soap.user.soap.NoSuchUserException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchUserException();
            com.openexchange.admin.soap.user.exceptions.NoSuchUserException value = new com.openexchange.admin.soap.user.exceptions.NoSuchUserException();
            faultDetail.setNoSuchUserException(value);
            throw new NoSuchUserException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    private static com.openexchange.admin.rmi.dataobjects.Credentials soap2Credentials(final Credentials soapCredentials) {
        if (null == soapCredentials) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Credentials credentials = new com.openexchange.admin.rmi.dataobjects.Credentials();
        final String login = soapCredentials.getLogin();
        if (null != login) {
            credentials.setLogin(login);
        }
        final String password = soapCredentials.getPassword();
        if (null != password) {
            credentials.setPassword(password);
        }
        return credentials;
    }

    private static com.openexchange.admin.rmi.dataobjects.Filestore soap2Filestore(final Filestore soapFilestore) {
        if (null == soapFilestore) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Filestore filestore = new com.openexchange.admin.rmi.dataobjects.Filestore();

        Integer tmp = soapFilestore.getCurrentContexts();
        if (tmp != null) {
            filestore.setCurrentContexts(tmp);
        }

        tmp = soapFilestore.getId();
        if (tmp != null) {
            filestore.setId(tmp);
        }

        tmp = soapFilestore.getMaxContexts();
        if (tmp != null) {
            filestore.setMaxContexts(tmp);
        }

        Long l = soapFilestore.getReserved();
        if (l != null) {
            filestore.setReserved(l);
        }

        l = soapFilestore.getSize();
        if (l != null) {
            filestore.setSize(l);
        }

        final String s = soapFilestore.getUrl();
        if (s != null) {
            filestore.setUrl(s);
        }

        l = soapFilestore.getUsed();
        if (l != null) {
            filestore.setUsed(l);
        }

        return filestore;
    }

    private static final Pattern URL_PATTERN = Pattern.compile("^(.*?://)?(.*?)(:(.*?))?$");

    static com.openexchange.admin.rmi.dataobjects.User soap2User(final User soapUser) {
        if (null == soapUser) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.User user = new com.openexchange.admin.rmi.dataobjects.User();

        final Boolean guiSpamFilterEnabled = soapUser.isGuiSpamFilterEnabled();
        if (null != guiSpamFilterEnabled) {
            user.setGui_spam_filter_enabled(guiSpamFilterEnabled);
        }

        if (null != soapUser.getAliases()) {
            for (final String alias : soapUser.getAliases()) {
                if (null != alias) {
                    user.addAlias(alias);
                }
            }
        }

        final XMLGregorianCalendar anniversary = soapUser.getAnniversary();
        if (null != anniversary) {
            final GregorianCalendar gregorianCalendar = anniversary.toGregorianCalendar();

            final GregorianCalendar anniversaryCal = new GregorianCalendar(TimeZone.getTimeZone("UTC"));
            anniversaryCal.clear();
            anniversaryCal.set(Calendar.YEAR, gregorianCalendar.get(Calendar.YEAR));
            anniversaryCal.set(Calendar.MONTH, gregorianCalendar.get(Calendar.MONTH));
            anniversaryCal.set(Calendar.DAY_OF_MONTH, gregorianCalendar.get(Calendar.DAY_OF_MONTH));

            final Date date = anniversaryCal.getTime();
            user.setAnniversary(date);
        }

        final String assistantName = soapUser.getAssistantName();
        if (null != assistantName) {
            user.setAssistant_name(assistantName);
        }

        final XMLGregorianCalendar birthday = soapUser.getBirthday();
        if (null != birthday) {
            final GregorianCalendar gregorianCalendar = birthday.toGregorianCalendar();

            final GregorianCalendar birthdayCal = new GregorianCalendar(TimeZone.getTimeZone("UTC"));
            birthdayCal.clear();
            birthdayCal.set(Calendar.YEAR, gregorianCalendar.get(Calendar.YEAR));
            birthdayCal.set(Calendar.MONTH, gregorianCalendar.get(Calendar.MONTH));
            birthdayCal.set(Calendar.DAY_OF_MONTH, gregorianCalendar.get(Calendar.DAY_OF_MONTH));

            final Date date = birthdayCal.getTime();
            user.setBirthday(date);
        }

        String tmp = soapUser.getBranches();
        if (tmp != null) {
            user.setBranches(tmp);
        }

        tmp = soapUser.getBusinessCategory();
        if (tmp != null) {
            user.setBusiness_category(tmp);
        }

        tmp = soapUser.getCategories();
        if (tmp != null) {
            user.setCategories(tmp);
        }

        tmp = soapUser.getCellularTelephone1();
        if (tmp != null) {
            user.setCellular_telephone1(tmp);
        }

        tmp = soapUser.getCellularTelephone2();
        if (tmp != null) {
            user.setCellular_telephone2(tmp);
        }

        tmp = soapUser.getCityBusiness();
        if (tmp != null) {
            user.setCity_business(tmp);
        }

        tmp = soapUser.getCityHome();
        if (tmp != null) {
            user.setCity_home(tmp);
        }

        tmp = soapUser.getCityOther();
        if (tmp != null) {
            user.setCity_other(tmp);
        }

        tmp = soapUser.getCommercialRegister();
        if (tmp != null) {
            user.setCommercial_register(tmp);
        }

        tmp = soapUser.getCompany();
        if (tmp != null) {
            user.setCompany(tmp);
        }

        tmp = soapUser.getCountryBusiness();
        if (tmp != null) {
            user.setCountry_business(tmp);
        }

        tmp = soapUser.getCountryHome();
        if (tmp != null) {
            user.setCountry_home(tmp);
        }

        tmp = soapUser.getCountryOther();
        if (tmp != null) {
            user.setCountry_other(tmp);
        }

        tmp = soapUser.getDefaultSenderAddress();
        if (tmp != null) {
            user.setDefaultSenderAddress(tmp);
        }
        
        tmp = soapUser.getDriveUserFolderMode();
        if (tmp != null) {
            user.setDriveFolderMode(tmp);
        }

        tmp = soapUser.getDepartment();
        if (tmp != null) {
            user.setDepartment(tmp);
        }

        tmp = soapUser.getDisplayName();
        if (tmp != null) {
            user.setDisplay_name(tmp);
        }

        tmp = soapUser.getEmail1();
        if (tmp != null) {
            user.setEmail1(tmp);
        }

        tmp = soapUser.getEmail2();
        if (tmp != null) {
            user.setEmail2(tmp);
        }

        tmp = soapUser.getEmail3();
        if (tmp != null) {
            user.setEmail3(tmp);
        }

        tmp = soapUser.getEmployeeType();
        if (tmp != null) {
            user.setEmployeeType(tmp);
        }

        tmp = soapUser.getFaxBusiness();
        if (tmp != null) {
            user.setFax_business(tmp);
        }

        tmp = soapUser.getFaxHome();
        if (tmp != null) {
            user.setFax_home(tmp);
        }

        tmp = soapUser.getFaxOther();
        if (tmp != null) {
            user.setFax_other(tmp);
        }

        Integer itg = soapUser.getFilestoreId();
        if (itg != null) {
            user.setFilestoreId(itg);
        }

        tmp = soapUser.getFilestoreName();
        if (tmp != null) {
            user.setFilestore_name(tmp);
        }

        itg = soapUser.getFolderTree();
        if (itg != null) {
            user.setFolderTree(itg);
        }

        tmp = soapUser.getGivenName();
        if (tmp != null) {
            user.setGiven_name(tmp);
        }

        itg = soapUser.getId();
        if (itg != null) {
            user.setId(itg);
        }

        tmp = soapUser.getImapLogin();
        if (tmp != null) {
            user.setImapLogin(tmp);
        }

        tmp = soapUser.getImapServer();
        if (tmp != null) {
            user.setImapServer(tmp);
        }

        Integer i = soapUser.getImapPort();
        if (i != null) {
            final String s = user.getImapServerString();
            if (!com.openexchange.java.Strings.isEmpty(s)) {
                try {
                    final URIDefaults defaults = URIDefaults.IMAP;
                    final URI uri = URIParser.parse(s, defaults);
                    final int port = i.intValue();
                    final URI newUri = new URI(defaults.getSSLPort() == port ? defaults.getSSLProtocol() : defaults.getProtocol(), null, uri.getHost(), port, null, null, null);
                    user.setImapServer(newUri.toString());
                } catch (final URISyntaxException e) {
                    final Logger logger = org.slf4j.LoggerFactory.getLogger(OXUserServicePortTypeImpl.class);
                    logger.warn("The IMAP URL {} is invalid: {}", s, e.getMessage());

                    // Retry manually
                    final Matcher matcher = URL_PATTERN.matcher(s);
                    if (matcher.matches()) {
                        final StringBuilder sb = new StringBuilder(32);
                        for (int j = 1; j <= 3; j++) {
                            switch (j) {
                            case 1:
                                {
                                    final String schema = matcher.group(1);
                                    if (null != schema) {
                                        sb.append(schema);
                                    }
                                }
                                break;
                            case 2:
                                sb.append(matcher.group(2));
                                break;
                            default:
                                break;
                            }
                        }
                        sb.append(':').append(i);
                        user.setImapServer(sb.toString());
                    }
                }
            }
        }

        tmp = soapUser.getInfo();
        if (tmp != null) {
            user.setInfo(tmp);
        }

        tmp = soapUser.getInstantMessenger1();
        if (tmp != null) {
            user.setInstant_messenger1(tmp);
        }

        tmp = soapUser.getInstantMessenger2();
        if (tmp != null) {
            user.setInstant_messenger2(tmp);
        }

        tmp = soapUser.getLanguage();
        if (tmp != null) {
            user.setLanguage(tmp);
        }

        tmp = soapUser.getMailFolderConfirmedHamName();
        if (tmp != null) {
            user.setMail_folder_confirmed_ham_name(tmp);
        }

        tmp = soapUser.getMailFolderConfirmedSpamName();
        if (tmp != null) {
            user.setMail_folder_confirmed_spam_name(tmp);
        }

        tmp = soapUser.getMailFolderDraftsName();
        if (tmp != null) {
            user.setMail_folder_drafts_name(tmp);
        }

        tmp = soapUser.getMailFolderSentName();
        if (tmp != null) {
            user.setMail_folder_sent_name(tmp);
        }

        tmp = soapUser.getMailFolderSpamName();
        if (tmp != null) {
            user.setMail_folder_spam_name(tmp);
        }

        tmp = soapUser.getMailFolderTrashName();
        if (tmp != null) {
            user.setMail_folder_trash_name(tmp);
        }

        tmp = soapUser.getMailFolderArchiveFullName();
        if (tmp != null) {
            user.setMail_folder_archive_full_name(tmp);
        }

        final Boolean mailEnabled = soapUser.isMailenabled();
        if (null != mailEnabled) {
            user.setMailenabled(mailEnabled);
        }
        tmp = soapUser.getManagerName();
        if (tmp != null) {
            user.setManager_name(tmp);
        }

        tmp = soapUser.getMaritalStatus();
        if (tmp != null) {
            user.setMarital_status(tmp);
        }

        Long lng = soapUser.getMaxQuota();
        if (null != lng) {
            user.setMaxQuota(lng);
        }

        tmp = soapUser.getMiddleName();
        if (tmp != null) {
            user.setMiddle_name(tmp);
        }

        tmp = soapUser.getName();
        if (tmp != null) {
            user.setName(tmp);
        }

        tmp = soapUser.getNickname();
        if (tmp != null) {
            user.setNickname(tmp);
        }

        tmp = soapUser.getNote();
        if (tmp != null) {
            user.setNote(tmp);
        }

        tmp = soapUser.getNumberOfChildren();
        if (tmp != null) {
            user.setNumber_of_children(tmp);
        }

        tmp = soapUser.getNumberOfEmployee();
        if (tmp != null) {
            user.setNumber_of_employee(tmp);
        }

        tmp = soapUser.getPassword();
        if (tmp != null) {
            user.setPassword(tmp);
        }

        tmp = soapUser.getPasswordMech();
        if (tmp != null) {
            user.setPasswordMech(tmp);
        }

        tmp = soapUser.getPosition();
        if (tmp != null) {
            user.setPosition(tmp);
        }

        tmp = soapUser.getPostalCodeBusiness();
        if (tmp != null) {
            user.setPostal_code_business(tmp);
        }

        tmp = soapUser.getPostalCodeHome();
        if (tmp != null) {
            user.setPostal_code_home(tmp);
        }

        tmp = soapUser.getPostalCodeOther();
        if (tmp != null) {
            user.setPostal_code_other(tmp);
        }

        tmp = soapUser.getPrimaryEmail();
        if (tmp != null) {
            user.setPrimaryEmail(tmp);
        }

        tmp = soapUser.getProfession();
        if (tmp != null) {
            user.setProfession(tmp);
        }

        tmp = soapUser.getRoomNumber();
        if (tmp != null) {
            user.setRoom_number(tmp);
        }

        tmp = soapUser.getSalesVolume();
        if (tmp != null) {
            user.setSales_volume(tmp);
        }

        tmp = soapUser.getSmtpServer();
        if (tmp != null) {
            user.setSmtpServer(tmp);
        }

        i = soapUser.getSmtpPort();
        if (i != null) {
            final String s = user.getSmtpServerString();
            if (!com.openexchange.java.Strings.isEmpty(s)) {
                try {
                    final URIDefaults defaults = URIDefaults.SMTP;
                    final URI uri = URIParser.parse(s, defaults);
                    final int port = i.intValue();
                    final URI newUri = new URI(defaults.getSSLPort() == port ? defaults.getSSLProtocol() : defaults.getProtocol(), null, uri.getHost(), port, null, null, null);
                    user.setSmtpServer(newUri.toString());
                } catch (final URISyntaxException e) {
                    final Logger logger = org.slf4j.LoggerFactory.getLogger(OXUserServicePortTypeImpl.class);
                    logger.warn("The SMTP URL {} is invalid: {}", s, e.getMessage());

                    // Retry manually
                    final Matcher matcher = URL_PATTERN.matcher(s);
                    if (matcher.matches()) {
                        final StringBuilder sb = new StringBuilder(32);
                        for (int j = 1; j <= 3; j++) {
                            switch (j) {
                            case 1:
                            {
                                final String schema = matcher.group(1);
                                if (null != schema) {
                                    sb.append(schema);
                                }
                            }
                            break;
                            case 2:
                                sb.append(matcher.group(2));
                                break;
                            default:
                                break;
                            }
                        }
                        sb.append(':').append(i);
                        user.setSmtpServer(sb.toString());
                    }
                }
            }
        }

        tmp = soapUser.getSpouseName();
        if (tmp != null) {
            user.setSpouse_name(tmp);
        }

        tmp = soapUser.getStateBusiness();
        if (tmp != null) {
            user.setState_business(tmp);
        }

        tmp = soapUser.getStateHome();
        if (tmp != null) {
            user.setState_home(tmp);
        }

        tmp = soapUser.getStateOther();
        if (tmp != null) {
            user.setState_other(tmp);
        }

        tmp = soapUser.getStreetBusiness();
        if (tmp != null) {
            user.setStreet_business(tmp);
        }

        tmp = soapUser.getStreetHome();
        if (tmp != null) {
            user.setStreet_home(tmp);
        }

        tmp = soapUser.getStreetOther();
        if (tmp != null) {
            user.setStreet_other(tmp);
        }

        tmp = soapUser.getSuffix();
        if (tmp != null) {
            user.setSuffix(tmp);
        }

        tmp = soapUser.getSurName();
        if (tmp != null) {
            user.setSur_name(tmp);
        }

        tmp = soapUser.getTaxId();
        if (tmp != null) {
            user.setTax_id(tmp);
        }

        tmp = soapUser.getTelephoneAssistant();
        if (tmp != null) {
            user.setTelephone_assistant(tmp);
        }

        tmp = soapUser.getTelephoneBusiness1();
        if (tmp != null) {
            user.setTelephone_business1(tmp);
        }

        tmp = soapUser.getTelephoneBusiness2();
        if (tmp != null) {
            user.setTelephone_business2(tmp);
        }

        tmp = soapUser.getTelephoneCallback();
        if (tmp != null) {
            user.setTelephone_callback(tmp);
        }

        tmp = soapUser.getTelephoneCar();
        if (tmp != null) {
            user.setTelephone_car(tmp);
        }

        tmp = soapUser.getTelephoneCompany();
        if (tmp != null) {
            user.setTelephone_company(tmp);
        }

        tmp = soapUser.getTelephoneHome1();
        if (tmp != null) {
            user.setTelephone_home1(tmp);
        }

        tmp = soapUser.getTelephoneHome2();
        if (tmp != null) {
            user.setTelephone_home2(tmp);
        }

        tmp = soapUser.getTelephoneIp();
        if (tmp != null) {
            user.setTelephone_ip(tmp);
        }

        tmp = soapUser.getTelephoneIsdn();
        if (tmp != null) {
            user.setTelephone_isdn(tmp);
        }

        tmp = soapUser.getTelephoneOther();
        if (tmp != null) {
            user.setTelephone_other(tmp);
        }

        tmp = soapUser.getTelephonePager();
        if (tmp != null) {
            user.setTelephone_pager(tmp);
        }

        tmp = soapUser.getTelephonePrimary();
        if (tmp != null) {
            user.setTelephone_primary(tmp);
        }

        tmp = soapUser.getTelephoneRadio();
        if (tmp != null) {
            user.setTelephone_radio(tmp);
        }

        tmp = soapUser.getTelephoneTelex();
        if (tmp != null) {
            user.setTelephone_telex(tmp);
        }

        tmp = soapUser.getTelephoneTtytdd();
        if (tmp != null) {
            user.setTelephone_ttytdd(tmp);
        }

        tmp = soapUser.getTimezone();
        if (tmp != null) {
            user.setTimezone(tmp);
        }

        tmp = soapUser.getTitle();
        if (tmp != null) {
            user.setTitle(tmp);
        }

        itg = soapUser.getUploadFileSizeLimit();
        if (itg != null) {
            user.setUploadFileSizeLimit(itg);
        }

        itg = soapUser.getUploadFileSizeLimitPerFile();
        if (itg != null) {
            user.setUploadFileSizeLimitPerFile(itg);
        }

        tmp = soapUser.getUrl();
        if (tmp != null) {
            user.setUrl(tmp);
        }

        lng = soapUser.getUsedQuota();
        if (null != lng) {
            user.setUsedQuota(lng);
        }

        tmp = soapUser.getUserfield01();
        if (tmp != null) {
            user.setUserfield01(tmp);
        }

        tmp = soapUser.getUserfield02();
        if (tmp != null) {
            user.setUserfield02(tmp);
        }

        tmp = soapUser.getUserfield03();
        if (tmp != null) {
            user.setUserfield03(tmp);
        }

        tmp = soapUser.getUserfield04();
        if (tmp != null) {
            user.setUserfield04(tmp);
        }

        tmp = soapUser.getUserfield05();
        if (tmp != null) {
            user.setUserfield05(tmp);
        }

        tmp = soapUser.getUserfield06();
        if (tmp != null) {
            user.setUserfield06(tmp);
        }

        tmp = soapUser.getUserfield07();
        if (tmp != null) {
            user.setUserfield07(tmp);
        }

        tmp = soapUser.getUserfield08();
        if (tmp != null) {
            user.setUserfield08(tmp);
        }

        tmp = soapUser.getUserfield09();
        if (tmp != null) {
            user.setUserfield09(tmp);
        }

        tmp = soapUser.getUserfield10();
        if (tmp != null) {
            user.setUserfield10(tmp);
        }

        tmp = soapUser.getUserfield11();
        if (tmp != null) {
            user.setUserfield11(tmp);
        }

        tmp = soapUser.getUserfield12();
        if (tmp != null) {
            user.setUserfield12(tmp);
        }

        tmp = soapUser.getUserfield13();
        if (tmp != null) {
            user.setUserfield13(tmp);
        }

        tmp = soapUser.getUserfield14();
        if (tmp != null) {
            user.setUserfield14(tmp);
        }

        tmp = soapUser.getUserfield15();
        if (tmp != null) {
            user.setUserfield15(tmp);
        }

        tmp = soapUser.getUserfield16();
        if (tmp != null) {
            user.setUserfield16(tmp);
        }

        tmp = soapUser.getUserfield17();
        if (tmp != null) {
            user.setUserfield17(tmp);
        }

        tmp = soapUser.getUserfield18();
        if (tmp != null) {
            user.setUserfield18(tmp);
        }

        tmp = soapUser.getUserfield19();
        if (tmp != null) {
            user.setUserfield19(tmp);
        }

        tmp = soapUser.getUserfield20();
        if (tmp != null) {
            user.setUserfield20(tmp);
        }

        tmp = soapUser.getPrimaryAccountName();
        if (tmp != null) {
            user.setPrimaryAccountName(tmp);
        }
        
        Boolean bool_tmp = soapUser.isConvertDriveUserFolders();
        if (bool_tmp != null) {
            user.setConvertDriveUserFolders(bool_tmp);
        }

        SOAPStringMapMap userAttributes = soapUser.getUserAttributes();
        if (null != userAttributes) {
            user.setUserAttributes(soap2MapMap(userAttributes));
        }

        return user;
    }

    private static User user2Soap(final com.openexchange.admin.rmi.dataobjects.User user) {
        if (null == user) {
            return null;
        }
        final User soapUser = new User();
        soapUser.setGuiSpamFilterEnabled(user.getGui_spam_filter_enabled());
        soapUser.setAliases(user.getAliasesForSOAP());
        Date d = user.getAnniversary();
        if (null == d) {
            soapUser.setAnniversary(null);
        } else {
            try {
                final GregorianCalendar c = new GregorianCalendar();
                c.setTime(d);
                soapUser.setAnniversary(DatatypeFactory.newInstance().newXMLGregorianCalendar(c));
            } catch (final DatatypeConfigurationException e) {
                soapUser.setAnniversary(null);
            }
        }
        soapUser.setAssistantName(user.getAssistant_name());
        d = user.getBirthday();
        if (null == d) {
            soapUser.setBirthday(null);
        } else {
            try {
                final GregorianCalendar c = new GregorianCalendar();
                c.setTime(d);
                soapUser.setBirthday(DatatypeFactory.newInstance().newXMLGregorianCalendar(c));
            } catch (final DatatypeConfigurationException e) {
                soapUser.setBirthday(null);
            }
        }
        soapUser.setBranches(user.getBranches());
        soapUser.setBusinessCategory(user.getBusiness_category());
        soapUser.setCategories(user.getCategories());
        soapUser.setCellularTelephone1(user.getCellular_telephone1());
        soapUser.setCellularTelephone2(user.getCellular_telephone2());
        soapUser.setCityBusiness(user.getCity_business());
        soapUser.setCityHome(user.getCity_home());
        soapUser.setCityOther(user.getCity_other());
        soapUser.setCommercialRegister(user.getCommercial_register());
        soapUser.setCompany(user.getCompany());
        soapUser.setContextadmin(Boolean.valueOf(user.isContextadmin()));
        soapUser.setCountryBusiness(user.getCountry_business());
        soapUser.setCountryHome(user.getCountry_home());
        soapUser.setCountryOther(user.getCountry_other());
        soapUser.setDefaultSenderAddress(user.getDefaultSenderAddress());
        soapUser.setDriveUserFolderMode(user.getDriveFolderMode());
        soapUser.setDefaultGroup(group2Soap(user.getDefault_group()));
        soapUser.setDepartment(user.getDepartment());
        soapUser.setDisplayName(user.getDisplay_name());
        soapUser.setEmail1(user.getEmail1());
        soapUser.setEmail2(user.getEmail2());
        soapUser.setEmail3(user.getEmail3());
        soapUser.setEmployeeType(user.getEmployeeType());
        soapUser.setFaxBusiness(user.getFax_business());
        soapUser.setFaxHome(user.getFax_home());
        soapUser.setFaxOther(user.getFax_other());
        soapUser.setFolderTree(user.getFolderTree());

        // File storage / quota information
        soapUser.setFilestoreId(user.getFilestoreId());
        soapUser.setFilestoreName(user.getFilestore_name());
        soapUser.setMaxQuota(user.getMaxQuota());
        soapUser.setUsedQuota(user.getUsedQuota());

        soapUser.setGivenName(user.getGiven_name());
        soapUser.setGuiPreferencesForSoap(map2Soap(user.getGuiPreferences()));
        soapUser.setId(user.getId());
        soapUser.setImapLogin(user.getImapLogin());
        soapUser.setImapServer(user.getImapServer());
        soapUser.setImapPort(user.getImapPort());
        soapUser.setImapServerString(user.getImapServerString());
        soapUser.setImapSchema(user.getImapSchema());
        soapUser.setInfo(user.getInfo());
        soapUser.setInstantMessenger1(user.getInstant_messenger1());
        soapUser.setInstantMessenger2(user.getInstant_messenger2());
        soapUser.setLanguage(user.getLanguage());
        soapUser.setMailFolderConfirmedHamName(user.getMail_folder_confirmed_ham_name());
        soapUser.setMailFolderConfirmedSpamName(user.getMail_folder_confirmed_spam_name());
        soapUser.setMailFolderDraftsName(user.getMail_folder_drafts_name());
        soapUser.setMailFolderSentName(user.getMail_folder_sent_name());
        soapUser.setMailFolderSpamName(user.getMail_folder_spam_name());
        soapUser.setMailFolderTrashName(user.getMail_folder_trash_name());
        soapUser.setMailFolderArchiveFullName(user.getMail_folder_archive_full_name());
        soapUser.setMailenabled(user.getMailenabled());
        soapUser.setManagerName(user.getManager_name());
        soapUser.setMaritalStatus(user.getMarital_status());
        soapUser.setMiddleName(user.getMiddle_name());
        soapUser.setName(user.getName());
        soapUser.setNickname(user.getNickname());
        soapUser.setNote(user.getNote());
        soapUser.setNumberOfChildren(user.getNumber_of_children());
        soapUser.setNumberOfEmployee(user.getNumber_of_employee());
        soapUser.setPassword(user.getPassword());
        soapUser.setPasswordMech(user.getPasswordMech());
        soapUser.setPasswordExpired(user.getPassword_expired());
        soapUser.setPosition(user.getPosition());
        soapUser.setPostalCodeBusiness(user.getPostal_code_business());
        soapUser.setPostalCodeHome(user.getPostal_code_home());
        soapUser.setPostalCodeOther(user.getPostal_code_other());
        soapUser.setPrimaryEmail(user.getPrimaryEmail());
        soapUser.setProfession(user.getProfession());
        soapUser.setRoomNumber(user.getRoom_number());
        soapUser.setSalesVolume(user.getSales_volume());
        soapUser.setSmtpServer(user.getSmtpServer());
        soapUser.setSmtpPort(user.getSmtpPort());
        soapUser.setSmtpServerString(user.getSmtpServerString());
        soapUser.setSmtpSchema(user.getSmtpSchema());
        soapUser.setSpouseName(user.getSpouse_name());
        soapUser.setStateBusiness(user.getState_business());
        soapUser.setStateHome(user.getState_home());
        soapUser.setStateOther(user.getState_other());
        soapUser.setStreetBusiness(user.getStreet_business());
        soapUser.setStreetHome(user.getStreet_home());
        soapUser.setStreetOther(user.getStreet_other());
        soapUser.setSuffix(user.getSuffix());
        soapUser.setSurName(user.getSur_name());
        soapUser.setTaxId(user.getTax_id());
        soapUser.setTelephoneAssistant(user.getTelephone_assistant());
        soapUser.setTelephoneBusiness1(user.getTelephone_business1());
        soapUser.setTelephoneBusiness2(user.getTelephone_business2());
        soapUser.setTelephoneCallback(user.getTelephone_callback());
        soapUser.setTelephoneCar(user.getTelephone_car());
        soapUser.setTelephoneCompany(user.getTelephone_company());
        soapUser.setTelephoneHome1(user.getTelephone_home1());
        soapUser.setTelephoneHome2(user.getTelephone_home2());
        soapUser.setTelephoneIp(user.getTelephone_ip());
        soapUser.setTelephoneIsdn(user.getTelephone_isdn());
        soapUser.setTelephoneOther(user.getTelephone_other());
        soapUser.setTelephonePager(user.getTelephone_pager());
        soapUser.setTelephonePrimary(user.getTelephone_primary());
        soapUser.setTelephoneRadio(user.getTelephone_radio());
        soapUser.setTelephoneTelex(user.getTelephone_telex());
        soapUser.setTelephoneTtytdd(user.getTelephone_ttytdd());
        soapUser.setTimezone(user.getTimezone());
        soapUser.setTitle(user.getTitle());
        soapUser.setUploadFileSizeLimit(user.getUploadFileSizeLimit());
        soapUser.setUploadFileSizeLimitPerFile(user.getUploadFileSizeLimitPerFile());
        soapUser.setUrl(user.getUrl());
        soapUser.setUserAttributes(mapmap2Soap(user.getUserAttributes()));
        soapUser.setUserfield01(user.getUserfield01());
        soapUser.setUserfield02(user.getUserfield02());
        soapUser.setUserfield03(user.getUserfield03());
        soapUser.setUserfield04(user.getUserfield04());
        soapUser.setUserfield05(user.getUserfield05());
        soapUser.setUserfield06(user.getUserfield06());
        soapUser.setUserfield07(user.getUserfield07());
        soapUser.setUserfield08(user.getUserfield08());
        soapUser.setUserfield09(user.getUserfield09());
        soapUser.setUserfield10(user.getUserfield10());
        soapUser.setUserfield11(user.getUserfield11());
        soapUser.setUserfield12(user.getUserfield12());
        soapUser.setUserfield13(user.getUserfield13());
        soapUser.setUserfield14(user.getUserfield14());
        soapUser.setUserfield15(user.getUserfield15());
        soapUser.setUserfield16(user.getUserfield16());
        soapUser.setUserfield17(user.getUserfield17());
        soapUser.setUserfield18(user.getUserfield18());
        soapUser.setUserfield19(user.getUserfield19());
        soapUser.setUserfield20(user.getUserfield20());
        soapUser.setPrimaryAccountName(user.getPrimaryAccountName());
        return soapUser;
    }

    private static com.openexchange.admin.rmi.dataobjects.Group soap2Group(final Group soapGroup) {
        if (null == soapGroup) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Group group = new com.openexchange.admin.rmi.dataobjects.Group();
        final String displayname = soapGroup.getDisplayname();
        if (null != displayname) {
            group.setDisplayname(displayname);
        }
        final Integer id = soapGroup.getId();
        if (null != id) {
            group.setId(id);
        }
        final List<Integer> members = soapGroup.getMembers();
        if (null != members) {
            group.setMembers(members.toArray(new Integer[0]));
        }
        final String name = soapGroup.getName();
        if (null != name) {
            group.setName(name);
        }
        return group;
    }

    private static Group group2Soap(final com.openexchange.admin.rmi.dataobjects.Group group) {
        if (null == group) {
            return null;
        }
        final Group soapGroup = new Group();
        soapGroup.setDisplayname(group.getDisplayname());
        soapGroup.setId(group.getId());
        {
            final Integer[] members = group.getMembers();
            soapGroup.setMembers(null == members ? null : Arrays.asList(members));
        }
        soapGroup.setName(group.getName());
        return soapGroup;
    }

    private static com.openexchange.admin.rmi.dataobjects.Context soap2Context(final Context soapContext) {
        if (null == soapContext) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Context ret = new com.openexchange.admin.rmi.dataobjects.Context();

        Long lng = soapContext.getAverageSize();
        if (null != lng) {
            ret.setAverage_size(lng);
        }

        final Boolean enabled = soapContext.isEnabled();
        if (null != enabled) {
            ret.setEnabled(enabled);
        }

        final String s = soapContext.getFilestoreName();
        if (null != s) {
            ret.setFilestore_name(s);
        }

        Integer itg = soapContext.getFilestoreId();
        if (null != itg) {
            ret.setFilestoreId(itg);
        }

        itg = soapContext.getId();
        ret.setId(itg);

        if (null != soapContext.getLoginMappings()) {
            for (final String loginMapping : soapContext.getLoginMappings()) {
                if (null != loginMapping) {
                    ret.addLoginMapping(loginMapping);
                }
            }
        }

        lng = soapContext.getMaxQuota();
        if (null != lng) {
            ret.setMaxQuota(lng);
        }

        final String name = soapContext.getName();
        if (null != name) {
            ret.setName(name);
        }

        final Long usedQuota = soapContext.getUsedQuota();
        if (null != usedQuota) {
            ret.setUsedQuota(usedQuota);
        }

        final Database readDatabase = soapContext.getReadDatabase();
        if (null != readDatabase) {
            ret.setReadDatabase(soap2Database(readDatabase));
        }

        final Database writeDatabase = soapContext.getWriteDatabase();
        if (null != writeDatabase) {
            ret.setWriteDatabase(soap2Database(writeDatabase));
        }

        final SOAPStringMapMap userAttributes = soapContext.getUserAttributes();
        if (null != userAttributes) {
            ret.setUserAttributes(soap2MapMap(userAttributes));
        }
        return ret;
    }

    private static com.openexchange.admin.rmi.dataobjects.Database soap2Database(final Database soapDatabase) {
        if (null == soapDatabase) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Database ret = new com.openexchange.admin.rmi.dataobjects.Database();

        Integer itg = soapDatabase.getClusterWeight();
        if (itg != null) {
            ret.setClusterWeight(itg);
        }

        itg = soapDatabase.getCurrentUnits();
        if (itg != null) {
            ret.setCurrentUnits(itg);
        }

        String tmp = soapDatabase.getDriver();
        if (tmp != null) {
            ret.setDriver(tmp);
        }

        itg = soapDatabase.getId();
        if (itg != null) {
            ret.setId(itg);
        }

        tmp = soapDatabase.getLogin();
        if (tmp != null) {
            ret.setLogin(tmp);
        }

        final Boolean bool = soapDatabase.isMaster();
        if (bool != null) {
            ret.setMaster(bool);
        }

        itg = soapDatabase.getMasterId();
        if (itg != null) {
            ret.setMasterId(itg);
        }

        itg = soapDatabase.getMaxUnits();
        if (itg != null) {
            ret.setMaxUnits(itg);
        }

        tmp = soapDatabase.getName();
        if (tmp != null) {
            ret.setName(tmp);
        }

        tmp = soapDatabase.getPassword();
        if (tmp != null) {
            ret.setPassword(tmp);
        }

        itg = soapDatabase.getPoolHardLimit();
        if (itg != null) {
            ret.setPoolHardLimit(itg);
        }

        itg = soapDatabase.getPoolInitial();
        if (itg != null) {
            ret.setPoolInitial(itg);
        }

        itg = soapDatabase.getPoolMax();
        if (itg != null) {
            ret.setPoolMax(itg);
        }

        itg = soapDatabase.getReadId();
        if (itg != null) {
            ret.setRead_id(itg);
        }

        tmp = soapDatabase.getScheme();
        if (tmp != null) {
            ret.setScheme(tmp);
        }

        tmp = soapDatabase.getUrl();
        if (tmp != null) {
            ret.setUrl(tmp);
        }
        return ret;
    }

    private static com.openexchange.admin.rmi.dataobjects.UserModuleAccess soap2ModuleAccess(final UserModuleAccess soapModuleAccess) {
        if (null == soapModuleAccess) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.UserModuleAccess moduleAccess = new com.openexchange.admin.rmi.dataobjects.UserModuleAccess();

        final Boolean activeSync = soapModuleAccess.isActiveSync();
        if (null != activeSync) {
            moduleAccess.setActiveSync(booleanValue(activeSync));
        }

        final Boolean calendar = soapModuleAccess.isCalendar();
        if (null != calendar) {
            moduleAccess.setCalendar(booleanValue(calendar));
        }

        Boolean tmp = soapModuleAccess.isCollectEmailAddresses();
        if (tmp != null) {
            moduleAccess.setCollectEmailAddresses(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isContacts();
        if (tmp != null) {
            moduleAccess.setContacts(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isDelegateTask();
        if (tmp != null) {
            moduleAccess.setDelegateTask(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isDeniedPortal();
        if (tmp != null) {
            moduleAccess.setDeniedPortal(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isEditGroup();
        if (tmp != null) {
            moduleAccess.setEditGroup(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isEditPassword();
        if (tmp != null) {
            moduleAccess.setEditPassword(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isEditPublicFolders();
        if (tmp != null) {
            moduleAccess.setEditPublicFolders(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isEditResource();
        if (tmp != null) {
            moduleAccess.setEditResource(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isGlobalAddressBookDisabled();
        if (tmp != null) {
            moduleAccess.setGlobalAddressBookDisabled(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isIcal();
        if (tmp != null) {
            moduleAccess.setIcal(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isInfostore();
        if (tmp != null) {
            moduleAccess.setInfostore(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isMultipleMailAccounts();
        if (tmp != null) {
            moduleAccess.setMultipleMailAccounts(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isOLOX20();
        if (tmp != null) {
            moduleAccess.setOLOX20(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isPublication();
        if (tmp != null) {
            moduleAccess.setPublication(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isPublicFolderEditable();
        if (tmp != null) {
            moduleAccess.setPublicFolderEditable(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isReadCreateSharedFolders();
        if (tmp != null) {
            moduleAccess.setReadCreateSharedFolders(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isSubscription();
        if (tmp != null) {
            moduleAccess.setSubscription(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isSyncml();
        if (tmp != null) {
            moduleAccess.setSyncml(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isTasks();
        if (tmp != null) {
            moduleAccess.setTasks(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isUSM();
        if (tmp != null) {
            moduleAccess.setUSM(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isVcard();
        if (tmp != null) {
            moduleAccess.setVcard(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isWebdav();
        if (tmp != null) {
            moduleAccess.setWebdav(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isWebdavXml();
        if (tmp != null) {
            moduleAccess.setWebdavXml(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isWebmail();
        if (tmp != null) {
            moduleAccess.setWebmail(booleanValue(tmp));
        }
        return moduleAccess;
    }

    private static boolean booleanValue(final Boolean b) {
        return null == b ? false : b.booleanValue();
    }

    private static UserModuleAccess moduleAccess2Soap(final com.openexchange.admin.rmi.dataobjects.UserModuleAccess moduleAccess) {
        if (null == moduleAccess) {
            return null;
        }
        final UserModuleAccess soapModuleAccess = new UserModuleAccess();
        soapModuleAccess.setActiveSync(Boolean.valueOf(moduleAccess.isActiveSync()));
        soapModuleAccess.setCalendar(Boolean.valueOf(moduleAccess.getCalendar()));
        soapModuleAccess.setCollectEmailAddresses(Boolean.valueOf(moduleAccess.isCollectEmailAddresses()));
        soapModuleAccess.setContacts(Boolean.valueOf(moduleAccess.getContacts()));
        soapModuleAccess.setDelegateTask(Boolean.valueOf(moduleAccess.getDelegateTask()));
        soapModuleAccess.setDeniedPortal(Boolean.valueOf(moduleAccess.isDeniedPortal()));
        soapModuleAccess.setEditGroup(Boolean.valueOf(moduleAccess.getEditGroup()));
        soapModuleAccess.setEditPassword(Boolean.valueOf(moduleAccess.getEditPassword()));
        soapModuleAccess.setEditPublicFolders(Boolean.valueOf(moduleAccess.getEditPublicFolders()));
        soapModuleAccess.setEditResource(Boolean.valueOf(moduleAccess.getEditResource()));
        soapModuleAccess.setGlobalAddressBookDisabled(Boolean.valueOf(moduleAccess.isGlobalAddressBookDisabled()));
        soapModuleAccess.setIcal(Boolean.valueOf(moduleAccess.getIcal()));
        soapModuleAccess.setInfostore(Boolean.valueOf(moduleAccess.getInfostore()));
        soapModuleAccess.setMultipleMailAccounts(Boolean.valueOf(moduleAccess.isMultipleMailAccounts()));
        soapModuleAccess.setOLOX20(Boolean.valueOf(moduleAccess.isOLOX20()));
        soapModuleAccess.setPublication(Boolean.valueOf(moduleAccess.isPublication()));
        soapModuleAccess.setPublicFolderEditable(Boolean.valueOf(moduleAccess.isPublicFolderEditable()));
        soapModuleAccess.setReadCreateSharedFolders(Boolean.valueOf(moduleAccess.getReadCreateSharedFolders()));
        soapModuleAccess.setSubscription(Boolean.valueOf(moduleAccess.isSubscription()));
        soapModuleAccess.setSyncml(Boolean.valueOf(moduleAccess.getSyncml()));
        soapModuleAccess.setTasks(Boolean.valueOf(moduleAccess.getTasks()));
        soapModuleAccess.setUSM(Boolean.valueOf(moduleAccess.isUSM()));
        soapModuleAccess.setVcard(Boolean.valueOf(moduleAccess.getVcard()));
        soapModuleAccess.setWebdav(Boolean.valueOf(moduleAccess.getWebdav()));
        soapModuleAccess.setWebdavXml(Boolean.valueOf(moduleAccess.getWebdavXml()));
        soapModuleAccess.setWebmail(Boolean.valueOf(moduleAccess.getWebmail()));
        return soapModuleAccess;
    }

    private static Map<String, Map<String, String>> soap2MapMap(final SOAPStringMapMap soapStringMapMap) {
        if (null == soapStringMapMap) {
            return null;
        }
        final java.util.List<SOAPMapEntry> entries = soapStringMapMap.getEntries();
        final Map<String, Map<String, String>> map = new HashMap<>(entries.size());
        for (final SOAPMapEntry soapMapEntry : entries) {
            if (null != soapMapEntry) {
                map.put(soapMapEntry.getKey(), soap2Map(soapMapEntry.getValue()));
            }
        }
        return map;
    }

    private static Map<String, String> soap2Map(final SOAPStringMap soapStringMap) {
        if (null == soapStringMap) {
            return null;
        }
        final java.util.List<Entry> entries = soapStringMap.getEntries();
        final Map<String, String> map = new HashMap<>(entries.size());
        for (final Entry entry : entries) {
            if (null != entry) {
                map.put(entry.getKey(), entry.getValue());
            }
        }
        return map;
    }

    private static SOAPStringMapMap mapmap2Soap(final Map<String, Map<String, String>> mapmap) {
        if (null == mapmap) {
            return null;
        }
        final SOAPStringMapMap soapMapMap = new SOAPStringMapMap();
        final java.util.List<SOAPMapEntry> entries = new ArrayList<>(mapmap.size());
        for (final Map.Entry<String, Map<String, String>> mapmapEntry : mapmap.entrySet()) {
            final SOAPMapEntry mapEntry = new SOAPMapEntry();
            mapEntry.setKey(mapmapEntry.getKey());
            mapEntry.setValue(map2Soap(mapmapEntry.getValue()));
            entries.add(mapEntry);
        }
        soapMapMap.setEntries(entries);
        return soapMapMap;
    }

    private static SOAPStringMap map2Soap(final Map<String, String> map) {
        if (null == map) {
            return null;
        }
        final SOAPStringMap soapMap = new SOAPStringMap();
        final java.util.List<Entry> entries = new ArrayList<>(map.size());
        for (final Map.Entry<String, String> mapEntry : map.entrySet()) {
            final Entry entry = new Entry();
            entry.setKey(mapEntry.getKey());
            entry.setValue(mapEntry.getValue());
            entries.add(entry);
        }
        soapMap.setEntries(entries);
        return soapMap;
    }

    @Override
    public List<User> listByAliasDomain(Context ctx, String aliasDomain, Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception {
        final OXUserInterface userInterface = getUserInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.User[] users = userInterface.listByAliasDomain(soap2Context(ctx), aliasDomain, soap2Credentials(auth));
            if (null == users) {
                return Collections.emptyList();
            }
            final java.util.List<User> list = new ArrayList<>(users.length);
            for (final com.openexchange.admin.rmi.dataobjects.User user : users) {
                list.add(user2Soap(user));
            }
            return list;
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.user.soap.RemoteException faultDetail = new com.openexchange.admin.soap.user.soap.RemoteException();
            com.openexchange.admin.soap.user.rmi.RemoteException value = new com.openexchange.admin.soap.user.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.user.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidCredentialsException();
            com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException value = new com.openexchange.admin.soap.user.exceptions.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(value);
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.user.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.user.soap.NoSuchContextException();
            com.openexchange.admin.soap.user.exceptions.NoSuchContextException value = new com.openexchange.admin.soap.user.exceptions.NoSuchContextException();
            faultDetail.setNoSuchContextException(value);
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.user.soap.StorageException faultDetail = new com.openexchange.admin.soap.user.soap.StorageException();
            com.openexchange.admin.soap.user.exceptions.StorageException value = new com.openexchange.admin.soap.user.exceptions.StorageException();
            faultDetail.setStorageException(value);
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.user.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.user.soap.InvalidDataException();
            com.openexchange.admin.soap.user.exceptions.InvalidDataException value = new com.openexchange.admin.soap.user.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        }
    }
}
