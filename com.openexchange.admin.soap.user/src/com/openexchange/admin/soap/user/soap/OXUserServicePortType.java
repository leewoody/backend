package com.openexchange.admin.soap.user.soap;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 2.6.0
 * 2012-06-01T18:24:59.078+02:00
 * Generated source version: 2.6.0
 *
 */
@WebService(targetNamespace = "http://soap.admin.openexchange.com", name = "OXUserServicePortType")
@XmlSeeAlso({com.openexchange.admin.soap.user.io.ObjectFactory.class, ObjectFactory.class, com.openexchange.admin.soap.user.rmi.ObjectFactory.class, com.openexchange.admin.soap.user.exceptions.ObjectFactory.class, com.openexchange.admin.soap.user.dataobjects.ObjectFactory.class})
public interface OXUserServicePortType {

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:createByModuleAccess", output = "urn:createByModuleAccessResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:createByModuleAccessStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:createByModuleAccessInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:createByModuleAccessInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:createByModuleAccessNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:createByModuleAccessRemoteException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:createByModuleAccessDatabaseUpdateException")})
    @RequestWrapper(localName = "createByModuleAccess", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.CreateByModuleAccess")
    @WebMethod(action = "urn:createByModuleAccess")
    @ResponseWrapper(localName = "createByModuleAccessResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.CreateByModuleAccessResponse")
    public com.openexchange.admin.soap.user.dataobjects.User createByModuleAccess(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "usrdata", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.User usrdata,
        @WebParam(name = "access", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.UserModuleAccess access,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:change", output = "urn:changeResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:changeStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:changeInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:changeInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:changeNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:changeRemoteException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:changeNoSuchUserException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:changeDatabaseUpdateException")})
    @WebMethod(action = "urn:change")
    public void change(
        @WebParam(partName = "parameters", name = "change", targetNamespace = "http://soap.admin.openexchange.com")
        Change parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:getUserCapabilities", output = "urn:getUserCapabilitiesResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:getUserCapabilitiesStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getUserCapabilitiesInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getUserCapabilitiesInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:getUserCapabilitiesNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getUserCapabilitiesRemoteException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:getUserCapabilitiesNoSuchUserException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:getUserCapabilitiesDatabaseUpdateException")})
    @RequestWrapper(localName = "getUserCapabilities", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.GetUserCapabilities")
    @WebMethod(action = "urn:getUserCapabilities")
    @ResponseWrapper(localName = "getUserCapabilitiesResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.GetUserCapabilitiesResponse")
    public java.lang.String getUserCapabilities(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "user", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.User user,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:changeCapabilities", output = "urn:changeCapabilitiesResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:changeCapabilitiesStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:changeCapabilitiesInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:changeCapabilitiesInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:changeCapabilitiesNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:changeCapabilitiesRemoteException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:changeCapabilitiesNoSuchUserException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:changeCapabilitiesDatabaseUpdateException")})
    @WebMethod(action = "urn:changeCapabilities")
    public void changeCapabilities(
        @WebParam(partName = "parameters", name = "changeCapabilities", targetNamespace = "http://soap.admin.openexchange.com")
        ChangeCapabilities parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:changeMailAddressPersonal", output = "urn:changeMailAddressPersonalResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:changeMailAddressPersonalStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:changeMailAddressPersonalInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:changeMailAddressPersonalInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:changeMailAddressPersonalNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:changeMailAddressPersonalRemoteException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:changeMailAddressPersonalNoSuchUserException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:changeMailAddressPersonalDatabaseUpdateException")})
    @WebMethod(action = "urn:changeMailAddressPersonal")
    public void changeMailAddressPersonal(
        @WebParam(partName = "parameters", name = "changeMailAddressPersonal", targetNamespace = "http://soap.admin.openexchange.com")
        ChangeMailAddressPersonal parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:createByModuleAccessName", output = "urn:createByModuleAccessNameResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:createByModuleAccessNameStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:createByModuleAccessNameInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:createByModuleAccessNameInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:createByModuleAccessNameNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:createByModuleAccessNameRemoteException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:createByModuleAccessNameDatabaseUpdateException")})
    @RequestWrapper(localName = "createByModuleAccessName", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.CreateByModuleAccessName")
    @WebMethod(action = "urn:createByModuleAccessName")
    @ResponseWrapper(localName = "createByModuleAccessNameResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.CreateByModuleAccessNameResponse")
    public com.openexchange.admin.soap.user.dataobjects.User createByModuleAccessName(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "usrdata", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.User usrdata,
        @WebParam(name = "access_combination_name", targetNamespace = "http://soap.admin.openexchange.com")
        java.lang.String accessCombinationName,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:getModuleAccess", output = "urn:getModuleAccessResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:getModuleAccessStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getModuleAccessInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getModuleAccessInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:getModuleAccessNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getModuleAccessRemoteException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:getModuleAccessNoSuchUserException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:getModuleAccessDatabaseUpdateException")})
    @RequestWrapper(localName = "getModuleAccess", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.GetModuleAccess")
    @WebMethod(action = "urn:getModuleAccess")
    @ResponseWrapper(localName = "getModuleAccessResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.GetModuleAccessResponse")
    public com.openexchange.admin.soap.user.dataobjects.UserModuleAccess getModuleAccess(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "user", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.User user,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:listAll", output = "urn:listAllResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:listAllStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listAllInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listAllInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:listAllNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listAllRemoteException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:listAllDatabaseUpdateException")})
    @RequestWrapper(localName = "listAll", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.ListAll")
    @WebMethod(action = "urn:listAll")
    @ResponseWrapper(localName = "listAllResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.ListAllResponse")
    public java.util.List<com.openexchange.admin.soap.user.dataobjects.User> listAll(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth,
        @WebParam(name = "includeGuests", targetNamespace = "http://soap.admin.openexchange.com") Boolean includeGuests,
        @WebParam(name = "excludeUsers", targetNamespace = "http://soap.admin.openexchange.com") Boolean excludeUsers
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:getContextAdmin", output = "urn:getContextAdminResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:getContextAdminStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getContextAdminInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getContextAdminInvalidDataException"), @FaultAction(className = DuplicateExtensionException_Exception.class, value = "urn:getContextAdminDuplicateExtensionException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getContextAdminRemoteException")})
    @RequestWrapper(localName = "getContextAdmin", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.GetContextAdmin")
    @WebMethod(action = "urn:getContextAdmin")
    @ResponseWrapper(localName = "getContextAdminResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.GetContextAdminResponse")
    public com.openexchange.admin.soap.user.dataobjects.User getContextAdmin(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, DuplicateExtensionException_Exception, RemoteException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:changeByModuleAccessName", output = "urn:changeByModuleAccessNameResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:changeByModuleAccessNameStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:changeByModuleAccessNameInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:changeByModuleAccessNameInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:changeByModuleAccessNameNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:changeByModuleAccessNameRemoteException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:changeByModuleAccessNameNoSuchUserException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:changeByModuleAccessNameDatabaseUpdateException")})
    @WebMethod(action = "urn:changeByModuleAccessName")
    public void changeByModuleAccessName(
        @WebParam(partName = "parameters", name = "changeByModuleAccessName", targetNamespace = "http://soap.admin.openexchange.com")
        ChangeByModuleAccessName parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:delete", output = "urn:deleteResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:deleteStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:deleteInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:deleteInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:deleteNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:deleteRemoteException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:deleteNoSuchUserException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:deleteDatabaseUpdateException")})
    @WebMethod(action = "urn:delete")
    public void delete(
        @WebParam(partName = "parameters", name = "delete", targetNamespace = "http://soap.admin.openexchange.com")
        Delete parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:deleteMultiple", output = "urn:deleteMultipleResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:deleteMultipleStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:deleteMultipleInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:deleteMultipleInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:deleteMultipleNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:deleteMultipleRemoteException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:deleteMultipleNoSuchUserException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:deleteMultipleDatabaseUpdateException")})
    @WebMethod(action = "urn:deleteMultiple")
    public void deleteMultiple(
        @WebParam(partName = "parameters", name = "deleteMultiple", targetNamespace = "http://soap.admin.openexchange.com")
        DeleteMultiple parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:changeByModuleAccess", output = "urn:changeByModuleAccessResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:changeByModuleAccessStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:changeByModuleAccessInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:changeByModuleAccessInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:changeByModuleAccessNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:changeByModuleAccessRemoteException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:changeByModuleAccessNoSuchUserException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:changeByModuleAccessDatabaseUpdateException")})
    @WebMethod(action = "urn:changeByModuleAccess")
    public void changeByModuleAccess(
        @WebParam(partName = "parameters", name = "changeByModuleAccess", targetNamespace = "http://soap.admin.openexchange.com")
        ChangeByModuleAccess parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:getMultipleData", output = "urn:getMultipleDataResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:getMultipleDataStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getMultipleDataInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getMultipleDataInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:getMultipleDataNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getMultipleDataRemoteException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:getMultipleDataNoSuchUserException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:getMultipleDataDatabaseUpdateException")})
    @RequestWrapper(localName = "getMultipleData", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.GetMultipleData")
    @WebMethod(action = "urn:getMultipleData")
    @ResponseWrapper(localName = "getMultipleDataResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.GetMultipleDataResponse")
    public java.util.List<com.openexchange.admin.soap.user.dataobjects.User> getMultipleData(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "users", targetNamespace = "http://soap.admin.openexchange.com")
        java.util.List<com.openexchange.admin.soap.user.dataobjects.User> users,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:getAccessCombinationName", output = "urn:getAccessCombinationNameResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:getAccessCombinationNameStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getAccessCombinationNameInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getAccessCombinationNameInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:getAccessCombinationNameNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getAccessCombinationNameRemoteException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:getAccessCombinationNameNoSuchUserException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:getAccessCombinationNameDatabaseUpdateException")})
    @RequestWrapper(localName = "getAccessCombinationName", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.GetAccessCombinationName")
    @WebMethod(action = "urn:getAccessCombinationName")
    @ResponseWrapper(localName = "getAccessCombinationNameResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.GetAccessCombinationNameResponse")
    public java.lang.String getAccessCombinationName(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "user", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.User user,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:create", output = "urn:createResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:createStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:createInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:createInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:createNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:createRemoteException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:createDatabaseUpdateException")})
    @RequestWrapper(localName = "create", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.Create")
    @WebMethod(action = "urn:create")
    @ResponseWrapper(localName = "createResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.CreateResponse")
    public com.openexchange.admin.soap.user.dataobjects.User create(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "usrdata", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.User usrdata,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:moveUserFilestore", output = "urn:moveUserFilestoreResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:moveUserFilestoreStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:moveUserFilestoreInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:moveUserFilestoreInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:moveUserFilestoreNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:moveUserFilestoreRemoteException"), @FaultAction(className = NoSuchFilestoreException_Exception.class, value = "urn:moveUserFilestoreNoSuchFilestoreException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:moveUserFilestoreDatabaseUpdateException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:moveUserFilestoreNoSuchUserException")})
    @RequestWrapper(localName = "moveUserFilestore", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.MoveUserFilestore")
    @WebMethod(action = "urn:moveUserFilestore")
    @ResponseWrapper(localName = "moveUserFilestoreResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.context.soap.MoveUserFilestoreResponse")
    public java.lang.Integer moveUserFilestore(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "user", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.User user,
        @WebParam(name = "dst_filestore_id", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Filestore dstFilestoreId,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchFilestoreException_Exception, DatabaseUpdateException_Exception, NoSuchUserException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:moveFromUserFilestoreToMaster", output = "urn:moveFromUserFilestoreToMasterResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:moveFromUserFilestoreToMasterStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:moveFromUserFilestoreToMasterInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:moveFromUserFilestoreToMasterInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:moveFromUserFilestoreToMasterNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:moveFromUserFilestoreToMasterRemoteException"), @FaultAction(className = NoSuchFilestoreException_Exception.class, value = "urn:moveFromUserFilestoreToMasterNoSuchFilestoreException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:moveFromUserFilestoreToMasterDatabaseUpdateException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:moveFromUserFilestoreToMasterNoSuchUserException")})
    @RequestWrapper(localName = "moveFromUserFilestoreToMaster", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.MoveFromUserFilestoreToMaster")
    @WebMethod(action = "urn:moveFromUserFilestoreToMaster")
    @ResponseWrapper(localName = "moveFromUserFilestoreToMasterResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.context.soap.MoveFromUserFilestoreToMasterResponse")
    public java.lang.Integer moveFromUserFilestoreToMaster(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "user", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.User user,
        @WebParam(name = "masterUser", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.User masterUser,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchFilestoreException_Exception, DatabaseUpdateException_Exception, NoSuchUserException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:moveFromMasterToUserFilestore", output = "urn:moveFromMasterToUserFilestoreResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:moveFromMasterToUserFilestoreStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:moveFromMasterToUserFilestoreInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:moveFromMasterToUserFilestoreInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:moveFromMasterToUserFilestoreNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:moveFromMasterToUserFilestoreRemoteException"), @FaultAction(className = NoSuchFilestoreException_Exception.class, value = "urn:moveFromMasterToUserFilestoreNoSuchFilestoreException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:moveFromMasterToUserFilestoreDatabaseUpdateException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:moveFromMasterToUserFilestoreNoSuchUserException")})
    @RequestWrapper(localName = "moveFromMasterToUserFilestore", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.MoveFromMasterToUserFilestore")
    @WebMethod(action = "urn:moveFromMasterToUserFilestore")
    @ResponseWrapper(localName = "moveFromMasterToUserFilestoreResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.context.soap.MoveFromMasterToUserFilestoreResponse")
    public java.lang.Integer moveFromMasterToUserFilestore(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "user", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.User user,
        @WebParam(name = "masterUser", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.User masterUser,
        @WebParam(name = "dst_filestore_id", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Filestore dstFilestoreId,
        @WebParam(name = "max_quota", targetNamespace = "http://soap.admin.openexchange.com")
        java.lang.Long maxQuota,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchFilestoreException_Exception, DatabaseUpdateException_Exception, NoSuchUserException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:moveFromContextToUserFilestore", output = "urn:moveFromContextToUserFilestoreResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:moveFromContextToUserFilestoreStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:moveFromContextToUserFilestoreInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:moveFromContextToUserFilestoreInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:moveFromContextToUserFilestoreNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:moveFromContextToUserFilestoreRemoteException"), @FaultAction(className = NoSuchFilestoreException_Exception.class, value = "urn:moveFromContextToUserFilestoreNoSuchFilestoreException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:moveFromContextToUserFilestoreDatabaseUpdateException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:moveFromContextToUserFilestoreNoSuchUserException")})
    @RequestWrapper(localName = "moveFromContextToUserFilestore", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.MoveFromContextToUserFilestore")
    @WebMethod(action = "urn:moveFromContextToUserFilestore")
    @ResponseWrapper(localName = "moveFromContextToUserFilestoreResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.context.soap.MoveFromContextToUserFilestoreResponse")
    public java.lang.Integer moveFromContextToUserFilestore(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "user", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.User user,
        @WebParam(name = "dst_filestore_id", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Filestore dstFilestoreId,
        @WebParam(name = "max_quota", targetNamespace = "http://soap.admin.openexchange.com")
        java.lang.Long maxQuota,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchFilestoreException_Exception, DatabaseUpdateException_Exception, NoSuchUserException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:moveFromUserToContextFilestore", output = "urn:moveFromUserToContextFilestoreResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:moveFromUserToContextFilestoreStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:moveFromUserToContextFilestoreInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:moveFromUserToContextFilestoreInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:moveFromUserToContextFilestoreNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:moveFromUserToContextFilestoreRemoteException"), @FaultAction(className = NoSuchFilestoreException_Exception.class, value = "urn:moveFromUserToContextFilestoreNoSuchFilestoreException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:moveFromUserToContextFilestoreDatabaseUpdateException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:moveFromUserToContextFilestoreNoSuchUserException")})
    @RequestWrapper(localName = "moveFromUserToContextFilestore", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.MoveFromUserToContextFilestore")
    @WebMethod(action = "urn:moveFromUserToContextFilestore")
    @ResponseWrapper(localName = "moveFromUserToContextFilestoreResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.context.soap.MoveFromUserToContextFilestoreResponse")
    public java.lang.Integer moveFromUserToContextFilestore(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "user", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.User user,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchFilestoreException_Exception, DatabaseUpdateException_Exception, NoSuchUserException_Exception;


    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:listByAliasDomain", output = "urn:listByAliasDomainResponse", fault = { @FaultAction(className = StorageException_Exception.class, value = "urn:listByAliasDomainStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listByAliasDomainInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listByAliasDomainInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:listByAliasDomainNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listByAliasDomainRemoteException") })
    @RequestWrapper(localName = "listByAliasDomain", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.ListByAliasDomain")
    @WebMethod(action = "urn:listByAliasDomain")
    @ResponseWrapper(localName = "listByAliasDomainResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.ListByAliasDomainResponse")
    public java.util.List<com.openexchange.admin.soap.user.dataobjects.User> listByAliasDomain(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com") com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "alias_domain", targetNamespace = "http://soap.admin.openexchange.com") java.lang.String aliasDomain,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com") com.openexchange.admin.soap.user.dataobjects.Credentials auth
        ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:list", output = "urn:listResponse", fault = { @FaultAction(className = StorageException_Exception.class, value = "urn:listStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:listNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listRemoteException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:listDatabaseUpdateException") })
    @RequestWrapper(localName = "list", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.List")
    @WebMethod(action = "urn:list")
    @ResponseWrapper(localName = "listResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.ListResponse")
    public java.util.List<com.openexchange.admin.soap.user.dataobjects.User> list(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com") com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "search_pattern", targetNamespace = "http://soap.admin.openexchange.com") java.lang.String searchPattern,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com") com.openexchange.admin.soap.user.dataobjects.Credentials auth,
        @WebParam(name = "include_guests", targetNamespace = "http://soap.admin.openexchange.com") java.lang.Boolean includeGuests,
        @WebParam(name = "exclude_users", targetNamespace = "http://soap.admin.openexchange.com") java.lang.Boolean excludeUsers
        ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:listCaseInsensitive", output = "urn:listCaseInsensitiveResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:listCaseInsensitiveStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listCaseInsensitiveInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listCaseInsensitiveInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:listCaseInsensitiveNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listCaseInsensitiveRemoteException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:listCaseInsensitiveDatabaseUpdateException")})
    @RequestWrapper(localName = "listCaseInsensitive", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.ListCaseInsensitive")
    @WebMethod(action = "urn:listCaseInsensitive")
    @ResponseWrapper(localName = "listCaseInsensitiveResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.ListCaseInsensitiveResponse")
    public java.util.List<com.openexchange.admin.soap.user.dataobjects.User> listCaseInsensitive(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "search_pattern", targetNamespace = "http://soap.admin.openexchange.com")
        java.lang.String searchPattern,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:changeModuleAccessGlobal", output = "urn:changeModuleAccessGlobalResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:changeModuleAccessGlobalStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:changeModuleAccessGlobalInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:changeModuleAccessGlobalInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:changeModuleAccessGlobalRemoteException")})
    @WebMethod(action = "urn:changeModuleAccessGlobal")
    public void changeModuleAccessGlobal(
        @WebParam(partName = "parameters", name = "changeModuleAccessGlobal", targetNamespace = "http://soap.admin.openexchange.com")
        ChangeModuleAccessGlobal parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:exists", output = "urn:existsResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:existsStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:existsInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:existsInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:existsNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:existsRemoteException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:existsDatabaseUpdateException")})
    @RequestWrapper(localName = "exists", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.Exists")
    @WebMethod(action = "urn:exists")
    @ResponseWrapper(localName = "existsResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.ExistsResponse")
    public java.lang.Boolean exists(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "user", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.User user,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:getData", output = "urn:getDataResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:getDataStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:getDataInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:getDataInvalidDataException"), @FaultAction(className = NoSuchContextException_Exception.class, value = "urn:getDataNoSuchContextException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:getDataRemoteException"), @FaultAction(className = NoSuchUserException_Exception.class, value = "urn:getDataNoSuchUserException"), @FaultAction(className = DatabaseUpdateException_Exception.class, value = "urn:getDataDatabaseUpdateException")})
    @RequestWrapper(localName = "getData", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.GetData")
    @WebMethod(action = "urn:getData")
    @ResponseWrapper(localName = "getDataResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.user.soap.GetDataResponse")
    public com.openexchange.admin.soap.user.dataobjects.User getData(
        @WebParam(name = "ctx", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Context ctx,
        @WebParam(name = "user", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.User user,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.user.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchUserException_Exception, DatabaseUpdateException_Exception;
}
