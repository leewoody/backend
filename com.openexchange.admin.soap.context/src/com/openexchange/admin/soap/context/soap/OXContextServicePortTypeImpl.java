/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.openexchange.admin.soap.context.soap;

import java.net.URI;
import java.net.URISyntaxException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TimeZone;
import java.util.TreeSet;
import java.util.concurrent.atomic.AtomicReference;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.jws.WebParam;
import javax.xml.datatype.XMLGregorianCalendar;
import org.slf4j.Logger;
import com.openexchange.admin.rmi.OXContextInterface;
import com.openexchange.admin.rmi.exceptions.ContextExistsException;
import com.openexchange.admin.rmi.exceptions.DatabaseUpdateException;
import com.openexchange.admin.rmi.exceptions.InvalidCredentialsException;
import com.openexchange.admin.rmi.exceptions.InvalidDataException;
import com.openexchange.admin.rmi.exceptions.NoSuchContextException;
import com.openexchange.admin.rmi.exceptions.NoSuchDatabaseException;
import com.openexchange.admin.rmi.exceptions.NoSuchFilestoreException;
import com.openexchange.admin.rmi.exceptions.NoSuchReasonException;
import com.openexchange.admin.rmi.exceptions.OXContextException;
import com.openexchange.admin.rmi.exceptions.StorageException;
import com.openexchange.admin.soap.context.dataobjects.Context;
import com.openexchange.admin.soap.context.dataobjects.Credentials;
import com.openexchange.admin.soap.context.dataobjects.Database;
import com.openexchange.admin.soap.context.dataobjects.Entry;
import com.openexchange.admin.soap.context.dataobjects.Filestore;
import com.openexchange.admin.soap.context.dataobjects.Group;
import com.openexchange.admin.soap.context.dataobjects.Quota;
import com.openexchange.admin.soap.context.dataobjects.SOAPMapEntry;
import com.openexchange.admin.soap.context.dataobjects.SOAPStringMap;
import com.openexchange.admin.soap.context.dataobjects.SOAPStringMapMap;
import com.openexchange.admin.soap.context.dataobjects.SchemaSelectStrategy;
import com.openexchange.admin.soap.context.dataobjects.User;
import com.openexchange.admin.soap.context.dataobjects.UserModuleAccess;
import com.openexchange.tools.net.URIDefaults;
import com.openexchange.tools.net.URIParser;

/**
 * This class was generated by Apache CXF 2.6.0
 * 2012-06-01T18:39:08.004+02:00
 * Generated source version: 2.6.0
 *
 */

@javax.jws.WebService(
    serviceName = "OXContextService",
    portName = "OXContextServiceHttpsEndpoint",
    targetNamespace = "http://soap.admin.openexchange.com",
    // wsdlLocation = "null",
    endpointInterface = "com.openexchange.admin.soap.context.soap.OXContextServicePortType")
public class OXContextServicePortTypeImpl implements OXContextServicePortType {

    public static final AtomicReference<OXContextInterface> RMI_REFERENCE = new AtomicReference<OXContextInterface>();

    private static OXContextInterface getContextInterface() throws RemoteException_Exception {
        final OXContextInterface contextInterface = RMI_REFERENCE.get();
        if (null == contextInterface) {
            throw new RemoteException_Exception("Missing " + OXContextInterface.class.getName() + " instance.");
        }
        return contextInterface;
    }

    @Override
    public List<Quota> listQuota(Context ctx, Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception {
        OXContextInterface contextInterface = getContextInterface();
        try {
            com.openexchange.admin.rmi.dataobjects.Quota[] quotas = contextInterface.listQuotas(soap2Context(ctx), soap2Credentials(auth));

            List<Quota> retval = new ArrayList<Quota>(quotas.length);
            for (com.openexchange.admin.rmi.dataobjects.Quota quota : quotas) {
                retval.add(quota2Soap(quota));
            }
            return retval;
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NumberFormatException e) {
            throw new InvalidDataException_Exception("Invalid quota value.", e);
        }
    }

    @Override
    public void changeQuota(@WebParam(partName = "parameters", name = "changeQuota", targetNamespace = "http://soap.admin.openexchange.com") ChangeQuota parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            final String sQuotaValue = parameters.quotaValue;
            if (com.openexchange.java.Strings.isEmpty(sQuotaValue)) {
                throw new InvalidDataException("Missing quota value.");
            }
            final String module = parameters.module;
            if (null == module) {
                throw new InvalidDataException("Missing quota module.");
            }
            contextInterface.changeQuota(soap2Context(parameters.ctx), module, Long.parseLong(sQuotaValue.trim()), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NumberFormatException e) {
            throw new InvalidDataException_Exception("Invalid quota value.", e);
        }
    }

    @Override
    public String getContextCapabilities(Context ctx, Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            final Set<String> capabilities = contextInterface.getCapabilities(soap2Context(ctx), soap2Credentials(auth));
            if (null == capabilities || capabilities.isEmpty()) {
                return "There are no capabilities set for context " + ctx.getId();
            }

            final Iterator<String> iterator = new TreeSet<String>(capabilities).iterator();
            final StringBuilder sb = new StringBuilder(capabilities.size() << 4);
            sb.append(iterator.next());
            for (int i = capabilities.size(); i-- > 1;) {
                sb.append(", ").append(iterator.next());
            }
            return sb.toString();
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public void changeCapabilities(final ChangeCapabilities parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.changeCapabilities(soap2Context(parameters.ctx), parseToSet(parameters.capsToAdd), parseToSet(parameters.capsToRemove), parseToSet(parameters.capsToDrop), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    private Set<String> parseToSet(final String csv) {
        String s = csv;
        if (com.openexchange.java.Strings.isEmpty(s)) {
            return Collections.emptySet();
        }
        s = s.trim();
        if ('"' == s.charAt(0)) {
            if (s.length() <= 1) {
                return Collections.emptySet();
            }
            s = s.substring(1);
            if (com.openexchange.java.Strings.isEmpty(s)) {
                return Collections.emptySet();
            }
        }
        if ('"' == s.charAt(s.length() - 1)) {
            if (s.length() <= 1) {
                return Collections.emptySet();
            }
            s = s.substring(0, s.length() - 1);
            if (com.openexchange.java.Strings.isEmpty(s)) {
                return Collections.emptySet();
            }
        }
        // Split
        final String[] arr = s.split(" *, *", 0);
        final Set<String> set = new HashSet<String>(arr.length);
        for (String element : arr) {
            final String cap = element;
            if (!com.openexchange.java.Strings.isEmpty(cap)) {
                set.add(com.openexchange.java.Strings.toLowerCase(cap));
            }
        }
        return set;
    }

    @Override
    public void change(final Change parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.change(soap2Context(parameters.getCtx()), soap2Credentials(parameters.getAuth()));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public UserModuleAccess getModuleAccess(final Context ctx, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return moduleAccess2Soap(contextInterface.getModuleAccess(soap2Context(ctx), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public void enable(final Enable parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.enable(soap2Context(parameters.getCtx()), soap2Credentials(parameters.getAuth()));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public void disableAll(final DisableAll parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, NoSuchReasonException_Exception, InvalidDataException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.disableAll(soap2Credentials(parameters.getAuth()));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchReasonException e) {
            com.openexchange.admin.soap.context.soap.NoSuchReasonException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchReasonException();
            com.openexchange.admin.soap.context.exceptions.NoSuchReasonException value = new com.openexchange.admin.soap.context.exceptions.NoSuchReasonException();
            faultDetail.setNoSuchReasonException(value);
            throw new NoSuchReasonException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public void changeModuleAccessByName(final ChangeModuleAccessByName parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.changeModuleAccess(soap2Context(parameters.getCtx()), parameters.getAccessCombinationName(), soap2Credentials(parameters.getAuth()));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public java.util.List<Context> listAll(final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Context[] contexts = contextInterface.listAll(soap2Credentials(auth));
            if (null == contexts) {
                return Collections.emptyList();
            }
            final java.util.List<Context> list = new ArrayList<Context>(contexts.length);
            for (final com.openexchange.admin.rmi.dataobjects.Context context : contexts) {
                list.add(context2Soap(context));
            }
            return list;
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public java.lang.Integer moveContextDatabase(final Context ctx, final Database dstDatabaseId, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, OXContextException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return Integer.valueOf(contextInterface.moveContextDatabase(soap2Context(ctx), soap2Database(dstDatabaseId), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.context.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.context.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.context.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.context.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        } catch (final OXContextException e) {
            throw OXContextException_Exception.getFaultFor(e);
        }
    }

    @Override
    public Context createModuleAccess(final Context ctx, final User adminUser, final UserModuleAccess access, final Credentials auth, SchemaSelectStrategy schemaSelectStrategy) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, ContextExistsException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return context2Soap(contextInterface.create(soap2Context(ctx), soap2User(adminUser), soap2ModuleAccess(access), soap2Credentials(auth), soap2SchemaSelectStrategy(schemaSelectStrategy)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final ContextExistsException e) {
            throw ContextExistsException_Exception.faultFor(e);
        }
    }

    @Override
    public void changeModuleAccess(final ChangeModuleAccess parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.changeModuleAccess(soap2Context(parameters.ctx), soap2ModuleAccess(parameters.access), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public Context createModuleAccessByName(final Context ctx, final User adminUser, final java.lang.String accessCombinationName, final Credentials auth, SchemaSelectStrategy schemaSelectStrategy) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, ContextExistsException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return context2Soap(contextInterface.create(soap2Context(ctx), soap2User(adminUser), accessCombinationName, soap2Credentials(auth), soap2SchemaSelectStrategy(schemaSelectStrategy)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final ContextExistsException e) {
            throw ContextExistsException_Exception.faultFor(e);
        }
    }

    @Override
    public void enableAll(final EnableAll parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.enableAll(soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public java.util.List<Context> listByFilestore(final Filestore fs, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception, NoSuchFilestoreException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Context[] contexts = contextInterface.listByFilestore(soap2Filestore(fs), soap2Credentials(auth));
            if (null == contexts) {
                return Collections.emptyList();
            }
            final java.util.List<Context> list = new ArrayList<Context>(contexts.length);
            for (final com.openexchange.admin.rmi.dataobjects.Context context : contexts) {
                list.add(context2Soap(context));
            }
            return list;
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchFilestoreException e) {
            com.openexchange.admin.soap.context.soap.NoSuchFilestoreException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchFilestoreException();
            com.openexchange.admin.soap.context.exceptions.NoSuchFilestoreException value = new com.openexchange.admin.soap.context.exceptions.NoSuchFilestoreException();
            faultDetail.setNoSuchFilestoreException(value);
            throw new NoSuchFilestoreException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public java.lang.Integer getAdminId(final Context ctx, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, NoSuchContextException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return Integer.valueOf(contextInterface.getAdminId(soap2Context(ctx), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public void delete(final Delete parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.delete(soap2Context(parameters.ctx), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.context.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.context.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.context.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.context.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public void disable(final Disable parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, NoSuchReasonException_Exception, InvalidDataException_Exception, OXContextException_Exception, NoSuchContextException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.disable(soap2Context(parameters.ctx), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchReasonException e) {
            com.openexchange.admin.soap.context.soap.NoSuchReasonException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchReasonException();
            com.openexchange.admin.soap.context.exceptions.NoSuchReasonException value = new com.openexchange.admin.soap.context.exceptions.NoSuchReasonException();
            faultDetail.setNoSuchReasonException(value);
            throw new NoSuchReasonException_Exception(e.getMessage(), faultDetail, e);
        } catch (final OXContextException e) {
            throw OXContextException_Exception.getFaultFor(e);
        }
    }

    @Override
    public java.lang.String getAccessCombinationName(final Context ctx, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return contextInterface.getAccessCombinationName(soap2Context(ctx), soap2Credentials(auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public void downgrade(final Downgrade parameters) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception, DatabaseUpdateException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.downgrade(soap2Context(parameters.ctx), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final DatabaseUpdateException e) {
            com.openexchange.admin.soap.context.soap.DatabaseUpdateException faultDetail = new com.openexchange.admin.soap.context.soap.DatabaseUpdateException();
            com.openexchange.admin.soap.context.exceptions.DatabaseUpdateException value = new com.openexchange.admin.soap.context.exceptions.DatabaseUpdateException();
            faultDetail.setDatabaseUpdateException(value);
            throw new DatabaseUpdateException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public Context create(final Context ctx, final User adminUser, final Credentials auth, SchemaSelectStrategy schemaSelectStrategy) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, ContextExistsException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return context2Soap(contextInterface.create(soap2Context(ctx), soap2User(adminUser), soap2Credentials(auth), soap2SchemaSelectStrategy(schemaSelectStrategy)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final ContextExistsException e) {
            throw ContextExistsException_Exception.faultFor(e);
        }
    }

    @Override
    public java.lang.Integer moveContextFilestore(final Context ctx, final Filestore dstFilestoreId, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, NoSuchReasonException_Exception, InvalidDataException_Exception, OXContextException_Exception, NoSuchContextException_Exception, RemoteException_Exception, NoSuchFilestoreException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return Integer.valueOf(contextInterface.moveContextFilestore(soap2Context(ctx), soap2Filestore(dstFilestoreId), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchFilestoreException e) {
            com.openexchange.admin.soap.context.soap.NoSuchReasonException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchReasonException();
            com.openexchange.admin.soap.context.exceptions.NoSuchReasonException value = new com.openexchange.admin.soap.context.exceptions.NoSuchReasonException();
            faultDetail.setNoSuchReasonException(value);
            throw new NoSuchReasonException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchReasonException e) {
            com.openexchange.admin.soap.context.soap.NoSuchReasonException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchReasonException();
            com.openexchange.admin.soap.context.exceptions.NoSuchReasonException value = new com.openexchange.admin.soap.context.exceptions.NoSuchReasonException();
            faultDetail.setNoSuchReasonException(value);
            throw new NoSuchReasonException_Exception(e.getMessage(), faultDetail, e);
        } catch (final OXContextException e) {
            throw OXContextException_Exception.getFaultFor(e);
        }
    }

    @Override
    public java.util.List<Context> list(final java.lang.String searchPattern, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Context[] contexts = contextInterface.list(com.openexchange.java.Strings.isEmpty(searchPattern) ? "*" : searchPattern, soap2Credentials(auth));
            if (null == contexts) {
                return Collections.emptyList();
            }
            final java.util.List<Context> list = new ArrayList<Context>(contexts.length);
            for (final com.openexchange.admin.rmi.dataobjects.Context context : contexts) {
                list.add(context2Soap(context));
            }
            return list;
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public java.lang.Boolean exists(final Context ctx, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return Boolean.valueOf(contextInterface.exists(soap2Context(ctx), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public java.util.List<Context> listByDatabase(final Database db, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception, NoSuchDatabaseException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Context[] contexts = contextInterface.listByDatabase(soap2Database(db), soap2Credentials(auth));
            if (null == contexts) {
                return Collections.emptyList();
            }
            final java.util.List<Context> list = new ArrayList<Context>(contexts.length);
            for (final com.openexchange.admin.rmi.dataobjects.Context context : contexts) {
                list.add(context2Soap(context));
            }
            return list;
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchDatabaseException e) {
            com.openexchange.admin.soap.context.soap.NoSuchDatabaseException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchDatabaseException();
            com.openexchange.admin.soap.context.exceptions.NoSuchDatabaseException value = new com.openexchange.admin.soap.context.exceptions.NoSuchDatabaseException();
            faultDetail.setNoSuchDatabaseException(value);
            throw new NoSuchDatabaseException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    @Override
    public Context getData(final Context ctx, final Credentials auth) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, NoSuchContextException_Exception, RemoteException_Exception {
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return context2Soap(contextInterface.getData(soap2Context(ctx), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            com.openexchange.admin.soap.context.soap.RemoteException faultDetail = new com.openexchange.admin.soap.context.soap.RemoteException();
            com.openexchange.admin.soap.context.rmi.RemoteException value = new com.openexchange.admin.soap.context.rmi.RemoteException();
            value.setMessage(e.getMessage());
            faultDetail.setRemoteException(value);
            throw new RemoteException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidCredentialsException e) {
            com.openexchange.admin.soap.context.soap.InvalidCredentialsException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidCredentialsException();
            faultDetail.setInvalidCredentialsException(new com.openexchange.admin.soap.context.exceptions.InvalidCredentialsException());
            throw new InvalidCredentialsException_Exception(e.getMessage(), faultDetail, e);
        } catch (final NoSuchContextException e) {
            com.openexchange.admin.soap.context.soap.NoSuchContextException faultDetail = new com.openexchange.admin.soap.context.soap.NoSuchContextException();
            faultDetail.setNoSuchContextException(new com.openexchange.admin.soap.context.exceptions.NoSuchContextException());
            throw new NoSuchContextException_Exception(e.getMessage(), faultDetail, e);
        } catch (final StorageException e) {
            com.openexchange.admin.soap.context.soap.StorageException faultDetail = new com.openexchange.admin.soap.context.soap.StorageException();
            faultDetail.setStorageException(new com.openexchange.admin.soap.context.exceptions.StorageException());
            throw new StorageException_Exception(e.getMessage(), faultDetail, e);
        } catch (final InvalidDataException e) {
            com.openexchange.admin.soap.context.soap.InvalidDataException faultDetail = new com.openexchange.admin.soap.context.soap.InvalidDataException();
            com.openexchange.admin.soap.context.exceptions.InvalidDataException value = new com.openexchange.admin.soap.context.exceptions.InvalidDataException();
            value.setObjectname(e.getObjectname());
            faultDetail.setInvalidDataException(value);
            throw new InvalidDataException_Exception(e.getMessage(), faultDetail, e);
        }
    }

    private static com.openexchange.admin.rmi.dataobjects.Credentials soap2Credentials(final Credentials soapCredentials) {
        if (null == soapCredentials) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Credentials credentials = new com.openexchange.admin.rmi.dataobjects.Credentials();
        final String login = soapCredentials.getLogin();
        if (null != login) {
            credentials.setLogin(login);
        }
        final String password = soapCredentials.getPassword();
        if (null != password) {
            credentials.setPassword(password);
        }
        return credentials;
    }

    private static com.openexchange.admin.rmi.dataobjects.Quota soap2Quota(final Quota soapQuota) {
        if (null == soapQuota) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Quota quota = new com.openexchange.admin.rmi.dataobjects.Quota();
        final String m = soapQuota.getModule();
        if (null != m) {
            quota.setModule(m);
        }
        final long limit = soapQuota.getLimit();
        quota.setLimit(limit);
        return quota;
    }

    private static com.openexchange.admin.rmi.dataobjects.SchemaSelectStrategy soap2SchemaSelectStrategy(SchemaSelectStrategy schemaSelectStrategy) throws InvalidDataException_Exception {
        if (schemaSelectStrategy == null) {
            return com.openexchange.admin.rmi.dataobjects.SchemaSelectStrategy.getDefault(); // default
        }

        if (schemaSelectStrategy.getSchemaName() != null && schemaSelectStrategy.getStrategy() != null) {
            throw new InvalidDataException_Exception("Setting schema_name and schema_select_strategy at the same time is not possible.");
        }

        if (schemaSelectStrategy.getSchemaName() != null) {
            return com.openexchange.admin.rmi.dataobjects.SchemaSelectStrategy.schema(schemaSelectStrategy.getSchemaName());
        } else if (schemaSelectStrategy.getStrategy() != null) {
            if (schemaSelectStrategy.getStrategy().equals("automatic")) {
                return com.openexchange.admin.rmi.dataobjects.SchemaSelectStrategy.automatic();
            } else if (schemaSelectStrategy.getStrategy().equals("in-memory")) {
                return com.openexchange.admin.rmi.dataobjects.SchemaSelectStrategy.inMemory();
            } else {
                throw new InvalidDataException_Exception("Invalid parameter value for schema-select-strategy. Possible values: \"automatic\", \"in-memory\"");
            }
        }

        return com.openexchange.admin.rmi.dataobjects.SchemaSelectStrategy.getDefault(); // default
    }

    private static com.openexchange.admin.rmi.dataobjects.Filestore soap2Filestore(final Filestore soapFilestore) {
        if (null == soapFilestore) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Filestore filestore = new com.openexchange.admin.rmi.dataobjects.Filestore();

        Integer tmp = soapFilestore.getCurrentContexts();
        if (tmp != null) {
            filestore.setCurrentContexts(tmp);
        }

        tmp = soapFilestore.getId();
        if (tmp != null) {
            filestore.setId(tmp);
        }

        tmp = soapFilestore.getMaxContexts();
        if (tmp != null) {
            filestore.setMaxContexts(tmp);
        }

        Long l = soapFilestore.getReserved();
        if (l != null) {
            filestore.setReserved(l);
        }

        l = soapFilestore.getSize();
        if (l != null) {
            filestore.setSize(l);
        }

        final String s = soapFilestore.getUrl();
        if (s != null) {
            filestore.setUrl(s);
        }

        l = soapFilestore.getUsed();
        if (l != null) {
            filestore.setUsed(l);
        }

        return filestore;
    }

    private static final Pattern URL_PATTERN = Pattern.compile("^(.*?://)?(.*?)(:(.*?))?$");

    private static com.openexchange.admin.rmi.dataobjects.User soap2User(final User soapUser) {
        if (null == soapUser) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.User user = new com.openexchange.admin.rmi.dataobjects.User();

        final Boolean guiSpamFilterEnabled = soapUser.isGuiSpamFilterEnabled();
        if (null != guiSpamFilterEnabled) {
            user.setGui_spam_filter_enabled(guiSpamFilterEnabled);
        }

        if (null != soapUser.getAliases()) {
            for (String alias : soapUser.getAliases()) {
                if (null != alias) {
                    user.addAlias(alias);
                }
            }
        }

        final XMLGregorianCalendar anniversary = soapUser.getAnniversary();
        if (null != anniversary) {
            final GregorianCalendar gregorianCalendar = anniversary.toGregorianCalendar();

            final GregorianCalendar anniversaryCal = new GregorianCalendar(TimeZone.getTimeZone("UTC"));
            anniversaryCal.clear();
            anniversaryCal.set(Calendar.YEAR, gregorianCalendar.get(Calendar.YEAR));
            anniversaryCal.set(Calendar.MONTH, gregorianCalendar.get(Calendar.MONTH));
            anniversaryCal.set(Calendar.DAY_OF_MONTH, gregorianCalendar.get(Calendar.DAY_OF_MONTH));

            final Date date = anniversaryCal.getTime();
            user.setAnniversary(date);
        }

        final String assistantName = soapUser.getAssistantName();
        if (null != assistantName) {
            user.setAssistant_name(assistantName);
        }

        final XMLGregorianCalendar birthday = soapUser.getBirthday();
        if (null != birthday) {
            final GregorianCalendar gregorianCalendar = birthday.toGregorianCalendar();

            final GregorianCalendar birthdayCal = new GregorianCalendar(TimeZone.getTimeZone("UTC"));
            birthdayCal.clear();
            birthdayCal.set(Calendar.YEAR, gregorianCalendar.get(Calendar.YEAR));
            birthdayCal.set(Calendar.MONTH, gregorianCalendar.get(Calendar.MONTH));
            birthdayCal.set(Calendar.DAY_OF_MONTH, gregorianCalendar.get(Calendar.DAY_OF_MONTH));

            final Date date = birthdayCal.getTime();
            user.setBirthday(date);
        }

        String tmp = soapUser.getBranches();
        if (tmp != null) {
            user.setBranches(tmp);
        }

        tmp = soapUser.getBusinessCategory();
        if (tmp != null) {
            user.setBusiness_category(tmp);
        }

        tmp = soapUser.getCategories();
        if (tmp != null) {
            user.setCategories(tmp);
        }

        tmp = soapUser.getCellularTelephone1();
        if (tmp != null) {
            user.setCellular_telephone1(tmp);
        }

        tmp = soapUser.getCellularTelephone2();
        if (tmp != null) {
            user.setCellular_telephone2(tmp);
        }

        tmp = soapUser.getCityBusiness();
        if (tmp != null) {
            user.setCity_business(tmp);
        }

        tmp = soapUser.getCityHome();
        if (tmp != null) {
            user.setCity_home(tmp);
        }

        tmp = soapUser.getCityOther();
        if (tmp != null) {
            user.setCity_other(tmp);
        }

        tmp = soapUser.getCommercialRegister();
        if (tmp != null) {
            user.setCommercial_register(tmp);
        }

        tmp = soapUser.getCompany();
        if (tmp != null) {
            user.setCompany(tmp);
        }

        tmp = soapUser.getCountryBusiness();
        if (tmp != null) {
            user.setCountry_business(tmp);
        }

        tmp = soapUser.getCountryHome();
        if (tmp != null) {
            user.setCountry_home(tmp);
        }

        tmp = soapUser.getCountryOther();
        if (tmp != null) {
            user.setCountry_other(tmp);
        }

        tmp = soapUser.getDefaultSenderAddress();
        if (tmp != null) {
            user.setDefaultSenderAddress(tmp);
        }

        tmp = soapUser.getDepartment();
        if (tmp != null) {
            user.setDepartment(tmp);
        }

        tmp = soapUser.getDisplayName();
        if (tmp != null) {
            user.setDisplay_name(tmp);
        }

        tmp = soapUser.getEmail1();
        if (tmp != null) {
            user.setEmail1(tmp);
        }

        tmp = soapUser.getEmail2();
        if (tmp != null) {
            user.setEmail2(tmp);
        }

        tmp = soapUser.getEmail3();
        if (tmp != null) {
            user.setEmail3(tmp);
        }

        tmp = soapUser.getEmployeeType();
        if (tmp != null) {
            user.setEmployeeType(tmp);
        }

        tmp = soapUser.getFaxBusiness();
        if (tmp != null) {
            user.setFax_business(tmp);
        }

        tmp = soapUser.getFaxHome();
        if (tmp != null) {
            user.setFax_home(tmp);
        }

        tmp = soapUser.getFaxOther();
        if (tmp != null) {
            user.setFax_other(tmp);
        }

        Integer itg = soapUser.getFolderTree();
        if (itg != null) {
            user.setFolderTree(itg);
        }

        tmp = soapUser.getGivenName();
        if (tmp != null) {
            user.setGiven_name(tmp);
        }

        itg = soapUser.getId();
        if (itg != null) {
            user.setId(itg);
        }

        tmp = soapUser.getImapLogin();
        if (tmp != null) {
            user.setImapLogin(tmp);
        }

        tmp = soapUser.getImapServer();
        if (tmp != null) {
            user.setImapServer(tmp);
        }

        Integer i = soapUser.getImapPort();
        if (i != null) {
            final String s = user.getImapServerString();
            if (!com.openexchange.java.Strings.isEmpty(s)) {
                try {
                    final URIDefaults defaults = URIDefaults.IMAP;
                    final URI uri = URIParser.parse(s, defaults);
                    final int port = i.intValue();
                    final URI newUri = new URI(defaults.getSSLPort() == port ? defaults.getSSLProtocol() : defaults.getProtocol(), null, uri.getHost(), port, null, null, null);
                    user.setImapServer(newUri.toString());
                } catch (final URISyntaxException e) {
                    final Logger logger = org.slf4j.LoggerFactory.getLogger(OXContextServicePortTypeImpl.class);
                    logger.warn("The IMAP URL {} is invalid: {}", s, e.getMessage());

                    // Retry manually
                    final Matcher matcher = URL_PATTERN.matcher(s);
                    if (matcher.matches()) {
                        final StringBuilder sb = new StringBuilder(32);
                        for (int j = 1; j <= 3; j++) {
                            switch (j) {
                                case 1: {
                                    final String schema = matcher.group(1);
                                    if (null != schema) {
                                        sb.append(schema);
                                    }
                                }
                                    break;
                                case 2:
                                    sb.append(matcher.group(2));
                                    break;
                                default:
                                    break;
                            }
                        }
                        sb.append(':').append(i);
                        user.setImapServer(sb.toString());
                    }
                }
            }
        }

        tmp = soapUser.getInfo();
        if (tmp != null) {
            user.setInfo(tmp);
        }

        tmp = soapUser.getInstantMessenger1();
        if (tmp != null) {
            user.setInstant_messenger1(tmp);
        }

        tmp = soapUser.getInstantMessenger2();
        if (tmp != null) {
            user.setInstant_messenger2(tmp);
        }

        tmp = soapUser.getLanguage();
        if (tmp != null) {
            user.setLanguage(tmp);
        }

        tmp = soapUser.getMailFolderConfirmedHamName();
        if (tmp != null) {
            user.setMail_folder_confirmed_ham_name(tmp);
        }

        tmp = soapUser.getMailFolderConfirmedSpamName();
        if (tmp != null) {
            user.setMail_folder_confirmed_spam_name(tmp);
        }

        tmp = soapUser.getMailFolderDraftsName();
        if (tmp != null) {
            user.setMail_folder_drafts_name(tmp);
        }

        tmp = soapUser.getMailFolderSentName();
        if (tmp != null) {
            user.setMail_folder_sent_name(tmp);
        }

        tmp = soapUser.getMailFolderSpamName();
        if (tmp != null) {
            user.setMail_folder_spam_name(tmp);
        }

        tmp = soapUser.getMailFolderTrashName();
        if (tmp != null) {
            user.setMail_folder_trash_name(tmp);
        }

        tmp = soapUser.getMailFolderArchiveFullName();
        if (tmp != null) {
            user.setMail_folder_archive_full_name(tmp);
        }

        Boolean mailEnabled = soapUser.isMailenabled();
        if (null != mailEnabled) {
            user.setMailenabled(mailEnabled);
        }
        tmp = soapUser.getManagerName();
        if (tmp != null) {
            user.setManager_name(tmp);
        }

        tmp = soapUser.getMaritalStatus();
        if (tmp != null) {
            user.setMarital_status(tmp);
        }

        tmp = soapUser.getMiddleName();
        if (tmp != null) {
            user.setMiddle_name(tmp);
        }

        tmp = soapUser.getName();
        if (tmp != null) {
            user.setName(tmp);
        }

        tmp = soapUser.getNickname();
        if (tmp != null) {
            user.setNickname(tmp);
        }

        tmp = soapUser.getNote();
        if (tmp != null) {
            user.setNote(tmp);
        }

        tmp = soapUser.getNumberOfChildren();
        if (tmp != null) {
            user.setNumber_of_children(tmp);
        }

        tmp = soapUser.getNumberOfEmployee();
        if (tmp != null) {
            user.setNumber_of_employee(tmp);
        }

        tmp = soapUser.getPassword();
        if (tmp != null) {
            user.setPassword(tmp);
        }

        tmp = soapUser.getPasswordMech();
        if (tmp != null) {
            user.setPasswordMech(tmp);
        }

        tmp = soapUser.getPosition();
        if (tmp != null) {
            user.setPosition(tmp);
        }

        tmp = soapUser.getPostalCodeBusiness();
        if (tmp != null) {
            user.setPostal_code_business(tmp);
        }

        tmp = soapUser.getPostalCodeHome();
        if (tmp != null) {
            user.setPostal_code_home(tmp);
        }

        tmp = soapUser.getPostalCodeOther();
        if (tmp != null) {
            user.setPostal_code_other(tmp);
        }

        tmp = soapUser.getPrimaryEmail();
        if (tmp != null) {
            user.setPrimaryEmail(tmp);
        }

        tmp = soapUser.getProfession();
        if (tmp != null) {
            user.setProfession(tmp);
        }

        tmp = soapUser.getRoomNumber();
        if (tmp != null) {
            user.setRoom_number(tmp);
        }

        tmp = soapUser.getSalesVolume();
        if (tmp != null) {
            user.setSales_volume(tmp);
        }

        tmp = soapUser.getSmtpServer();
        if (tmp != null) {
            user.setSmtpServer(tmp);
        }

        i = soapUser.getSmtpPort();
        if (i != null) {
            final String s = user.getSmtpServerString();
            if (!com.openexchange.java.Strings.isEmpty(s)) {
                try {
                    final URIDefaults defaults = URIDefaults.SMTP;
                    final URI uri = URIParser.parse(s, defaults);
                    final int port = i.intValue();
                    final URI newUri = new URI(defaults.getSSLPort() == port ? defaults.getSSLProtocol() : defaults.getProtocol(), null, uri.getHost(), port, null, null, null);
                    user.setSmtpServer(newUri.toString());
                } catch (final URISyntaxException e) {
                    final Logger logger = org.slf4j.LoggerFactory.getLogger(OXContextServicePortTypeImpl.class);
                    logger.warn("The SMTP URL {} is invalid: {}", s, e.getMessage());

                    // Retry manually
                    final Matcher matcher = URL_PATTERN.matcher(s);
                    if (matcher.matches()) {
                        final StringBuilder sb = new StringBuilder(32);
                        for (int j = 1; j <= 3; j++) {
                            switch (j) {
                                case 1: {
                                    final String schema = matcher.group(1);
                                    if (null != schema) {
                                        sb.append(schema);
                                    }
                                }
                                    break;
                                case 2:
                                    sb.append(matcher.group(2));
                                    break;
                                default:
                                    break;
                            }
                        }
                        sb.append(':').append(i);
                        user.setSmtpServer(sb.toString());
                    }
                }
            }
        }

        tmp = soapUser.getSpouseName();
        if (tmp != null) {
            user.setSpouse_name(tmp);
        }

        tmp = soapUser.getStateBusiness();
        if (tmp != null) {
            user.setState_business(tmp);
        }

        tmp = soapUser.getStateHome();
        if (tmp != null) {
            user.setState_home(tmp);
        }

        tmp = soapUser.getStateOther();
        if (tmp != null) {
            user.setState_other(tmp);
        }

        tmp = soapUser.getStreetBusiness();
        if (tmp != null) {
            user.setStreet_business(tmp);
        }

        tmp = soapUser.getStreetHome();
        if (tmp != null) {
            user.setStreet_home(tmp);
        }

        tmp = soapUser.getStreetOther();
        if (tmp != null) {
            user.setStreet_other(tmp);
        }

        tmp = soapUser.getSuffix();
        if (tmp != null) {
            user.setSuffix(tmp);
        }

        tmp = soapUser.getSurName();
        if (tmp != null) {
            user.setSur_name(tmp);
        }

        tmp = soapUser.getTaxId();
        if (tmp != null) {
            user.setTax_id(tmp);
        }

        tmp = soapUser.getTelephoneAssistant();
        if (tmp != null) {
            user.setTelephone_assistant(tmp);
        }

        tmp = soapUser.getTelephoneBusiness1();
        if (tmp != null) {
            user.setTelephone_business1(tmp);
        }

        tmp = soapUser.getTelephoneBusiness2();
        if (tmp != null) {
            user.setTelephone_business2(tmp);
        }

        tmp = soapUser.getTelephoneCallback();
        if (tmp != null) {
            user.setTelephone_callback(tmp);
        }

        tmp = soapUser.getTelephoneCar();
        if (tmp != null) {
            user.setTelephone_car(tmp);
        }

        tmp = soapUser.getTelephoneCompany();
        if (tmp != null) {
            user.setTelephone_company(tmp);
        }

        tmp = soapUser.getTelephoneHome1();
        if (tmp != null) {
            user.setTelephone_home1(tmp);
        }

        tmp = soapUser.getTelephoneHome2();
        if (tmp != null) {
            user.setTelephone_home2(tmp);
        }

        tmp = soapUser.getTelephoneIp();
        if (tmp != null) {
            user.setTelephone_ip(tmp);
        }

        tmp = soapUser.getTelephoneIsdn();
        if (tmp != null) {
            user.setTelephone_isdn(tmp);
        }

        tmp = soapUser.getTelephoneOther();
        if (tmp != null) {
            user.setTelephone_other(tmp);
        }

        tmp = soapUser.getTelephonePager();
        if (tmp != null) {
            user.setTelephone_pager(tmp);
        }

        tmp = soapUser.getTelephonePrimary();
        if (tmp != null) {
            user.setTelephone_primary(tmp);
        }

        tmp = soapUser.getTelephoneRadio();
        if (tmp != null) {
            user.setTelephone_radio(tmp);
        }

        tmp = soapUser.getTelephoneTelex();
        if (tmp != null) {
            user.setTelephone_telex(tmp);
        }

        tmp = soapUser.getTelephoneTtytdd();
        if (tmp != null) {
            user.setTelephone_ttytdd(tmp);
        }

        tmp = soapUser.getTimezone();
        if (tmp != null) {
            user.setTimezone(tmp);
        }

        tmp = soapUser.getTitle();
        if (tmp != null) {
            user.setTitle(tmp);
        }

        itg = soapUser.getUploadFileSizeLimit();
        if (itg != null) {
            user.setUploadFileSizeLimit(itg);
        }

        itg = soapUser.getUploadFileSizeLimitPerFile();
        if (itg != null) {
            user.setUploadFileSizeLimitPerFile(itg);
        }

        tmp = soapUser.getUrl();
        if (tmp != null) {
            user.setUrl(tmp);
        }

        tmp = soapUser.getUserfield01();
        if (tmp != null) {
            user.setUserfield01(tmp);
        }

        tmp = soapUser.getUserfield02();
        if (tmp != null) {
            user.setUserfield02(tmp);
        }

        tmp = soapUser.getUserfield03();
        if (tmp != null) {
            user.setUserfield03(tmp);
        }

        tmp = soapUser.getUserfield04();
        if (tmp != null) {
            user.setUserfield04(tmp);
        }

        tmp = soapUser.getUserfield05();
        if (tmp != null) {
            user.setUserfield05(tmp);
        }

        tmp = soapUser.getUserfield06();
        if (tmp != null) {
            user.setUserfield06(tmp);
        }

        tmp = soapUser.getUserfield07();
        if (tmp != null) {
            user.setUserfield07(tmp);
        }

        tmp = soapUser.getUserfield08();
        if (tmp != null) {
            user.setUserfield08(tmp);
        }

        tmp = soapUser.getUserfield09();
        if (tmp != null) {
            user.setUserfield09(tmp);
        }

        tmp = soapUser.getUserfield10();
        if (tmp != null) {
            user.setUserfield10(tmp);
        }

        tmp = soapUser.getUserfield11();
        if (tmp != null) {
            user.setUserfield11(tmp);
        }

        tmp = soapUser.getUserfield12();
        if (tmp != null) {
            user.setUserfield12(tmp);
        }

        tmp = soapUser.getUserfield13();
        if (tmp != null) {
            user.setUserfield13(tmp);
        }

        tmp = soapUser.getUserfield14();
        if (tmp != null) {
            user.setUserfield14(tmp);
        }

        tmp = soapUser.getUserfield15();
        if (tmp != null) {
            user.setUserfield15(tmp);
        }

        tmp = soapUser.getUserfield16();
        if (tmp != null) {
            user.setUserfield16(tmp);
        }

        tmp = soapUser.getUserfield17();
        if (tmp != null) {
            user.setUserfield17(tmp);
        }

        tmp = soapUser.getUserfield18();
        if (tmp != null) {
            user.setUserfield18(tmp);
        }

        tmp = soapUser.getUserfield19();
        if (tmp != null) {
            user.setUserfield19(tmp);
        }

        tmp = soapUser.getUserfield20();
        if (tmp != null) {
            user.setUserfield20(tmp);
        }

        SOAPStringMapMap userAttributes = soapUser.getUserAttributes();
        if (null != userAttributes) {
            user.setUserAttributes(soap2MapMap(userAttributes));
        }

        return user;
    }

    private static com.openexchange.admin.rmi.dataobjects.Group soap2Group(final Group soapGroup) {
        if (null == soapGroup) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Group group = new com.openexchange.admin.rmi.dataobjects.Group();
        final String displayname = soapGroup.getDisplayname();
        if (null != displayname) {
            group.setDisplayname(displayname);
        }
        final Integer id = soapGroup.getId();
        if (null != id) {
            group.setId(id);
        }
        final List<Integer> members = soapGroup.getMembers();
        if (null != members) {
            group.setMembers(members.toArray(new Integer[0]));
        }
        final String name = soapGroup.getName();
        if (null != name) {
            group.setName(name);
        }
        return group;
    }

    private static com.openexchange.admin.rmi.dataobjects.Context soap2Context(final Context soapContext) {
        if (null == soapContext) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Context ret = new com.openexchange.admin.rmi.dataobjects.Context();

        Long lng = soapContext.getAverageSize();
        if (null != lng) {
            ret.setAverage_size(lng);
        }

        final Boolean enabled = soapContext.isEnabled();
        if (null != enabled) {
            ret.setEnabled(enabled);
        }

        final String s = soapContext.getFilestoreName();
        if (null != s) {
            ret.setFilestore_name(s);
        }

        Integer itg = soapContext.getFilestoreId();
        if (null != itg) {
            ret.setFilestoreId(itg);
        }

        itg = soapContext.getId();
        ret.setId(itg);

        if (null != soapContext.getLoginMappings()) {
            for (String loginMapping : soapContext.getLoginMappings()) {
                if (null != loginMapping) {
                    ret.addLoginMapping(loginMapping);
                }
            }
        }

        lng = soapContext.getMaxQuota();
        if (null != lng) {
            ret.setMaxQuota(lng);
        }

        final String name = soapContext.getName();
        if (null != name) {
            ret.setName(name);
        }

        final Long usedQuota = soapContext.getUsedQuota();
        if (null != usedQuota) {
            ret.setUsedQuota(usedQuota);
        }

        final Database readDatabase = soapContext.getReadDatabase();
        if (null != readDatabase) {
            ret.setReadDatabase(soap2Database(readDatabase));
        }

        final Database writeDatabase = soapContext.getWriteDatabase();
        if (null != writeDatabase) {
            ret.setWriteDatabase(soap2Database(writeDatabase));
        }

        final SOAPStringMapMap userAttributes = soapContext.getUserAttributes();
        if (null != userAttributes) {
            ret.setUserAttributes(soap2MapMap(userAttributes));
        }
        return ret;
    }

    private static com.openexchange.admin.rmi.dataobjects.Database soap2Database(final Database soapDatabase) {
        if (null == soapDatabase) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Database ret = new com.openexchange.admin.rmi.dataobjects.Database();

        Integer itg = soapDatabase.getClusterWeight();
        if (itg != null) {
            ret.setClusterWeight(itg);
        }

        itg = soapDatabase.getCurrentUnits();
        if (itg != null) {
            ret.setCurrentUnits(itg);
        }

        String tmp = soapDatabase.getDriver();
        if (tmp != null) {
            ret.setDriver(tmp);
        }

        itg = soapDatabase.getId();
        if (itg != null) {
            ret.setId(itg);
        }

        tmp = soapDatabase.getLogin();
        if (tmp != null) {
            ret.setLogin(tmp);
        }

        Boolean bool = soapDatabase.isMaster();
        if (null != bool) {
            ret.setMaster(bool);
        }

        itg = soapDatabase.getMasterId();
        if (itg != null) {
            ret.setMasterId(itg);
        }

        itg = soapDatabase.getMaxUnits();
        if (itg != null) {
            ret.setMaxUnits(itg);
        }

        tmp = soapDatabase.getName();
        if (tmp != null) {
            ret.setName(tmp);
        }

        tmp = soapDatabase.getPassword();
        if (tmp != null) {
            ret.setPassword(tmp);
        }

        itg = soapDatabase.getPoolHardLimit();
        if (itg != null) {
            ret.setPoolHardLimit(itg);
        }

        itg = soapDatabase.getPoolInitial();
        if (itg != null) {
            ret.setPoolInitial(itg);
        }

        itg = soapDatabase.getPoolMax();
        if (itg != null) {
            ret.setPoolMax(itg);
        }

        itg = soapDatabase.getReadId();
        if (itg != null) {
            ret.setRead_id(itg);
        }

        tmp = soapDatabase.getScheme();
        if (tmp != null) {
            ret.setScheme(tmp);
        }

        tmp = soapDatabase.getUrl();
        if (tmp != null) {
            ret.setUrl(tmp);
        }
        return ret;
    }

    private static Map<String, Map<String, String>> soap2MapMap(final SOAPStringMapMap soapStringMapMap) {
        if (null == soapStringMapMap) {
            return null;
        }
        final java.util.List<SOAPMapEntry> entries = soapStringMapMap.getEntries();
        final Map<String, Map<String, String>> map = new HashMap<String, Map<String, String>>(entries.size());
        for (final SOAPMapEntry soapMapEntry : entries) {
            if (null != soapMapEntry) {
                map.put(soapMapEntry.getKey(), soap2Map(soapMapEntry.getValue()));
            }
        }
        return map;
    }

    private static Map<String, String> soap2Map(final SOAPStringMap soapStringMap) {
        if (null == soapStringMap) {
            return null;
        }
        final java.util.List<Entry> entries = soapStringMap.getEntries();
        final Map<String, String> map = new HashMap<String, String>(entries.size());
        for (final Entry entry : entries) {
            if (null != entry) {
                map.put(entry.getKey(), entry.getValue());
            }
        }
        return map;
    }

    private static com.openexchange.admin.rmi.dataobjects.UserModuleAccess soap2ModuleAccess(final UserModuleAccess soapModuleAccess) {
        if (null == soapModuleAccess) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.UserModuleAccess moduleAccess = new com.openexchange.admin.rmi.dataobjects.UserModuleAccess();
        final Boolean activeSync = soapModuleAccess.isActiveSync();
        if (null != activeSync) {
            moduleAccess.setActiveSync(booleanValue(activeSync));
        }

        final Boolean calendar = soapModuleAccess.isCalendar();
        if (null != calendar) {
            moduleAccess.setCalendar(booleanValue(calendar));
        }

        Boolean tmp = soapModuleAccess.isCollectEmailAddresses();
        if (tmp != null) {
            moduleAccess.setCollectEmailAddresses(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isContacts();
        if (tmp != null) {
            moduleAccess.setContacts(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isDelegateTask();
        if (tmp != null) {
            moduleAccess.setDelegateTask(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isDeniedPortal();
        if (tmp != null) {
            moduleAccess.setDeniedPortal(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isEditGroup();
        if (tmp != null) {
            moduleAccess.setEditGroup(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isEditPassword();
        if (tmp != null) {
            moduleAccess.setEditPassword(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isEditPublicFolders();
        if (tmp != null) {
            moduleAccess.setEditPublicFolders(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isEditResource();
        if (tmp != null) {
            moduleAccess.setEditResource(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isGlobalAddressBookDisabled();
        if (tmp != null) {
            moduleAccess.setGlobalAddressBookDisabled(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isIcal();
        if (tmp != null) {
            moduleAccess.setIcal(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isInfostore();
        if (tmp != null) {
            moduleAccess.setInfostore(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isMultipleMailAccounts();
        if (tmp != null) {
            moduleAccess.setMultipleMailAccounts(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isOLOX20();
        if (tmp != null) {
            moduleAccess.setOLOX20(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isPublication();
        if (tmp != null) {
            moduleAccess.setPublication(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isPublicFolderEditable();
        if (tmp != null) {
            moduleAccess.setPublicFolderEditable(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isReadCreateSharedFolders();
        if (tmp != null) {
            moduleAccess.setReadCreateSharedFolders(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isSubscription();
        if (tmp != null) {
            moduleAccess.setSubscription(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isSyncml();
        if (tmp != null) {
            moduleAccess.setSyncml(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isTasks();
        if (tmp != null) {
            moduleAccess.setTasks(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isUSM();
        if (tmp != null) {
            moduleAccess.setUSM(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isVcard();
        if (tmp != null) {
            moduleAccess.setVcard(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isWebdav();
        if (tmp != null) {
            moduleAccess.setWebdav(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isWebdavXml();
        if (tmp != null) {
            moduleAccess.setWebdavXml(booleanValue(tmp));
        }

        tmp = soapModuleAccess.isWebmail();
        if (tmp != null) {
            moduleAccess.setWebmail(booleanValue(tmp));
        }
        return moduleAccess;
    }

    private static boolean booleanValue(final Boolean b) {
        return null == b ? false : b.booleanValue();
    }

    private static UserModuleAccess moduleAccess2Soap(final com.openexchange.admin.rmi.dataobjects.UserModuleAccess moduleAccess) {
        if (null == moduleAccess) {
            return null;
        }
        final UserModuleAccess soapModuleAccess = new UserModuleAccess();
        soapModuleAccess.setActiveSync(Boolean.valueOf(moduleAccess.isActiveSync()));
        soapModuleAccess.setCalendar(Boolean.valueOf(moduleAccess.getCalendar()));
        soapModuleAccess.setCollectEmailAddresses(Boolean.valueOf(moduleAccess.isCollectEmailAddresses()));
        soapModuleAccess.setContacts(Boolean.valueOf(moduleAccess.getContacts()));
        soapModuleAccess.setDelegateTask(Boolean.valueOf(moduleAccess.getDelegateTask()));
        soapModuleAccess.setDeniedPortal(Boolean.valueOf(moduleAccess.isDeniedPortal()));
        soapModuleAccess.setEditGroup(Boolean.valueOf(moduleAccess.getEditGroup()));
        soapModuleAccess.setEditPassword(Boolean.valueOf(moduleAccess.getEditPassword()));
        soapModuleAccess.setEditPublicFolders(Boolean.valueOf(moduleAccess.getEditPublicFolders()));
        soapModuleAccess.setEditResource(Boolean.valueOf(moduleAccess.getEditResource()));
        soapModuleAccess.setGlobalAddressBookDisabled(Boolean.valueOf(moduleAccess.isGlobalAddressBookDisabled()));
        soapModuleAccess.setIcal(Boolean.valueOf(moduleAccess.getIcal()));
        soapModuleAccess.setInfostore(Boolean.valueOf(moduleAccess.getInfostore()));
        soapModuleAccess.setMultipleMailAccounts(Boolean.valueOf(moduleAccess.isMultipleMailAccounts()));
        soapModuleAccess.setOLOX20(Boolean.valueOf(moduleAccess.isOLOX20()));
        soapModuleAccess.setPublication(Boolean.valueOf(moduleAccess.isPublication()));
        soapModuleAccess.setPublicFolderEditable(Boolean.valueOf(moduleAccess.isPublicFolderEditable()));
        soapModuleAccess.setReadCreateSharedFolders(Boolean.valueOf(moduleAccess.getReadCreateSharedFolders()));
        soapModuleAccess.setSubscription(Boolean.valueOf(moduleAccess.isSubscription()));
        soapModuleAccess.setSyncml(Boolean.valueOf(moduleAccess.getSyncml()));
        soapModuleAccess.setTasks(Boolean.valueOf(moduleAccess.getTasks()));
        soapModuleAccess.setUSM(Boolean.valueOf(moduleAccess.isUSM()));
        soapModuleAccess.setVcard(Boolean.valueOf(moduleAccess.getVcard()));
        soapModuleAccess.setWebdav(Boolean.valueOf(moduleAccess.getWebdav()));
        soapModuleAccess.setWebdavXml(Boolean.valueOf(moduleAccess.getWebdavXml()));
        soapModuleAccess.setWebmail(Boolean.valueOf(moduleAccess.getWebmail()));
        return soapModuleAccess;
    }

    private static Quota quota2Soap(final com.openexchange.admin.rmi.dataobjects.Quota quota) {
        if (null == quota) {
            return null;
        }
        final Quota soapQuota = new Quota();
        soapQuota.setModule(quota.getModule());
        soapQuota.setLimit(quota.getLimit());
        return soapQuota;
    }

    private static Context context2Soap(final com.openexchange.admin.rmi.dataobjects.Context context) {
        if (null == context) {
            return null;
        }
        final Context soapContext = new Context();
        soapContext.setAverageSize(context.getAverage_size());
        soapContext.setEnabled(context.getEnabled());
        soapContext.setFilestoreId(context.getFilestoreId());
        soapContext.setFilestoreName(context.getFilestore_name());
        final HashSet<String> lmappings = context.getLoginMappings();
        if (null != lmappings && !lmappings.isEmpty()) {
            soapContext.setLoginMappings(new ArrayList<String>(lmappings));
        }
        soapContext.setId(context.getId());
        soapContext.setMaxQuota(context.getMaxQuota());
        soapContext.setName(context.getName());
        soapContext.setReadDatabase(database2Soap(context.getReadDatabase()));
        soapContext.setUsedQuota(context.getUsedQuota());
        soapContext.setUserAttributes(mapmap2Soap(context.getUserAttributes()));
        soapContext.setWriteDatabase(database2Soap(context.getWriteDatabase()));
        return soapContext;
    }

    private static Database database2Soap(final com.openexchange.admin.rmi.dataobjects.Database database) {
        if (null == database) {
            return null;
        }
        final Database soapDatabase = new Database();
        soapDatabase.setClusterWeight(database.getClusterWeight());
        soapDatabase.setCurrentUnits(database.getCurrentUnits());
        soapDatabase.setDriver(database.getDriver());
        soapDatabase.setId(database.getId());
        soapDatabase.setLogin(database.getLogin());
        soapDatabase.setMaster(database.getMaster());
        soapDatabase.setMasterId(database.getMasterId());
        soapDatabase.setMaxUnits(database.getMaxUnits());
        soapDatabase.setName(database.getName());
        soapDatabase.setPassword(database.getPassword());
        soapDatabase.setPoolHardLimit(database.getPoolHardLimit());
        soapDatabase.setPoolInitial(database.getPoolInitial());
        soapDatabase.setPoolMax(database.getPoolMax());
        soapDatabase.setReadId(database.getRead_id());
        soapDatabase.setScheme(database.getScheme());
        soapDatabase.setUrl(database.getUrl());
        return soapDatabase;
    }

    private static SOAPStringMapMap mapmap2Soap(final Map<String, Map<String, String>> mapmap) {
        if (null == mapmap) {
            return null;
        }
        final SOAPStringMapMap soapMapMap = new SOAPStringMapMap();
        final java.util.List<SOAPMapEntry> entries = new ArrayList<SOAPMapEntry>(mapmap.size());
        for (final Map.Entry<String, Map<String, String>> mapmapEntry : mapmap.entrySet()) {
            final SOAPMapEntry mapEntry = new SOAPMapEntry();
            mapEntry.setKey(mapmapEntry.getKey());
            mapEntry.setValue(map2Soap(mapmapEntry.getValue()));
            entries.add(mapEntry);
        }
        soapMapMap.setEntries(entries);
        return soapMapMap;
    }

    private static SOAPStringMap map2Soap(final Map<String, String> map) {
        if (null == map) {
            return null;
        }
        final SOAPStringMap soapMap = new SOAPStringMap();
        final java.util.List<Entry> entries = new ArrayList<Entry>(map.size());
        for (final Map.Entry<String, String> mapEntry : map.entrySet()) {
            final Entry entry = new Entry();
            entry.setKey(mapEntry.getKey());
            entry.setValue(mapEntry.getValue());
            entries.add(entry);
        }
        soapMap.setEntries(entries);
        return soapMap;
    }
}
