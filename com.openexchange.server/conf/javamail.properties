## This '.properties' file contains all known JavaMail properties structured by sections:
## JavaMail, JavaMail API System Properties, SMTP, IMAP, POP3 & Internet
## All configurations done in this file will overwrite the ones set and used before, so modify it with care!




## ------------------------------------ JavaMail Properties -----------------------------------------


## The initial debug mode. Default is false.
## boolean
#mail.debug=

## The return email address of the current user, used by the InternetAddress method getLocalAddress.
## String
#mail.from= 	

## The MimeMessage class uses the InternetAddress method parseHeader to parse headers in messages.
## This property controls the strict flag passed to the parseHeader method. The default is true.
## boolean
#mail.mime.address.strict= 	

## The default host name of the mail server for both Stores and Transports. Used if the mail.protocol.host property isn't set.
## String
#mail.host=

## Specifies the default message access protocol. The Session method getStore() returns a Store object that implements this protocol.
## By default the first Store provider in the configuration files is returned.
## String
#mail.store.protocol=

##Specifies the default message access protocol. The Session method getTransport() returns a Transport object that implements this protocol.
## By default the first Transport provider in the configuration files is returned.
## String
#mail.transport.protocol=

## The default user name to use when connecting to the mail server. Used if the mail.protocol.user property isn't set.
## String
#mail.user=

## Specifies the fully qualified class name of the provider for the specified protocol.
## Used in cases where more than one provider for a given protocol exists; this property can be used to specify which provider to use by default.
## The provider must still be listed in a configuration file.
## String
#mail.[protocol].class=

## The host name of the mail server for the specified protocol. Overrides the mail.host property.
## String
#mail.[protocol].host=

## The port number of the mail server for the specified protocol. If not specified the protocol's default port number is used.
## int
#mail.[protocol].port=

## The user name to use when connecting to mail servers using the specified protocol. Overrides the mail.user property.
## String
#mail.[protocol].user=




## ------------ The JavaMail API supports the following System properties, which may be set using the System method setProperty --------------

## The default charset to be used by JavaMail. If not set (the normal case), the standard J2SE file.encoding System property is used.
## This allows applications to specify a default character set for sending messages that's different than the character set used for files stored on the system.
## This is common on Japanese systems.
## String
#mail.mime.charset=

## RFC 2047 requires that encoded text start at the beginning of a whitespace separated word.
## Some mailers, especially Japanese mailers, improperly encode text and include encoded text in the middle of words.
## This property controls whether JavaMail will attempt to decode such incorrectly encoded text.
## The default is true, meaning that JavaMail wil not attempt to decode such improperly decoded text.
## boolean
#mail.mime.decodetext.strict=

## When choosing an encoding for the data of a message, JavaMail assumes that any of CR, LF, or CRLF are valid line
## terminators in message parts that contain only printable ASCII characters, even if the part is not a MIME text type.
## It's common, especially on UNIX systems, for data of MIME type application/octet-stream (for example) to really be
## textual data that should be transmitted with the encoding rules for MIME text. In rare cases, such pure ASCII text
## may in fact be binary data in which the CR and LF characters must be preserved exactly.
## If this property is set to true, JavaMail will consider a lone CR or LF in a body part that's not a MIME text type to
## indicate that the body part needs to be encoded. The default is false.
## boolean
#mail.mime.encodeeol.strict=




## ----------------------------------------- JavaMail SMTP Properties -----------------------------------------

## Default user name for SMTP.
## String
#mail.smtp.user=

## The SMTP server to connect to.
## String
#mail.smtp.host=

## The SMTP server port to connect to, if the connect() method doesn't explicitly specify one. Defaults to 25.
## int
#mail.smtp.port=

## Socket connection timeout value in milliseconds. Default is infinite timeout.
## int
#mail.smtp.connectiontimeout=

## Socket I/O timeout value in milliseconds. Default is infinite timeout.
## int
# mail.smtp.timeout=

## Email address to use for SMTP MAIL command. This sets the envelope return address.
## Defaults to msg.getFrom() or InternetAddress.getLocalAddress(). NOTE: mail.smtp.user was previously used for this. 
## String
# mail.smtp.from=

## Local host name. Defaults to InetAddress.getLocalHost().getHostName().
## Should not normally need to be set if your JDK and your name service are configured properly.
## String 
#mail.smtp.localhost=

## If false, do not attempt to sign on with the EHLO command. Defaults to true.
## Normally failure of the EHLO command will fallback to the HELO command; this property exists only for servers that
## don't fail EHLO properly or don't implement EHLO properly.
## boolean 
#mail.smtp.ehlo=

## If true, attempt to authenticate the user using the AUTH command. Defaults to false.
## boolean
#mail.smtp.auth=

## The NOTIFY option to the RCPT command. Either NEVER, or some combination of SUCCESS, FAILURE, and DELAY (separated by commas).
## String 
#mail.smtp.dsn.notify= 	

## The RET option to the MAIL command. Either FULL or HDRS.
## String
#mail.smtp.dsn.ret=

## If set to true, and the server supports the 8BITMIME extension, text parts of messages that use the "quoted-printable" or "base64"
## encodings are converted to use "8bit" encoding if they follow the RFC2045 rules for 8bit text. 
## boolean
#mail.smtp.allow8bitmime=

## If set to true, and a message has some valid and some invalid addresses, send the message anyway, reporting the partial failure with
## a SendFailedException. If set to false (the default), the message is not sent to any of the recipients if there is an invalid recipient
## address.
## boolean 
#mail.smtp.sendpartial=

## The realm to use with DIGEST-MD5 authentication.
## String
#mail.smtp.saslrealm=

## If set to true, causes the transport to wait for the response to the QUIT command.
## If set to false (the default), the QUIT command is sent and the connection is immediately closed.
## (NOTE: The default may change in the next release.)
## boolean
#mail.smtp.quitwait= 	

## If set to true, causes the transport to include an SMTPAddressSucceededException for each address that is successful.
## Note also that this will cause a SendFailedException to be thrown from the sendMessage method of SMTPTransport even if all addresses were
## correct and the message was sent successfully.
## boolean
#mail.smtp.reportsuccess=

## Extension string to append to the MAIL command. The extension string can be used to specify standard SMTP service extensions as well as vendor-specific extensions.
## Typically the application should use the SMTPTransport method supportsExtension to verify that the server supports the desired service extension.
## See RFC 1869 and other RFCs that define specific extensions.
## String
#mail.smtp.mailextension=

## If set to true, use the RSET command instead of the NOOP command in the isConnected method.
## In some cases sendmail will respond slowly after many NOOP commands; use of RSET avoids this sendmail issue. Defaults to false.
## boolean
#mail.smtp.userset=




## -------------------------------------- JavaMail IMAP Properties --------------------------------------------


## Default user name for IMAP.
## String
#mail.imap.user=

## The IMAP server to connect to.
## String
#mail.imap.host=

## The IMAP server port to connect to, if the connect() method doesn't explicitly specify one. Defaults to 143.
## int
#mail.imap.port=

## Controls whether the IMAP partial-fetch capability should be used. Defaults to true.
## boolean
#mail.imap.partialfetch=

## Partial fetch size in bytes. Defaults to 16K.
## int
#mail.imap.fetchsize=

## Socket connection timeout value in milliseconds. Default is infinite timeout.
## int
#mail.imap.connectiontimeout=

## Socket I/O timeout value in milliseconds. Default is infinite timeout.
## int
#mail.imap.timeout=

## Timeout value in milliseconds for cache of STATUS command response. Default is 1000 (1 second). Zero disables cache.
## int
#mail.imap.statuscachetimeout=

## Maximum size of a message to buffer in memory when appending to an IMAP folder.
## If not set, or set to -1, there is no maximum and all messages are buffered. If set to 0, no messages are buffered.
## If set to (e.g.) 8192, messages of 8K bytes or less are buffered, larger messages are not buffered.
## Buffering saves cpu time at the expense of short term memory usage. If you commonly append very large messages to
## IMAP mailboxes you might want to set this to a moderate value (1M or less).
## int
#mail.imap.appendbuffersize=

## Maximum number of available connections in the connection pool. Default is 1.
## int
#mail.imap.connectionpoolsize=

## Timeout value in milliseconds for connection pool connections. Default is 45000 (45 seconds).
## int
#mail.imap.connectionpooltimeout=

## Flag to indicate whether to use a dedicated store connection for store commands. Default is false.
## boolean
#mail.imap.separatestoreconnection=

## If false, attempts to open a folder read/write will fail if the SELECT command succeeds but indicates that the folder is READ-ONLY.
## This sometimes indicates that the folder contents can'tbe changed, but the flags are per-user and can be changed, such as might be
## the case for public shared folders. If true, such open attempts will succeed, allowing the flags to be changed.
## The getMode method on the Folder object will return Folder.READ_ONLY in this case even though the open method specified Folder.READ_WRITE.
## Default is false. 
#mail.imap.allowreadonlyselect=

## If true, prevents use of the non-standard AUTHENTICATE LOGIN command, instead using the plain LOGIN command. Default is false.
#mail.imap.auth.login.disable=

## If true, prevents use of the AUTHENTICATE PLAIN command. Default is false.
## boolean
#mail.imap.auth.plain.disable=

## Local address (host name) to bind to when creating the IMAP socket. Defaults to the address picked by the Socket class.
## Should not normally need to be set, but useful with multi-homed hosts where it's important to pick a particular local address to bind to.
## String
#mail.imap.localaddress=

## Local port number to bind to when creating the IMAP socket. Defaults to the port number picked by the Socket class.
## int 
# mail.imap.localport=

## If set to true, attempt to use the javax.security.sasl package to choose an authentication mechanism for login. Defaults to false. 
## boolean
#mail.imap.sasl.enable=

## A space or comma separated list of SASL mechanism names to try to use.
## String
#mail.imap.sasl.mechanisms=

## The authorization ID to use in the SASL authentication. If not set, the authentication ID (user name) is used.
## String
#mail.imap.sasl.authorizationid=




## -------------------------------------- JavaMail POP3 Properties --------------------------------------------

## Default user name for POP3.
## String
#mail.pop3.user=

## Default user name for POP3.
## String
#mail.pop3.host=

## The POP3 server port to connect to, if the connect() method doesn't explicitly specify one. Defaults to 110.
## int
#mail.pop3.port=

## Socket connection timeout value in milliseconds. Default is infinite timeout.
## int
#mail.pop3.connectiontimeout=

## Socket I/O timeout value in milliseconds. Default is infinite timeout.
## int
#mail.pop3.timeout=

## Send a POP3 RSET command when closing the folder, before sending the QUIT command. Useful with POP3 servers that implicitly mark all
## messages that are read as "deleted"; this will prevent such messages from being deleted and expunged unless the client requests so.
## Default is false.
## boolean 
#mail.pop3.rsetbeforequit=

## Class name of a subclass of com.sun.mail.pop3.POP3Message. The subclass can be used to handle (for example) non-standard Content-Type headers.
## The subclass must have a public constructor of the form MyPOP3Message(Folder f, int msgno) throws MessagingException.
## String 	
#mail.pop3.message.class=

## Local address (host name) to bind to when creating the POP3 socket. Defaults to the address picked by the Socket class.
## Should not normally need to be set, but useful with multi-homed hosts where it's important to pick a particular local address to bind to.
## String
#mail.pop3.localaddress=

## Local port number to bind to when creating the POP3 socket. Defaults to the port number picked by the Socket class.
## int
#mail.pop3.localport=

## If set to true, use APOP instead of USER/PASS to login to the POP3 server, if the POP3 server supports APOP.
## APOP sends a digest of the password rather than the clear text password. Defaults to false.
## boolean
#mail.pop3.apop.enable=

## If set to true, the POP3 TOP command will not be used to fetch message headers. This is useful for POP3 servers that don't properly implement the TOP command,
## or that provide incorrect information in the TOP command results. Defaults to false.
## boolean
#mail.pop3.disabletop=

## If set to true, the headers that might have been retrieved using the POP3 TOP command will be forgotten and replaced by headers retrieved as part of the POP3 RETR command.
## Some servers, such as some version of Microsft Exchange, will return slightly different headers each time the TOP or RETR command is used.
## To allow the POP3 provider to properly parse the message content returned from the RETR command, the headers also returned by the RETR command must be used.
## Setting this property to true will cause these headers to be used, even if they differ from the headers returned previously as a result of using the TOP command.
## Defaults to false.
## boolean
#mail.pop3.forgettopheaders=




## -------------------------------------- JavaMail Maildir Properties --------------------------------------------

## Whether to auto-create specified maildir directory on maildir store connect or not. Default is false.
## boolean
#mail.store.maildir.autocreatedir=

## Whether to cache maildir folder objects or not. Default is false.
## boolean
#mail.store.maildir.cachefolders

## Whether to check quota limitations or not. Default is false.
## boolean
#mail.store.maildir.checkmessagesizebeforeappend

## Define the quota limit on STORAGE resource. Default is 0 (no restriction).
## int
#mail.store.maildir.quota.size=

## Define the quota limit on MESSAGE resource. Default is 0 (no restriction).
## int
#mail.store.maildir.quota.count=

## Whether to use a header index or not. Default is false.
## boolean
#mail.store.maildir.headerindex", "false");

## Define the maximum RFC822 message size (in bytes) for being kept in memory completely. If a message exceeds this size, its corresponding
##file is accessed with random access instead of reading file with an input stream. Default is 131072 (128KB).
## int
#mail.store.maildir.inmemorysize=

## Define the maximum number of message headers that are kept in a maildir folder's header cache. Default is 1000.
## int
#mail.store.maildir.headercachemaxsize=

## Define the maximum number of maildir folder header caches. Default is 10.
## int
#mail.store.maildir.maxnumofheadercaches=

## Define the timeout for header caches (in milliseconds), Default is 3600000 (1 hour).
## int
#mail.store.maildir.headercacheexpire=




## -------------------------------------- JavaMail Internet Properties --------------------------------------------

## The mail.mime.address.strict session property controls the parsing of address headers.
## By default, strict parsing of address headers is done. If this property is set to "false",
## strict parsing is not done and many illegal addresses that sometimes occur in real messages are allowed.
## See the InternetAddress class for details.
## boolean
#mail.mime.address.strict=

## The mail.mime.charset System property can be used to specify the default MIME charset to use for encoded words and text parts that don't
## otherwise specify a charset. Normally, the default MIME charset is derived from the default Java charset, as specified in the file.encoding
## System property. Most applications will have no need to explicitly set the default MIME charset.
## In cases where the default MIME charset to be used for mail messages is different than the charset used for files stored on the system,
## this property should be set.
## String
#mail.mime.charset=

## The mail.mime.decodetext.strict property controls decoding of MIME encoded words.
## The MIME spec requires that encoded words start at the beginning of a whitespace separated word.
## Some mailers incorrectly include encoded words in the middle of a word.
## If the mail.mime.decodetext.strict System property is set to "false", an attempt will be made to decode these illegal encoded words.
## The default is true.
## boolean
#mail.mime.decodetext.strict=

## The mail.mime.encodeeol.strict property controls the choice of Content-Transfer-Encoding for MIME parts that are not of type "text".
## Often such parts will contain textual data for which an encoding that allows normal end of line conventions is appropriate.
## In rare cases, such a part will appear to contain entirely textual data, but will require an encoding that preserves CR and LF characters
## without change. If the mail.mime.encodeeol.strict System property is set to "true", such an encoding will be used when necessary.
## The default is false.
## boolean
#mail.mime.encodeeol.strict=

## If set to "true", the getFileName method uses the MimeUtility method decodeText to decode any non-ASCII characters in the filename.
## Note that this decoding violates the MIME specification, but is useful for interoperating with some mail clients that use this convention.
## The default is false.
## boolean
#mail.mime.decodefilename=

## If set to "true", the setFileName method uses the MimeUtility method encodeText to encode any non-ASCII characters in the filename.
## Note that this encoding violates the MIME specification, but is useful for interoperating with some mail clients that use this convention.
## The default is false.
## boolean
#mail.mime.encodefilename=

## If set to "true", non-ASCII parameters in a ParameterList, e.g., in a Content-Type header, will be encoded as specified by RFC 2231.
## The default is false.
## boolean
#mail.mime.decodeparameters=

## If set to "true", non-ASCII parameters in a ParameterList, e.g., in a Content-Type header, will be decoded as specified by RFC 2231.
## The default is false.
## boolean
#mail.mime.encodeparameters=

## Normally, when parsing a multipart MIME message, a message that is missing the final end boundary line is not considered an error.
## The data simply ends at the end of the input. Note that messages of this form violate the MIME specification.
## If the property mail.mime.multipart.ignoremissingendboundary is set to false, such messages are considered an error and a MesagingException
## will be thrown when parsing such a message.
## boolean
#mail.mime.multipart.ignoremissingendboundary=

## If the Content-Type header for a multipart content does not have a boundary parameter, the multipart parsing code will look for the first
## line in the content that looks like a boundary line and extract the boundary parameter from the line.
## If this property is set to "false", a MessagingException will be thrown if the Content-Type header doesn't specify a boundary parameter.
## The default is true.
## boolean
#mail.mime.multipart.ignoremissingboundaryparameter=

## If set to "true", the BASE64 decoder will ignore errors in the encoded data, returning EOF.
## This may be useful when dealing with improperly encoded messages that contain extraneous data at the end of the encoded stream.
## Note however that errors anywhere in the stream will cause the decoder to stop decoding so this should be used with extreme caution.
## The default is false.
## boolean
# mail.mime.base64.ignoreerrors=

## If set to "true", header fields containing just text such as the Subject and Content-Description header fields, and long parameter values
## in structured headers such as Content-Type will be folded (broken into 76 character lines) when set and unfolded when read.
## The default is true.
## boolean
#mail.mime.foldtext=

## If set to "true", the setFileName method will also set the name parameter on the Content-Type header to the specified filename.
## This supports interoperability with some old mail clients.
## The default is true.
## boolean
#mail.mime.setcontenttypefilename=

## When updating the headers of a message, a body part with a text content type but no charset parameter will have a charset parameter added to it if this property is set to "true".
## The default is true.
## boolean
#mail.mime.setdefaulttextcharset=

## A string containing other email addresses that the current user is known by. The MimeMessage reply method will eliminate any of these addresses from the recipient list in the message it constructs,
## to avoid sending the reply back to the sender.
## String
#mail.alternates=

## If set to "true", the MimeMessage reply method will put all recipients except the original sender in the Cc list of the newly constructed message.
## Normally, recipients in the To header of the original message will also appear in the To list of the newly constructed message.
#mail.replyallcc=