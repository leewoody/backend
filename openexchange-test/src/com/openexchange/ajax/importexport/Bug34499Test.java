
package com.openexchange.ajax.importexport;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import java.io.ByteArrayInputStream;
import org.json.JSONArray;
import org.junit.Test;
import com.openexchange.ajax.contact.AbstractManagedContactTest;
import com.openexchange.ajax.importexport.actions.CSVImportRequest;
import com.openexchange.ajax.importexport.actions.CSVImportResponse;
import com.openexchange.groupware.container.Contact;

/**
 * {@link Bug34499Test}
 *
 * csv import stops in case of an invalid email address instead if ignoring it
 *
 * @author <a href="mailto:tobias.friedrich@open-xchange.com">Tobias Friedrich</a>
 */
public class Bug34499Test extends AbstractManagedContactTest {

    @Test
    public void testImportEmptyDatesAndDistinguishedNames() throws Exception {
        /*
         * import csv
         */
        byte[] csv = { 34, 65, 110, 114, 101, 100, 101, 34, 44, 34, 86, 111, 114, 110, 97, 109, 101, 34, 44, 34, 87, 101, 105, 116, 101, 114, 101, 32, 86, 111, 114, 110, 97, 109, 101, 110, 34, 44, 34, 78, 97, 99, 104, 110, 97, 109, 101, 34, 44, 34, 83, 117, 102, 102, 105, 120, 34, 44, 34, 70, 105, 114, 109, 97, 34, 44, 34, 65, 98, 116, 101, 105, 108, 117, 110, 103, 34, 44, 34, 80, 111, 115, 105, 116, 105, 111, 110, 34, 44, 34, 83, 116, 114, 97, -33, 101, 32, 103, 101, 115, 99, 104, -28, 102, 116, 108, 105, 99, 104, 34, 44, 34, 83, 116, 114, 97, -33, 101, 32, 103, 101, 115, 99, 104, -28, 102, 116, 108, 105, 99, 104, 32, 50, 34, 44, 34, 83, 116, 114, 97, -33, 101, 32, 103, 101, 115, 99, 104, -28, 102, 116, 108, 105, 99, 104, 32, 51, 34, 44, 34, 79, 114, 116, 32, 103, 101, 115, 99, 104, -28, 102, 116, 108, 105, 99, 104, 34, 44, 34, 82, 101, 103, 105, 111, 110, 32, 103, 101, 115, 99, 104, -28, 102, 116, 108, 105, 99, 104, 34, 44, 34, 80, 111, 115, 116, 108, 101, 105, 116, 122, 97, 104, 108, 32, 103, 101, 115, 99, 104, -28, 102, 116, 108, 105, 99, 104, 34, 44, 34, 76, 97, 110, 100, 47, 82, 101, 103, 105, 111, 110, 32, 103, 101, 115, 99, 104, -28, 102, 116, 108, 105, 99, 104, 34, 44, 34, 83, 116, 114, 97, -33, 101, 32, 112, 114, 105, 118, 97, 116, 34, 44, 34, 83, 116, 114, 97, -33, 101, 32, 112, 114, 105, 118, 97, 116, 32, 50, 34, 44, 34, 83, 116, 114, 97, -33, 101, 32, 112, 114, 105, 118, 97, 116, 32, 51, 34, 44, 34, 79, 114, 116, 32, 112, 114, 105, 118, 97, 116, 34, 44, 34, 66, 117, 110, 100, 101, 115, 108, 97, 110, 100, 47, 75, 97, 110, 116, 111, 110, 32, 112, 114, 105, 118, 97, 116, 34, 44, 34, 80, 111, 115, 116, 108, 101, 105, 116, 122, 97, 104, 108, 32, 112, 114, 105, 118, 97, 116, 34, 44, 34, 76, 97, 110, 100, 47, 82, 101, 103, 105, 111, 110, 32, 112, 114, 105, 118, 97, 116, 34, 44, 34, 87, 101, 105, 116, 101, 114, 101, 32, 83, 116, 114, 97, -33, 101, 34, 44, 34, 87, 101, 105, 116, 101, 114, 101, 32, 83, 116, 114, 97, -33, 101, 32, 50, 34, 44, 34, 87, 101, 105, 116, 101, 114, 101, 32, 83, 116, 114, 97, -33, 101, 32, 51, 34, 44, 34, 87, 101, 105, 116, 101, 114, 101, 114, 32, 79, 114, 116, 34, 44, 34, 87, 101, 105, 116, 101, 114, 101, 115, 47, 114, 32, 66, 117, 110, 100, 101, 115, 108, 97, 110, 100, 47, 75, 97, 110, 116, 111, 110, 34, 44, 34, 87, 101, 105, 116, 101, 114, 101, 32, 80, 111, 115, 116, 108, 101, 105, 116, 122, 97, 104, 108, 34, 44, 34, 87, 101, 105, 116, 101, 114, 101, 115, 47, 101, 32, 76, 97, 110, 100, 47, 82, 101, 103, 105, 111, 110, 34, 44, 34, 84, 101, 108, 101, 102, 111, 110, 32, 65, 115, 115, 105, 115, 116, 101, 110, 116, 34, 44, 34, 70, 97, 120, 32, 103, 101, 115, 99, 104, -28, 102, 116, 108, 105, 99, 104, 34, 44, 34, 84, 101, 108, 101, 102, 111, 110, 32, 103, 101, 115, 99, 104, -28, 102, 116, 108, 105, 99, 104, 34, 44, 34, 84, 101, 108, 101, 102, 111, 110, 32, 103, 101, 115, 99, 104, -28, 102, 116, 108, 105, 99, 104, 32, 50, 34, 44, 34, 82, -4, 99, 107, 109, 101, 108, 100, 117, 110, 103, 34, 44, 34, 65, 117, 116, 111, 116, 101, 108, 101, 102, 111, 110, 34, 44, 34, 84, 101, 108, 101, 102, 111, 110, 32, 70, 105, 114, 109, 97, 34, 44, 34, 70, 97, 120, 32, 112, 114, 105, 118, 97, 116, 34, 44, 34, 84, 101, 108, 101, 102, 111, 110, 32, 112, 114, 105, 118, 97, 116, 34, 44, 34, 84, 101, 108, 101, 102, 111, 110, 32, 112, 114, 105, 118, 97, 116, 32, 50, 34, 44, 34, 73, 83, 68, 78, 34, 44, 34, 77, 111, 98, 105, 108, 116, 101, 108, 101, 102, 111, 110, 34, 44, 34, 87, 101, 105, 116, 101, 114, 101, 115, 32, 70, 97, 120, 34, 44, 34, 87, 101, 105, 116, 101, 114, 101, 115, 32, 84, 101, 108, 101, 102, 111, 110, 34, 44, 34, 80, 97, 103, 101, 114, 34, 44, 34, 72, 97, 117, 112, 116, 116, 101, 108, 101, 102, 111, 110, 34, 44, 34, 77, 111, 98, 105, 108, 116, 101, 108, 101, 102, 111, 110, 32, 50, 34, 44, 34, 84, 101, 108, 101, 102, 111, 110, 32, 102, -4, 114, 32, 72, -10, 114, 98, 101, 104, 105, 110, 100, 101, 114, 116, 101, 34, 44, 34, 84, 101, 108, 101, 120, 34, 44, 34, 65, 98, 114, 101, 99, 104, 110, 117, 110, 103, 115, 105, 110, 102, 111, 114, 109, 97, 116, 105, 111, 110, 34, 44, 34, 66, 101, 110, 117, 116, 122, 101, 114, 32, 49, 34, 44, 34, 66, 101, 110, 117, 116, 122, 101, 114, 32, 50, 34, 44, 34, 66, 101, 110, 117, 116, 122, 101, 114, 32, 51, 34, 44, 34, 66, 101, 110, 117, 116, 122, 101, 114, 32, 52, 34, 44, 34, 66, 101, 114, 117, 102, 34, 44, 34, 66, -4, 114, 111, 34, 44, 34, 69, 45, 77, 97, 105, 108, 45, 65, 100, 114, 101, 115, 115, 101, 34, 44, 34, 69, 45, 77, 97, 105, 108, 45, 84, 121, 112, 34, 44, 34, 69, 45, 77, 97, 105, 108, 58, 32, 65, 110, 103, 101, 122, 101, 105, 103, 116, 101, 114, 32, 78, 97, 109, 101, 34, 44, 34, 69, 45, 77, 97, 105, 108, 32, 50, 58, 32, 65, 100, 114, 101, 115, 115, 101, 34, 44, 34, 69, 45, 77, 97, 105, 108, 32, 50, 58, 32, 84, 121, 112, 34, 44, 34, 69, 45, 77, 97, 105, 108, 32, 50, 58, 32, 65, 110, 103, 101, 122, 101, 105, 103, 116, 101, 114, 32, 78, 97, 109, 101, 34, 44, 34, 69, 45, 77, 97, 105, 108, 32, 51, 58, 32, 65, 100, 114, 101, 115, 115, 101, 34, 44, 34, 69, 45, 77, 97, 105, 108, 32, 51, 58, 32, 84, 121, 112, 34, 44, 34, 69, 45, 77, 97, 105, 108, 32, 51, 58, 32, 65, 110, 103, 101, 122, 101, 105, 103, 116, 101, 114, 32, 78, 97, 109, 101, 34, 44, 34, 69, 109, 112, 102, 111, 104, 108, 101, 110, 32, 118, 111, 110, 34, 44, 34, 71, 101, 98, 117, 114, 116, 115, 116, 97, 103, 34, 44, 34, 71, 101, 115, 99, 104, 108, 101, 99, 104, 116, 34, 44, 34, 72, 111, 98, 98, 121, 34, 44, 34, 73, 110, 105, 116, 105, 97, 108, 101, 110, 34, 44, 34, 73, 110, 116, 101, 114, 110, 101, 116, 32, 70, 114, 101, 105, 47, 71, 101, 98, 117, 99, 104, 116, 34, 44, 34, 74, 97, 104, 114, 101, 115, 116, 97, 103, 34, 44, 34, 75, 97, 116, 101, 103, 111, 114, 105, 101, 110, 34, 44, 34, 75, 105, 110, 100, 101, 114, 34, 44, 34, 75, 111, 110, 116, 111, 34, 44, 34, 78, 97, 109, 101, 32, 65, 115, 115, 105, 115, 116, 101, 110, 116, 34, 44, 34, 78, 97, 109, 101, 32, 100, 101, 115, 47, 114, 32, 86, 111, 114, 103, 101, 115, 101, 116, 122, 116, 101, 110, 34, 44, 34, 78, 111, 116, 105, 122, 101, 110, 34, 44, 34, 79, 114, 103, 97, 110, 105, 115, 97, 116, 105, 111, 110, 115, 110, 114, 46, 34, 44, 34, 79, 114, 116, 34, 44, 34, 80, 97, 114, 116, 110, 101, 114, 34, 44, 34, 80, 111, 115, 116, 102, 97, 99, 104, 32, 103, 101, 115, 99, 104, -28, 102, 116, 108, 105, 99, 104, 34, 44, 34, 80, 111, 115, 116, 102, 97, 99, 104, 32, 112, 114, 105, 118, 97, 116, 34, 44, 34, 80, 114, 105, 111, 114, 105, 116, -28, 116, 34, 44, 34, 80, 114, 105, 118, 97, 116, 34, 44, 34, 82, 101, 103, 105, 101, 114, 117, 110, 103, 115, 110, 114, 46, 34, 44, 34, 82, 101, 105, 115, 101, 107, 105, 108, 111, 109, 101, 116, 101, 114, 34, 44, 34, 83, 112, 114, 97, 99, 104, 101, 34, 44, 34, 83, 116, 105, 99, 104, 119, -10, 114, 116, 101, 114, 34, 44, 34, 86, 101, 114, 116, 114, 97, 117, 108, 105, 99, 104, 107, 101, 105, 116, 34, 44, 34, 86, 101, 114, 122, 101, 105, 99, 104, 110, 105, 115, 115, 101, 114, 118, 101, 114, 34, 44, 34, 87, 101, 98, 115, 101, 105, 116, 101, 34, 44, 34, 87, 101, 105, 116, 101, 114, 101, 115, 32, 80, 111, 115, 116, 102, 97, 99, 104, 34, 13, 10, 34, 34, 44, 34, 66, 111, 100, 111, 34, 44, 34, 34, 44, 34, 73, 108, 108, 103, 110, 101, 114, 34, 44, 34, 34, 44, 34, 34, 44, 34, 34, 44, 34, 34, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 34, 48, 46, 48, 46, 48, 48, 34, 44, 34, 75, 101, 105, 110, 101, 32, 65, 110, 103, 97, 98, 101, 34, 44, 44, 34, 66, 46, 73, 46, 34, 44, 44, 34, 48, 46, 48, 46, 48, 48, 34, 44, 44, 44, 34, 34, 44, 44, 44, 34, 13, 10, 34, 44, 44, 34, 34, 44, 44, 44, 44, 34, 78, 111, 114, 109, 97, 108, 34, 44, 34, 65, 117, 115, 34, 44, 44, 44, 34, 34, 44, 34, 34, 44, 34, 78, 111, 114, 109, 97, 108, 34, 13, 10, 34, 34, 44, 34, 75, 101, 105, 110, 34, 44, 34, 34, 44, 34, 68, 97, 116, 117, 109, 34, 44, 34, 34, 44, 34, 34, 44, 34, 34, 44, 34, 34, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 34, 48, 46, 48, 46, 48, 48, 34, 44, 34, 75, 101, 105, 110, 101, 32, 65, 110, 103, 97, 98, 101, 34, 44, 44, 34, 75, 46, 68, 46, 34, 44, 44, 34, 48, 46, 48, 46, 48, 48, 34, 44, 44, 44, 34, 34, 44, 44, 44, 34, 13, 10, 34, 44, 44, 34, 34, 44, 44, 44, 44, 34, 78, 111, 114, 109, 97, 108, 34, 44, 34, 65, 117, 115, 34, 44, 44, 44, 34, 34, 44, 34, 34, 44, 34, 78, 111, 114, 109, 97, 108, 34, 13, 10
        };
        CSVImportRequest request = new CSVImportRequest(folderID, new ByteArrayInputStream(csv), false);
        CSVImportResponse response = getClient().execute(request);
        /*
         * verify response
         */
        assertNotNull("No response", response);
        assertFalse("response has error", response.hasError());
        JSONArray data = (JSONArray) response.getData();
        assertNotNull("got no data", data);
        assertEquals(2, data.length());
        assertTrue("No object ID for first contact", data.getJSONObject(0).has("id"));
        assertTrue("No warning for first contact", data.getJSONObject(0).has("code"));
        assertEquals("Wrong error code for first contact", "I_E-1306", data.getJSONObject(0).get("code"));
        assertTrue("No object ID for first contact", data.getJSONObject(1).has("id"));
        assertTrue("No warning for first contact", data.getJSONObject(1).has("code"));
        assertEquals("Wrong error code for first contact", "I_E-1306", data.getJSONObject(1).get("code"));
        /*
         * verify imported contacts
         */
        Contact firstContact = cotm.getAction(folderID, data.getJSONObject(0).getInt("id"));
        assertNotNull("First imported contact not found", firstContact);
        assertNull("Birthday found in first contact", firstContact.getBirthday());
        assertNull("Anniversary found in first contact", firstContact.getAnniversary());
        assertNull("E-Mail found in first contact", firstContact.getEmail1());
        Contact secondContact = cotm.getAction(folderID, data.getJSONObject(1).getInt("id"));
        assertNotNull("Second imported contact not found", secondContact);
        assertNull("Birthday found in second contact", secondContact.getBirthday());
        assertNull("Anniversary found in second contact", secondContact.getAnniversary());
        assertNull("E-Mail found in second contact", secondContact.getEmail1());
    }

}
