package com.openexchange.admin.soap.util.soap;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 2.6.0
 * 2012-06-01T18:46:00.766+02:00
 * Generated source version: 2.6.0
 *
 */
@WebService(targetNamespace = "http://soap.admin.openexchange.com", name = "OXUtilServicePortType")
@XmlSeeAlso({com.openexchange.admin.soap.util.exceptions.ObjectFactory.class, com.openexchange.admin.soap.util.dataobjects.ObjectFactory.class, com.openexchange.admin.soap.util.rmi.ObjectFactory.class, com.openexchange.admin.soap.util.io.ObjectFactory.class, ObjectFactory.class})
public interface OXUtilServicePortType {

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:registerServer", output = "urn:registerServerResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:registerServerStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:registerServerInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:registerServerInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:registerServerRemoteException")})
    @RequestWrapper(localName = "registerServer", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.RegisterServer")
    @WebMethod(action = "urn:registerServer")
    @ResponseWrapper(localName = "registerServerResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.RegisterServerResponse")
    public com.openexchange.admin.soap.util.dataobjects.Server registerServer(
        @WebParam(name = "srv", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Server srv,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:changeDatabase", output = "urn:changeDatabaseResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:changeDatabaseStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:changeDatabaseInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:changeDatabaseInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:changeDatabaseRemoteException")})
    @WebMethod(action = "urn:changeDatabase")
    public void changeDatabase(
        @WebParam(partName = "parameters", name = "changeDatabase", targetNamespace = "http://soap.admin.openexchange.com")
        ChangeDatabase parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:listAllDatabase", output = "urn:listAllDatabaseResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:listAllDatabaseStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listAllDatabaseInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listAllDatabaseInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listAllDatabaseRemoteException")})
    @RequestWrapper(localName = "listAllDatabase", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListAllDatabase")
    @WebMethod(action = "urn:listAllDatabase")
    @ResponseWrapper(localName = "listAllDatabaseResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListAllDatabaseResponse")
    public java.util.List<com.openexchange.admin.soap.util.dataobjects.Database> listAllDatabase(
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:deleteMaintenanceReason", output = "urn:deleteMaintenanceReasonResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:deleteMaintenanceReasonStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:deleteMaintenanceReasonInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:deleteMaintenanceReasonInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:deleteMaintenanceReasonRemoteException")})
    @WebMethod(action = "urn:deleteMaintenanceReason")
    public void deleteMaintenanceReason(
        @WebParam(partName = "parameters", name = "deleteMaintenanceReason", targetNamespace = "http://soap.admin.openexchange.com")
        DeleteMaintenanceReason parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:listAllServer", output = "urn:listAllServerResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:listAllServerStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listAllServerInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listAllServerInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listAllServerRemoteException")})
    @RequestWrapper(localName = "listAllServer", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListAllServer")
    @WebMethod(action = "urn:listAllServer")
    @ResponseWrapper(localName = "listAllServerResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListAllServerResponse")
    public java.util.List<com.openexchange.admin.soap.util.dataobjects.Server> listAllServer(
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:listMaintenanceReason", output = "urn:listMaintenanceReasonResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:listMaintenanceReasonStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listMaintenanceReasonInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listMaintenanceReasonInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listMaintenanceReasonRemoteException")})
    @RequestWrapper(localName = "listMaintenanceReason", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListMaintenanceReason")
    @WebMethod(action = "urn:listMaintenanceReason")
    @ResponseWrapper(localName = "listMaintenanceReasonResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListMaintenanceReasonResponse")
    public java.util.List<com.openexchange.admin.soap.util.dataobjects.MaintenanceReason> listMaintenanceReason(
        @WebParam(name = "search_pattern", targetNamespace = "http://soap.admin.openexchange.com")
        java.lang.String searchPattern,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:unregisterServer", output = "urn:unregisterServerResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:unregisterServerStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:unregisterServerInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:unregisterServerInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:unregisterServerRemoteException")})
    @WebMethod(action = "urn:unregisterServer")
    public void unregisterServer(
        @WebParam(partName = "parameters", name = "unregisterServer", targetNamespace = "http://soap.admin.openexchange.com")
        UnregisterServer parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:listServer", output = "urn:listServerResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:listServerStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listServerInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listServerInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listServerRemoteException")})
    @RequestWrapper(localName = "listServer", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListServer")
    @WebMethod(action = "urn:listServer")
    @ResponseWrapper(localName = "listServerResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListServerResponse")
    public java.util.List<com.openexchange.admin.soap.util.dataobjects.Server> listServer(
        @WebParam(name = "search_pattern", targetNamespace = "http://soap.admin.openexchange.com")
        java.lang.String searchPattern,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:listDatabase", output = "urn:listDatabaseResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:listDatabaseStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listDatabaseInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listDatabaseInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listDatabaseRemoteException")})
    @RequestWrapper(localName = "listDatabase", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListDatabase")
    @WebMethod(action = "urn:listDatabase")
    @ResponseWrapper(localName = "listDatabaseResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListDatabaseResponse")
    public java.util.List<com.openexchange.admin.soap.util.dataobjects.Database> listDatabase(
        @WebParam(name = "search_pattern", targetNamespace = "http://soap.admin.openexchange.com")
        java.lang.String searchPattern,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:unblockDatabase", output = "urn:unblockDatabaseResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:unblockDatabaseStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:unblockDatabaseInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:unblockDatabaseInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:unblockDatabaseRemoteException")})
    @RequestWrapper(localName = "unblockDatabase", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.UnblockDatabase")
    @WebMethod(action = "urn:unblockDatabase")
    @ResponseWrapper(localName = "unblockDatabaseResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.UnblockDatabaseResponse")
    public java.util.List<com.openexchange.admin.soap.util.dataobjects.Database> unblockDatabase(
        @WebParam(name = "db", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Database db,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:checkDatabase", output = "urn:checkDatabaseResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:checkDatabaseStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:checkDatabaseInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:checkDatabaseInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:checkDatabaseRemoteException")})
    @RequestWrapper(localName = "checkDatabase", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.CheckDatabase")
    @WebMethod(action = "urn:checkDatabase")
    @ResponseWrapper(localName = "checkDatabaseResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.CheckDatabaseResponse")
    public com.openexchange.admin.soap.util.dataobjects.CheckedDatabases checkDatabase(
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:createMaintenanceReason", output = "urn:createMaintenanceReasonResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:createMaintenanceReasonStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:createMaintenanceReasonInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:createMaintenanceReasonInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:createMaintenanceReasonRemoteException")})
    @RequestWrapper(localName = "createMaintenanceReason", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.CreateMaintenanceReason")
    @WebMethod(action = "urn:createMaintenanceReason")
    @ResponseWrapper(localName = "createMaintenanceReasonResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.CreateMaintenanceReasonResponse")
    public com.openexchange.admin.soap.util.dataobjects.MaintenanceReason createMaintenanceReason(
        @WebParam(name = "reason", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.MaintenanceReason reason,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:registerDatabase", output = "urn:registerDatabaseResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:registerDatabaseStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:registerDatabaseInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:registerDatabaseInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:registerDatabaseRemoteException")})
    @RequestWrapper(localName = "registerDatabase", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.RegisterDatabase")
    @WebMethod(action = "urn:registerDatabase")
    @ResponseWrapper(localName = "registerDatabaseResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.RegisterDatabaseResponse")
    public com.openexchange.admin.soap.util.dataobjects.Database registerDatabase(
        @WebParam(name = "db", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Database db,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:listAllMaintenanceReason", output = "urn:listAllMaintenanceReasonResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:listAllMaintenanceReasonStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listAllMaintenanceReasonInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listAllMaintenanceReasonInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listAllMaintenanceReasonRemoteException")})
    @RequestWrapper(localName = "listAllMaintenanceReason", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListAllMaintenanceReason")
    @WebMethod(action = "urn:listAllMaintenanceReason")
    @ResponseWrapper(localName = "listAllMaintenanceReasonResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListAllMaintenanceReasonResponse")
    public java.util.List<com.openexchange.admin.soap.util.dataobjects.MaintenanceReason> listAllMaintenanceReason(
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:registerFilestore", output = "urn:registerFilestoreResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:registerFilestoreStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:registerFilestoreInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:registerFilestoreInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:registerFilestoreRemoteException")})
    @RequestWrapper(localName = "registerFilestore", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.RegisterFilestore")
    @WebMethod(action = "urn:registerFilestore")
    @ResponseWrapper(localName = "registerFilestoreResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.RegisterFilestoreResponse")
    public com.openexchange.admin.soap.util.dataobjects.Filestore registerFilestore(
        @WebParam(name = "fstore", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Filestore fstore,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:unregisterFilestore", output = "urn:unregisterFilestoreResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:unregisterFilestoreStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:unregisterFilestoreInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:unregisterFilestoreInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:unregisterFilestoreRemoteException")})
    @WebMethod(action = "urn:unregisterFilestore")
    public void unregisterFilestore(
        @WebParam(partName = "parameters", name = "unregisterFilestore", targetNamespace = "http://soap.admin.openexchange.com")
        UnregisterFilestore parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:listFilestore", output = "urn:listFilestoreResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:listFilestoreStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listFilestoreInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listFilestoreInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listFilestoreRemoteException")})
    @RequestWrapper(localName = "listFilestore", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListFilestore")
    @WebMethod(action = "urn:listFilestore")
    @ResponseWrapper(localName = "listFilestoreResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListFilestoreResponse")
    public java.util.List<com.openexchange.admin.soap.util.dataobjects.Filestore> listFilestore(
        @WebParam(name = "search_pattern", targetNamespace = "http://soap.admin.openexchange.com")
        java.lang.String searchPattern,
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:changeFilestore", output = "urn:changeFilestoreResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:changeFilestoreStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:changeFilestoreInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:changeFilestoreInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:changeFilestoreRemoteException")})
    @WebMethod(action = "urn:changeFilestore")
    public void changeFilestore(
        @WebParam(partName = "parameters", name = "changeFilestore", targetNamespace = "http://soap.admin.openexchange.com")
        ChangeFilestore parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:listAllFilestore", output = "urn:listAllFilestoreResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:listAllFilestoreStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:listAllFilestoreInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:listAllFilestoreInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:listAllFilestoreRemoteException")})
    @RequestWrapper(localName = "listAllFilestore", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListAllFilestore")
    @WebMethod(action = "urn:listAllFilestore")
    @ResponseWrapper(localName = "listAllFilestoreResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.ListAllFilestoreResponse")
    public java.util.List<com.openexchange.admin.soap.util.dataobjects.Filestore> listAllFilestore(
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com")
        com.openexchange.admin.soap.util.dataobjects.Credentials auth
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
    @Action(input = "urn:unregisterDatabase", output = "urn:unregisterDatabaseResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:unregisterDatabaseStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:unregisterDatabaseInvalidCredentialsException"), @FaultAction(className = InvalidDataException_Exception.class, value = "urn:unregisterDatabaseInvalidDataException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:unregisterDatabaseRemoteException")})
    @WebMethod(action = "urn:unregisterDatabase")
    public void unregisterDatabase(
        @WebParam(partName = "parameters", name = "unregisterDatabase", targetNamespace = "http://soap.admin.openexchange.com")
        UnregisterDatabase parameters
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;

    @WebResult(name = "return", targetNamespace = "http://soap.admin.openexchange.com")
    @Action(input = "urn:createSchema", output = "urn:createSchemaResponse", fault = {@FaultAction(className = StorageException_Exception.class, value = "urn:createSchemaStorageException"), @FaultAction(className = InvalidCredentialsException_Exception.class, value = "urn:createSchemaInvalidCredentialsException"), @FaultAction(className = RemoteException_Exception.class, value = "urn:createSchemaRemoteException")})
    @RequestWrapper(localName = "createSchema", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.CreateSchema")
    @WebMethod(action = "urn:createSchema")
    @ResponseWrapper(localName = "createSchemaResponse", targetNamespace = "http://soap.admin.openexchange.com", className = "com.openexchange.admin.soap.util.soap.CreateSchemaResponse")
    public com.openexchange.admin.soap.util.dataobjects.Database createSchema(
        @WebParam(name = "auth", targetNamespace = "http://soap.admin.openexchange.com") com.openexchange.admin.soap.util.dataobjects.Credentials auth,
        @WebParam(name = "optDBId", targetNamespace = "http://soap.admin.openexchange.com") java.lang.Integer optDBId
    ) throws StorageException_Exception, InvalidCredentialsException_Exception, InvalidDataException_Exception, RemoteException_Exception;
}
