<?xml version="1.0" encoding="UTF-8" ?>
<configuration scan="true" scanPeriod="30 seconds" debug="false">
    <!-- sends logs to logback-beagle -->
    <!-- http://logback.qos.ch/beagle/index.html -->
    <!-- <consolePlugin /> -->

    <!-- Uncomment to enable JMX default configurator -->
    <!-- jmxConfigurator /-->

    <!--
    It is possible to activate extended filters to log events for specific contexts, users or sessions on
    all log levels. Use the command line tool '/opt/open-xchange/sbin/logconf' to enable these filters at
    runtime. To avoid flooding your logs with large amounts of useless events, the loggers that are allowed
    to bypass the globally configured log levels are whitelist-based. The whitelist can be configured in the
    'value'-attribute below as a comma-separated list. It works hierarchical, i.e. the value 'com.openexchanges'
    allows all loggers below (e.g. 'com.openexchange.some.Logger').
    -->
    <property scope="context" name="com.openexchange.logging.filter.loggerWhitelist" value="com.openexchange" />

    <!--
    Propagates changes made to the level of any logback-classic logger onto the java.util.logging framework.
    If this listener will be deleted, ox backend will add it programmatically.
    -->
    <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator"/>

    <!--
    Adds the required PatternLayouts if not yet done by another Open-Xchange PatternLayoutEncoder. This is
    especially required when using SYSLOG appender. If you remove this definition and no PatternLayout can be
    found a PARSER_ERROR will be thrown within the log.
    -->
    <define name="syslogPatternLayoutActivator" class="com.openexchange.logback.extensions.SyslogPatternLayoutActivator" />

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="com.openexchange.logback.extensions.ExtendedPatternLayoutEncoder">
        	<!--
        	The '%sanitisedMessage' token has been introduced in order to address the 'CWE-117: Improper Output Neutralization for Logs' vulnerability.
        	This token ensures that the 'LogSanitisingConverter' is used in the logging pipeline in order to sanitise log messages that might contain
        	ESC sequences, something that could lead to log injection/tampering/forging.
        	 -->
            <pattern>%date{"yyyy-MM-dd'T'HH:mm:ss,SSSZ"} %-5level [%thread] %class.%method\(%class{0}.java:%line\)%n%sanitisedMessage%n%lmdc%exception{full}</pattern>
        </encoder>
    </appender>

    <!-- Logstash appender -->
   	<!--
	<property scope="context" name="com.openexchange.logback.extensions.logstash.alwaysPersistEvents" value="false" />
   	<property scope="context" name="com.openexchange.logback.extensions.logstash.socketTimeout" value="60" />
   	<property scope="context" name="com.openexchange.logback.extensions.logstash.loadFactor" value="0.67" />
    <appender name="LOGSTASH" class="com.openexchange.logback.extensions.logstash.LogstashSocketAppender">
        <remoteHost>localhost</remoteHost>
        <port>31337</port>
        <reconnectionDelay>10000</reconnectionDelay>
        <eventDelayLimit>30000</eventDelayLimit>
        <encoder class="com.openexchange.logback.extensions.logstash.LogstashEncoder"/>
        <queueSize>2048</queueSize>
    </appender>
	-->

    <appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <queueSize>2048</queueSize>
        <discardingThreshold>0</discardingThreshold>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref="CONSOLE" />
        <!-- <appender-ref ref="LOGSTASH" /> -->
    </appender>

    <root level="INFO">
        <appender-ref ref="ASYNC" />
    </root>

    <!--
    Important note:
    The following option ensures, that all login relevant information is logged correctly. Such information is essential to detect
    and to address session issues, potentially caused by 3rd parties.

    Open-Xchange strongly suggests NOT to modify the configuration for the classes 'com.openexchange.login.internal.LoginPerformer'
    and 'com.openexchange.sessiond.impl.SessionHandler' to coarser logging settings (like WARN, ERROR and OFF). If you do so
    the Open-Xchange server will revert your change and set the log level for these classes to INFO. Finer settings (like TRACE, DEBUG
    and ALL) are allowed and will not be overridden.
    -->
    <logger name="com.openexchange.login.internal.LoginPerformer" level="INFO"/>
    <logger name="com.openexchange.sessiond.impl.SessionHandler" level="INFO"/>

    <!-- Package based logging. Possible levels: TRACE, DEBUG, INFO, WARN and ERROR -->
    <logger name="sun.rmi" level="INFO"/>
    <logger name="org.apache" level="WARN"/>
    <logger name="com.sun" level="INFO"/>
    <logger name="javax.management" level="INFO"/>
    <logger name="javax.jmdns" level="WARN"/>
    <logger name="com.hazelcast" level="WARN"/>
    <logger name="com.hazelcast.internal.diagnostics" level="INFO"/>
    <logger name="org.glassfish.grizzly" level="WARN"/>

    <logger name="org.jaudiotagger" level="ERROR"/>
    <logger name="com.openexchange.documentconverter.impl.Manager" level="WARN"/>
    <logger name="com.gargoylesoftware.htmlunit" level="WARN"/>

    <!-- Set to DEBUG to log SOAP requests for debugging purpose -->
    <logger name="org.apache.cxf" level="WARN"/>
    <logger name="com.openexchange.soap.cxf.logger" level="WARN"/>

    <!-- Set this to DEBUG to log all exceptions -->
    <logger name="com.openexchange.ajax.requesthandler.DispatcherServlet" level="INFO"/>

    <!-- Log access to UI files -->
    <!-- <logger name="com.openexchange.appsuite" level="DEBUG"/> -->

    <!-- Set this to DEBUG to log spreadsheet operations more in detail -->
    <!-- <logger name="com.openexchange.office.calcengine.client.impl.CalcEngineJob" level="DEBUG"/> -->
    
    <logger name="com.openexchange.file.storage.dropbox" level="DEBUG" />

</configuration>
